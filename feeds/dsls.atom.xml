<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">Mike Delmonaco's Blog: Posts tagged 'dsls'</title>
 <link rel="self" href="https://quasarbright.github.io/blog/feeds/dsls.atom.xml" />
 <link href="https://quasarbright.github.io/blog/tags/dsls.html" />
 <id>urn:https-quasarbright-github-io:-blog-tags-dsls-html</id>
 <updated>2024-08-24T17:02:21Z</updated>
 <entry>
  <title type="text">Parsing Text the Racket Way</title>
  <link rel="alternate" href="https://quasarbright.github.io/blog/2024/08/parsing-text-the-racket-way.html?utm_source=dsls&amp;utm_medium=Atom" />
  <id>urn:https-quasarbright-github-io:-blog-2024-08-parsing-text-the-racket-way-html</id>
  <published>2024-08-24T17:02:21Z</published>
  <updated>2024-08-24T17:02:21Z</updated>
  <author>
   <name>Mike Delmonaco</name></author>
  <content type="html">
&lt;p&gt;Have you ever needed to process some raw text and extract only parts of it? Most of the time, you can get by with some nasty regular expressions with groups, but sometimes the pattern that you&amp;rsquo;re trying to process is too complicated for regular expressions. That&amp;rsquo;s what parsers are good for, and they&amp;rsquo;re also the first step in an interpreter/compiler!&lt;/p&gt;

&lt;p&gt;In this post, we&amp;rsquo;ll discover parsers and create a domain-specific language for creating parsers in Racket.&lt;/p&gt;&lt;a href="https://quasarbright.github.io/blog/2024/08/parsing-text-the-racket-way.html?utm_source=dsls&amp;amp;utm_medium=Atom"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;</content></entry></feed>