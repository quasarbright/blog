((3) 0 () 16 ((p+ #"/home/runner/work/blog/blog/repo/_src/posts/2023-10-21-match.scrbl" . unix) (p+ #"/home/runner/work/blog/blog/repo/_src/posts/2023-10-21-callcc-to-everything.scrbl" . unix) (p+ #"/home/runner/work/blog/blog/repo/_src/posts/2024-04-01-minesweeper.scrbl" . unix) (p+ #"/home/runner/work/blog/blog/repo/_src/posts/2023-01-24-autodiff-part-2.scrbl" . unix) (p+ #"/home/runner/work/blog/blog/repo/_src/posts/2023-07-03-proof-checker.scrbl" . unix) (p+ #"/home/runner/work/blog/blog/repo/_src/posts/2024-08-09-log-fibonacci.md" . unix) (p+ #"/home/runner/work/blog/blog/repo/_src/posts/2022-11-05-regexp-derivative.scrbl" . unix) (p+ #"/home/runner/work/blog/blog/repo/_src/posts/2022-11-26-autodiff.scrbl" . unix) (p+ #"/home/runner/work/blog/blog/repo/_src/posts/2023-10-21-algebraic-effects.scrbl" . unix) (p+ #"/home/runner/work/blog/blog/repo/_src/posts/2023-11-18-simple-macro-system.scrbl" . unix) (p+ #"/home/runner/work/blog/blog/repo/_src/posts/2023-09-24-polynomial-solver.md" . unix) (p+ #"/home/runner/work/blog/blog/repo/_src/posts/2023-09-16-continuations.scrbl" . unix) (p+ #"/home/runner/work/blog/blog/repo/_src/posts/2023-10-07-pi-calculus.scrbl" . unix) (p+ #"/home/runner/work/blog/blog/repo/_src/posts/2024-11-06-stonks.md" . unix) (p+ #"/home/runner/work/blog/blog/repo/_src/posts/2024-08-19-peg.scrbl" . unix) (p+ #"/home/runner/work/blog/blog/repo/_src/posts/2022-10-02-composable-promises.scrbl" . unix)) () (h ! (equal) ((? . 0) f post (u . "Understanding and Implementing Pattern Matching") (? . 0) 1744126109 (p+ #"/home/runner/work/blog/blog/repo/2023/10/understanding-and-implementing-pattern-matching.html" . unix) (u . "/blog/2023/10/understanding-and-implementing-pattern-matching.html") (u . "2023-10-21T16:07:06") (? . 12) (? . 1) (c (u . "racket") c (u . "tutorials") c (u . "programming-languages") c (u . "understand-and-implement")) (u . "\n<p>Pattern matching is a very powerful tool used to destructure and perform case analysis on data.\nIt&rsquo;s commonly found in more academic functional languages and has recently made its way into Python. In this post,\nwe&rsquo;ll discover pattern matching and implement it in Racket.</p>\n\n<p>I will assume that you have some familiarity with Racket. We&rsquo;re going to be writing some macros, but general familiarity with macros should be enough, we&rsquo;re not doing anything fancy.</p>") #t (u . "\n<p>Pattern matching is a very powerful tool used to destructure and perform case analysis on data.\nIt&rsquo;s commonly found in more academic functional languages and has recently made its way into Python. In this post,\nwe&rsquo;ll discover pattern matching and implement it in Racket.</p>\n\n<p>I will assume that you have some familiarity with Racket. We&rsquo;re going to be writing some macros, but general familiarity with macros should be enough, we&rsquo;re not doing anything fancy.</p>\n<!--more-->\n\n<table cellpadding=\"0\" cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.Motivation%29\">1<span class=\"hspace\">&nbsp;</span>Motivation</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\"></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._match%29\">2<span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><span class=\"RktStxLink\">match</span></span></a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\"></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.Implementation%29\">3<span class=\"hspace\">&nbsp;</span>Implementation</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\"></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.Bonus__.Core_.Patterns%29\">4<span class=\"hspace\">&nbsp;</span>Bonus: Core Patterns</a></p></td></tr></tbody></table>\n\n<h1>1\n <tt>&nbsp;</tt><a name=\"(part._.Motivation)\"></a>Motivation</h1>\n\n<p>If you&rsquo;re already familiar with pattern matching, feel free to skip to <a data-pltdoc=\"x\" href=\"#%28part._.Implementation%29\">the implementation</a>.</p>\n\n<p>Before we get to pattern matching, let&rsquo;s talk about trees. Let&rsquo;s say we&rsquo;re trying to find the largest element in a binary tree.\nYou can do this with predicates and accessors:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">data</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-max</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29\">cond</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._max%29%29\">max</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-max</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node-left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-max</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node-right</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf-data</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-max</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-max</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">3</span></p></td></tr></tbody></table></div>\n\n<p>Easy enough. Now, let&rsquo;s reflect a binary tree to create its mirror image:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-reflect</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29\">cond</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-reflect</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node-right</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-reflect</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node-left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-reflect</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(leaf 1)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-reflect</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(node (leaf 2) (leaf 1))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-reflect</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(node (node (leaf 3) (leaf 2)) (leaf 1))</span></p></td></tr></tbody></table></div>\n\n<p>This looks pretty similar to the previous function. In fact, it&rsquo;s not hard to imagine pretty much every\nfunction on trees looking just like this: Check if it&rsquo;s a node with <span class=\"RktSym\">node?</span> use field accessors to get the left and right\nsubtrees, check if its a leaf with <span class=\"RktSym\">leaf?</span>, and use field accessors to get the data.</p>\n\n<p>Let&rsquo;s be good little programmers and avoid repeating ourselves by creating an abstraction:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-cases</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-leaf</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29\">cond</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">on-node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node-left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node-right</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">on-leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf-data</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-max</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-cases</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._max%29%29\">max</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-max</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">left</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-max</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">data</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">data</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-max</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-max</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">3</span></p></td></tr></tbody></table></div>\n\n<p>This is a little cleaner. It got rid of the predicates and accessors,\nbut there is still a little boilerplate with those lambdas.\nTo fix this, we can go one step further and make a macro!</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">node-body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">data</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">leaf-body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-cases</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">node-body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">data</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">leaf-body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-max</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._max%29%29\">max</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-max</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">left</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-max</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">data</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">data</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-max</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-max</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">3</span></p></td></tr></tbody></table></div>\n\n<p>Very nice! We have a concise syntax for defining functions on binary trees. One limitation is that we can&rsquo;t look deeper than one\nlevel into the data structure. If we were doing something like tree rotations, we&rsquo;d need to look 2 levels into the structure, but these\ntools wouldn&rsquo;t support that. Another limitation is that this only works for binary trees! Do we have to make this every time we work with union data?</p>\n\n<p>Let&rsquo;s look at some examples with lists. First, let&rsquo;s split a list into pairs:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-pairs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">lst</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c~3d%29%29\">&lt;=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._length%29%29\">length</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">lst</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._first%29%29\">first</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">lst</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._second%29%29\">second</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">lst</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-pairs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._rest%29%29\">rest</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._rest%29%29\">rest</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">lst</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-pairs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'()</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-pairs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'()</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-pairs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'((1 2))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-pairs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'((1 2))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-pairs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'((1 2) (3 4))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-pairs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'((1 2) (3 4))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-pairs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'((1 2) (3 4) (5 6))</span></p></td></tr></tbody></table></div>\n\n<p>Now let&rsquo;s zip two lists together:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">zip</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">xs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ys</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29\">cond</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._cons~3f%29%29\">cons?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">xs</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._cons~3f%29%29\">cons?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ys</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._first%29%29\">first</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">xs</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._first%29%29\">first</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ys</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">zip</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._rest%29%29\">rest</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">xs</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._rest%29%29\">rest</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ys</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._else%29%29\">else</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">zip</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'()</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">zip</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'()</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">zip</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">a</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'((1 a))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">zip</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">c</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'((1 a) (2 b) (3 c))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">zip</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">c</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">d</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'((1 a) (2 b))</span></p></td></tr></tbody></table></div>\n\n<p>There is a similar pattern, but more general: We have a few possible cases for the shape of our data. We check the possible cases, and based on the shape, we extract pieces of our data and operate on them. Except this isn&rsquo;t as straightforward and abstract-able as our very repetitive binary tree operations. There is still an abstraction to be made, but it&rsquo;s a much more general and powerful one. This abstraction is, of course, pattern matching.</p>\n\n<h1>2\n <tt>&nbsp;</tt><a name=\"(part._match)\"></a><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span></h1>\n\n<p>Here is how we would implement a tree operation with pattern matching:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-max</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._max%29%29\">max</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-max</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">left</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-max</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">data</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">data</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-max</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-max</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">3</span></p></td></tr></tbody></table></div>\n\n<p>It&rsquo;s pretty much the same as our <span class=\"RktSym\">bt-match</span>, except now we have to specify which constructor we&rsquo;re matching in which case.</p>\n\n<p>The general form for using <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span> is <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"stt\"> </span><span class=\"RktSym\">val</span><span class=\"stt\"> </span><span class=\"RktPn\">[</span><span class=\"RktSym\">pattern</span><span class=\"stt\"> </span><span class=\"RktSym\">body</span><span class=\"RktPn\">]</span><span class=\"stt\"> </span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span> where <span class=\"RktSym\">val</span> is the value you&rsquo;re destructuring,\n<span class=\"RktSym\">pattern</span> is a pattern, which specifies the shape of the data for this case and may bind variables to its fields, and <span class=\"RktSym\">body</span>\nhas access to these fields. A <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span> form can have many cases. The first case with a pattern that matches the shape of the data\nbinds the variables in its pattern to the corresponding pieces of <span class=\"RktSym\">val</span> and runs that case&rsquo;s <span class=\"RktSym\">body</span>.</p>\n\n<p>In this example, we have a <span class=\"RktSym\">node</span> pattern which binds the subtrees to variables called <span class=\"RktSym\">left</span> and <span class=\"RktSym\">right</span>. This pattern matches\nwhen the value being matched is a node and matches the sub-patterns against the sub-trees.\nVariable patterns like <span class=\"RktSym\">left</span> match any type of value and bind the value to that variable for use in the <span class=\"RktSym\">body</span>.</p>\n\n<p>Here is how we would implement the list operations with pattern matching:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-pairs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">lst</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">lst</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">lst</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-pairs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">lst</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">zip</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">xs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ys</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">xs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ys</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">xs</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ys</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">zip</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">xs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ys</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>In the <span class=\"RktSym\">to-pairs</span> example, we first check for the case of a list with at least two elements by using two <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span> patterns.\nA <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span> matches values that are <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span> pairs and matches the first sub-pattern agains the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._car%29%29\">car</a></span> and the second against\nthe <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cdr%29%29\">cdr</a></span> of the value.</p>\n\n<p>We also see the underscore pattern <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span>, which matches against any value, like a variable pattern, and ignores the value.\nIt is often used like <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._else%29%29\">else</a></span> in a cond, but can also be used to ignore a field as a subpattern.</p>\n\n<p>Here, we have a usage of a nested pattern. We have the pattern <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"stt\"> </span><span class=\"RktSym\">x</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"stt\"> </span><span class=\"RktSym\">y</span><span class=\"stt\"> </span><span class=\"RktSym\">lst</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span>. The pattern that matches the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cdr%29%29\">cdr</a></span> of <span class=\"RktSym\">lst</span>\nis another <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span> pattern. The ability to nest patterns like this allows us to check deeply into data structures, which is something we couldn&rsquo;t\ndo with our <span class=\"RktSym\">bt-match</span> macro.</p>\n\n<p>In the <span class=\"RktSym\">zip</span> example, we&rsquo;re matching against two values <span class=\"RktSym\">xs</span> and <span class=\"RktSym\">ys</span>. A simple trick for doing this is creating a list with two values and matching the list. Here, we use the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span> pattern which can take an arbitrary number of sub-patterns. Intuitively, it matches values which are lists with length equal to the number of sub-patterns and matches each element of the list on its corresponding sub-pattern. In this case, since we&rsquo;re matching against the value <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktSym\">xs</span><span class=\"stt\"> </span><span class=\"RktSym\">ys</span><span class=\"RktPn\">)</span>, we use two sub-patterns <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"stt\"> </span><span class=\"RktSym\">x</span><span class=\"stt\"> </span><span class=\"RktSym\">xs</span><span class=\"RktPn\">)</span> and <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"stt\"> </span><span class=\"RktSym\">y</span><span class=\"stt\"> </span><span class=\"RktSym\">ys</span><span class=\"RktPn\">)</span>. If they are both <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span>es, we can <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span> both elements to the zipped list by recurring. Otherwise, one of the lists must be empty, so we just return the empty list.</p>\n\n<p>Pattern matching is very powerful. We can check the shape of our data structures, reach deeply into them, check multiple cases,\nand even perform case analysis on multiple values at once.</p>\n\n<p>Let&rsquo;s do one more example just for fun. Let&rsquo;s take in a list of left/right steps representing a path in a binary tree and get the data at the\nleaf specified by the path:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-get</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">path</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">path</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">path</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-get</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">path</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">right</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">path</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-get</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">path</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">data</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">data</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">bt-get</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"path too short\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">bt-get</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"path too long\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-get</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">left</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-get</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">right</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">left</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-get</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">right</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">right</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">3</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-get</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">left</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktErr\">bt-get: path too long</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-get</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">right</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktErr\">bt-get: path too short</span></p></td></tr></tbody></table></div>\n\n<p>We are using list patterns and tree patterns at the same time to do case analysis on two values of two different types.\nImagine how annoying this would&rsquo;ve been to write without <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span>!</p>\n\n<p>The first pattern covers the case where we should go left and the tree is a node. We don&rsquo;t care about the right sub-tree, so we ignore it\nwith an underscore pattern. We check for the symbol <span class=\"RktVal\">'</span><span class=\"RktVal\">left</span> using a literal symbol pattern, which only matches if the value is equal\nto the symbol. Numbers, strings, etc. can be matched with literal patterns in a similar way. Here, the pattern does most of the heavy lifting.\nAll we have to do is recur on the sub-tree and the rest of the path. The next case is the same, but for going to the right.\nNext, we have the case where the path is empty and we&rsquo;re at a leaf. In this case, we return the data.</p>\n\n<p>Any other case is an error. If the path is empty, then the tree must be a node. Otherwise, the leaf case would&rsquo;ve run. This means the path was too short.\nSimilarly, if the list is non-empty, the tree must be a leaf, which means the path was too long.</p>\n\n<p>You should always cover all possibilities when using <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span>. If none of the patterns match, we get an error. Really, we should always have an absolute fallback case where the whole pattern is\nthe underscore pattern. But for this function, we&rsquo;ll assume that the inputs are actually trees and paths.</p>\n\n<p>Alright, hopefully I&rsquo;ve sold you on the power of pattern matching by now if you weren&rsquo;t already familiar with it. Without further ado, let&rsquo;s implement it!</p>\n\n<h1>3\n <tt>&nbsp;</tt><a name=\"(part._.Implementation)\"></a>Implementation</h1>\n\n<p>Since we&rsquo;re going to be binding variables, we&rsquo;re going to need a macro. And this isn&rsquo;t going to be some simple <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span>, it&rsquo;s going to be\na full-on compiler! The main part of the implementation is going to be a compiler from patterns to condition checks, field accesses, and variable bindings.</p>\n\n<p>To start off, let&rsquo;s write <span class=\"RktSym\">minimatch</span>, which only handles a single case and only supports <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span> and variable patterns.</p>\n\n<p>To match a <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span> pattern, we&rsquo;ll check that the value is a pair and recur, matching the sub-patterns on the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._car%29%29\">car</a></span> and <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cdr%29%29\">cdr</a></span> of the pair.\nTo match a variable pattern, we just bind it with a <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span>.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">minimatch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-minimatch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define-syntax%29%29\">define-syntax</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">do-minimatch</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._syntax-rules%29%29\">syntax-rules</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">car-pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cdr-pat</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._cons~3f%29%29\">cons?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">car-val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._car%29%29\">car</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">cdr-val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cdr%29%29\">cdr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-minimatch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">car-val</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">car-pat</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-minimatch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cdr-val</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">cdr-pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">minimatch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"match failed\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">var</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">var</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">minimatch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(1 2 ())</span></p></td></tr></tbody></table></div>\n\n<p>The main macro just simplifies things for the helper macro which does most of the work. We make a local variable for the value and wrap up the multi-expression\nbody as a single expression. The helper expects that the value expression is a variable and the body is a single expression.</p>\n\n<p>The helper macro is recursive on the pattern. To match a <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span> pattern, we recur on the two sub-patterns.\nTo match two patterns, we match the first pattern, and in the body of that case, we match the second pattern, and that case gets the real body.\nThe rest is just shape checking and \"field access\". Since we are only supporting one case here, we just error if the pattern doesn&rsquo;t match.\nIn the full version, we&rsquo;ll go to the next case instead.</p>\n\n<p>The variable pattern is super simple. To match a variable pattern, we just bind the value to the variable and run the body.</p>\n\n<p>Side note: We&rsquo;re implementing our macro using <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._syntax-rules%29%29\">syntax-rules</a></span>, which allows us to do pattern matching on syntax. This is kind of cheating, but it doesn&rsquo;t take away from the core ideas of how to implement pattern matching, which is the translation into checks, field accesses, and variable bindings. If you were making a language like Lisp from scratch and wanted to implement <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span> as a macro, you would have to do case analysis on the syntax the hard way.</p>\n\n<p>Let&rsquo;s see the expanded form of some examples:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">macro-debugger/expand</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stxops.html#%28def._%28%28quote._~23~25kernel%29._syntax-~3edatum%29%29\">syntax-&gt;datum</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">expand-only</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\">minimatch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">a</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktSym\">minimatch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktSym\">do-minimatch</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(let ((v 1)) (let ((a v)) (let () (add1 a))))</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stxops.html#%28def._%28%28quote._~23~25kernel%29._syntax-~3edatum%29%29\">syntax-&gt;datum</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">expand-only</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\">minimatch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktSym\">minimatch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktSym\">do-minimatch</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\">'(let ((v '(1)))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(if (cons? v)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(let ((car-val (car v)) (cdr-val (cdr v)))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(let ((a car-val)) (let ((b cdr-val)) (let () (list a b)))))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(error 'minimatch \"match failed\")))</span></p></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stxops.html#%28def._%28%28quote._~23~25kernel%29._syntax-~3edatum%29%29\">syntax-&gt;datum</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">expand-only</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\">minimatch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktSym\">minimatch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktSym\">do-minimatch</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\">'(let ((v '(1 2)))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(if (cons? v)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(let ((car-val (car v)) (cdr-val (cdr v)))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(let ((a car-val))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(if (cons? cdr-val)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(let ((car-val (car cdr-val)) (cdr-val (cdr cdr-val)))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(let ((b car-val)) (let ((c cdr-val)) (let () (list a b c)))))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(error 'minimatch \"match failed\"))))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(error 'minimatch \"match failed\")))</span></p></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>Since matching patterns like <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span> ends up wrapping the body in more calls to <span class=\"RktSym\">do-minimatch</span>, we end up wrapping the body with <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span>s and\n<span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span>s. And we only run the body if the value matches the pattern and all the bindings are in scope.</p>\n\n<p>Now, let&rsquo;s graduate to <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span> and handle multiple cases!</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define-syntax%29%29\">define-syntax</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._syntax-rules%29%29\">syntax-rules</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"all cases failed\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/case.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._case%29%29\">case</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%2A%29%29\">let*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">on-fail</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/case.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._case%29%29\">case</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define-syntax%29%29\">define-syntax</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">do-match</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._syntax-rules%29%29\">syntax-rules</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">car-pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cdr-pat</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._cons~3f%29%29\">cons?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">car-val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._car%29%29\">car</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">cdr-val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cdr%29%29\">cdr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">car-val</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">car-pat</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cdr-val</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">cdr-pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">var</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">var</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">d</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">e</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">42</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(1 2 ())</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">24</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">d</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">25</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktErr\">match: all cases failed</span></p></td></tr></tbody></table></div>\n\n<p>All we did was add an <span class=\"RktSym\">on-fail</span> argument to the helper macro. Instead of that default error, any time a pattern fails to match, it&rsquo;ll\njust go to the next case if there is one and error if there isn&rsquo;t one.</p>\n\n<p>Now, let&rsquo;s talk about some more pattern types.</p>\n\n<p><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"stt\"> </span><span class=\"RktSym\">pat</span><span class=\"stt\"> </span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span> matches all the patterns on the value. It succeeds if they all match and fails if any fail. For example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._rest%29%29\">rest</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">z</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._rest%29%29\">rest</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">z</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(1 (2 3) 2 3)</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">z</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">42</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"it didn't match\"</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">\"it didn't match\"</span></p></td></tr></tbody></table></div>\n\n<p>It&rsquo;s commonly used when you want a whole value and also want to take it apart.</p>\n\n<p><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"stt\"> </span><span class=\"RktSym\">pat</span><span class=\"stt\"> </span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span> matches the first successful pattern on the value and fails if none of the patterns match.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(1 2)</span></p></td></tr></tbody></table></div>\n\n<p>This is a silly example, but if we used it in <span class=\"RktSym\">bt-get</span>, it would&rsquo;ve cleaned it up a little:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-get</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">path</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">path</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">path</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">node</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">right</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">path</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bt-get</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">path</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">leaf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">data</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">data</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">bt-get</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"path too short\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">bt-get</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"path too long\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>Instead of there being two node cases, we can combine them into a single case using an <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span> pattern. Regardless of which pattern matches,\nwe do essentially the same thing. It&rsquo;s just with different values based on which case we&rsquo;re in. Generally, when two\ncases have the same body, you can usually use an <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span> pattern to turn it into one case.</p>\n\n<p>When you use an <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span> pattern, all sub-patterns must bind the same variables.</p>\n\n<p>Keeping with the logic trend, we also have <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/booleans.html#%28def._%28%28quote._~23~25kernel%29._not%29%29\">not</a></span><span class=\"stt\"> </span><span class=\"RktSym\">pat</span><span class=\"RktPn\">)</span>, which succeeds to match when <span class=\"RktSym\">pat</span> fails to match and fails when it succeeds. Anything\nvariables bound in <span class=\"RktSym\">pat</span> are not bound when the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/booleans.html#%28def._%28%28quote._~23~25kernel%29._not%29%29\">not</a></span> matches.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/booleans.html#%28def._%28%28quote._~23~25kernel%29._not%29%29\">not</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr></tbody></table></div>\n\n<p>The variables in the list pattern are not bound in the body.</p>\n\n<p>We also have the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">quote</a></span> pattern which matches against literal values:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr></tbody></table></div>\n\n<p>It succeds if the value is equal to the quoted datum.</p>\n\n<p>Before we implement, let&rsquo;s clean up our macro a little:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define-syntax%29%29\">define-syntax</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">stx</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._syntax-case%29%29\">syntax-case</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">stx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._syntax-case%29%29\">syntax-case</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktSym\">pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">car-pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cdr-pat</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._cons~3f%29%29\">cons?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">car-val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._car%29%29\">car</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">cdr-val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cdr%29%29\">cdr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">car-val</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">car-pat</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cdr-val</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">cdr-pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">var</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">var</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">z</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">z</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(1 2 ())</span></p></td></tr></tbody></table></div>\n\n<p>It&rsquo;s doing the same thing as before, but now we don&rsquo;t have to repeat the <span class=\"RktSym\">val</span>, <span class=\"RktSym\">body</span>, and <span class=\"RktSym\">on-fail</span> stuff everywhere.</p>\n\n<p>Now, let&rsquo;s implement these new patterns:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define-syntax%29%29\">define-syntax</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">stx</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._syntax-case%29%29\">syntax-case</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">stx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._syntax-case%29%29\">syntax-case</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktSym\">pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/booleans.html#%28def._%28%28quote._~23~25kernel%29._not%29%29\">not</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">quote</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">car-pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cdr-pat</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._cons~3f%29%29\">cons?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">car-val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._car%29%29\">car</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">cdr-val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cdr%29%29\">cdr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">car-val</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">car-pat</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cdr-val</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">cdr-pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pats</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pats</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktSym\">body</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pats</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">pat</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pats</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pats</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">pat-on-fail</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pats</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">pat-on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/booleans.html#%28def._%28%28quote._~23~25kernel%29._not%29%29\">not</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pat</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">run-body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">pat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">run-body</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">'</span><span class=\"RktVal\">datum</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._equal~3f%29%29\">equal?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">datum</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">body</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktSym\">body</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">var</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">var</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">b</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">b</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(a b)</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">b</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'b</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">b</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/booleans.html#%28def._%28%28quote._~23~25kernel%29._not%29%29\">not</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">z</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'a</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">b</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"I don't even care\"</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">\"I don't even care\"</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">c</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">d</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">c</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">d</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(a b)</span></p></td></tr></tbody></table></div>\n\n<p>For <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span> patterns, we pretty much just translate them into <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">quote</a></span> patterns and recur.</p>\n\n<p>For <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span> patterns, if there are no sub-patterns, we succeed. After all, every sub-pattern succeeded! If there is at least one sub-pattern, we match it and\nif it succeeds, we match the same value against the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span> of the rest of the sub-patterns. If any of the patterns fail,\nthe whole <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span> ends up failing because we pass <span class=\"RktSym\">on-fail</span> to every recursive call.</p>\n\n<p>For <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span> patterns, we do \"the opposite\". If there are no sub-patterns, we fail. If there is at least one, we match it.\nIf it succeeds, we immediately run the body. If it fails, we try matching on an <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span> of the rest of the sub-patterns. Instead of duplicating the <span class=\"RktSym\">on-fail</span> like <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span>, we duplicate <span class=\"RktSym\">body</span>.</p>\n\n<p>Remember how <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span> patterns can be used to turn two cases with the same body into one? This clearly automates that because\nwe use the body twice! And since we&rsquo;re essentially putting the body in two cases, if one of the patterns binds\na variable that isn&rsquo;t in the other, the other&rsquo;s copy of the body is going to have an unbound variable. That&rsquo;s why they all need to bind the\nsame variables.</p>\n\n<p>For <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/booleans.html#%28def._%28%28quote._~23~25kernel%29._not%29%29\">not</a></span> patterns, we just fail if the sub-pattern matches and run the body otherwise. Since the body isn&rsquo;t run in the\ncase with the pattern, it doesn&rsquo;t have access to the variables bound by the pattern.</p>\n\n<p>Lastly, <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">quote</a></span> patterns simply check the value for equality. And <span class=\"RktSym\">datum</span> doesn&rsquo;t have to be a symbol, as we see in the last example. It could be any datum, including lists, numbers, etc.</p>\n\n<p>We also threw in underscore patterns which just run the body.</p>\n\n<p>And there we have it! We have created a very useful little pattern matcher. The real Racket <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span> form has many more patterns that we\ndidn&rsquo;t implement like quasiquote patterns, struct patterns, predicate patterns, etc.\nWith this framework, we could implement most of those pretty straightforwardly. Many of them boil down to predicate checks and \"field accesses\" like the\npatterns we&rsquo;ve implemented.</p>\n\n<p>Struct patterns like for matching on <span class=\"RktSym\">node</span> are a little complicated. You need to use some more powerful\nmacro tools to detect a struct name and use struct reflection to get the predicate and field accessors.\nIt&rsquo;s totally doable, but I just want to focus on the big ideas in this post and that doesn&rsquo;t really shed more light on the essence of pattern matching.</p>\n\n<h1>4\n <tt>&nbsp;</tt><a name=\"(part._.Bonus__.Core_.Patterns)\"></a>Bonus: Core Patterns</h1>\n\n<p>You know how we implemented the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span> pattern by translating to other patterns? It turns out that the patterns we implemented can be translated into\na pretty small core language of patterns.</p>\n\n<p>That core language includes <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span>, <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span>, <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/booleans.html#%28def._%28%28quote._~23~25kernel%29._not%29%29\">not</a></span>, variable patterns, and some new patterns we didn&rsquo;t implement.</p>\n\n<p>One of the new patterns is <span class=\"RktSym\">?</span>. The pattern <span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"stt\"> </span><span class=\"RktSym\">predicate</span><span class=\"RktPn\">)</span> matches if we apply <span class=\"RktSym\">predcate</span> to the value\nand it returns a non-<span class=\"RktVal\">#f</span> value.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._cons~3f%29%29\">cons?</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"a cons\"</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"not a cons\"</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">\"a cons\"</span></p></td></tr></tbody></table></div>\n\n<p>The other is <span class=\"RktSym\">app</span>. The pattern <span class=\"RktPn\">(</span><span class=\"RktSym\">app</span><span class=\"stt\"> </span><span class=\"RktSym\">func</span><span class=\"stt\"> </span><span class=\"RktSym\">pat</span><span class=\"RktPn\">)</span> applies <span class=\"RktSym\">func</span> to the value and matches the result against <span class=\"RktSym\">pat</span>.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">app</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._car%29%29\">car</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr></tbody></table></div>\n\n<p>We applied <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._car%29%29\">car</a></span> to <span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"stt\"> </span><span class=\"RktVal\">2</span><span class=\"RktVal\">)</span>, got <span class=\"RktVal\">1</span>, and matched that against the pattern <span class=\"RktSym\">x</span>.</p>\n\n<p>These two new patterns directly express our shape checks and field accesses! For example, the pattern <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"stt\"> </span><span class=\"RktSym\">car-pat</span><span class=\"stt\"> </span><span class=\"RktSym\">cdr-pat</span><span class=\"RktPn\">)</span> is the same as\n<span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"stt\"> </span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._cons~3f%29%29\">cons?</a></span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">app</span><span class=\"stt\"> </span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._car%29%29\">car</a></span><span class=\"stt\"> </span><span class=\"RktSym\">car-pat</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">app</span><span class=\"stt\"> </span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cdr%29%29\">cdr</a></span><span class=\"stt\"> </span><span class=\"RktSym\">cdr-pat</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span>. The pattern <span class=\"RktVal\">'</span><span class=\"RktVal\">datum</span> is the same as <span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">value</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._equal~3f%29%29\">equal?</a></span><span class=\"stt\"> </span><span class=\"RktSym\">value</span><span class=\"stt\"> </span><span class=\"RktVal\">'</span><span class=\"RktVal\">datum</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span>. Underscore patterns are just <span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">value</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktVal\">#t</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span>. Using these translations, it&rsquo;s super easy to add patterns for other data structures like\nvectors, hashes, etc. without having to write the boilerplate of doing a shape check and field accesses.</p>\n\n<p>One very cool thing the real <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span> system supports is pattern expanders, which are macros for patterns. Using this, we could add new patterns in terms of existing ones without even having to change our <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span> macro! And not just us, anybody can extend <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span> by writing a pattern expander. Just like the Racket language itself.</p>")) ((? . 1) f post (u . "Everything from call/cc") (? . 1) 1744126109 (p+ #"/home/runner/work/blog/blog/repo/2023/10/everything-from-call-cc.html" . unix) (u . "/blog/2023/10/everything-from-call-cc.html") (u . "2023-10-21T20:40:48") (? . 0) (? . 9) (c (u . "racket") c (u . "continuations") c (u . "tutorials") c (u . "programming-languages")) (u . "\n<p><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span> is a powerful tool for implementing custom control forms operators. However, <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span> can be pretty unwieldy, so people tend to use delimited, composable continuations with operators like <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>. But what if I told you that these operators can be implemented using just <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span>?</p>\n\n<p>In this post, we&rsquo;ll implement delimited continuations, composable continuations, <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span>, and parameters all from just <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span>. I will assume a solid familiarity with continuations and Racket. If you aren&rsquo;t very familiar, then feel free to check out my <a href=\"/blog/2023/09/continuations.html\">continuations post</a> to get some background. But even having read that, you sould play around with them a lot to get familiar, because this post is pretty heavy on continuation weirdness!</p>") #t (u . "\n<p><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span> is a powerful tool for implementing custom control forms operators. However, <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span> can be pretty unwieldy, so people tend to use delimited, composable continuations with operators like <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>. But what if I told you that these operators can be implemented using just <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span>?</p>\n\n<p>In this post, we&rsquo;ll implement delimited continuations, composable continuations, <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span>, and parameters all from just <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span>. I will assume a solid familiarity with continuations and Racket. If you aren&rsquo;t very familiar, then feel free to check out my <a href=\"/blog/2023/09/continuations.html\">continuations post</a> to get some background. But even having read that, you sould play around with them a lot to get familiar, because this post is pretty heavy on continuation weirdness!</p>\n<!--more-->\n\n<table cellpadding=\"0\" cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.Delimited_and_.Composable_.Continuations%29\">1<span class=\"hspace\">&nbsp;</span>Delimited and Composable Continuations</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\"></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.Dynamic_.Wind%29\">2<span class=\"hspace\">&nbsp;</span>Dynamic Wind</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toclink\" data-pltdoc=\"x\" href=\"#%28part._.Parameters%29\">2.1<span class=\"hspace\">&nbsp;</span>Parameters</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\"></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.Putting_it_.All_.Together%29\">3<span class=\"hspace\">&nbsp;</span>Putting it All Together</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\"></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.Conclusion%29\">4<span class=\"hspace\">&nbsp;</span>Conclusion</a></p></td></tr></tbody></table>\n\n<h1>1\n <tt>&nbsp;</tt><a name=\"(part._.Delimited_and_.Composable_.Continuations)\"></a>Delimited and Composable Continuations</h1>\n\n<p>Without delimiters, continuations created with <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span> capture the entire program. Also, the continuations created with <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span> \"jump\" when you call them and they never return, so you can&rsquo;t use the result of calling a continuation. This is why they&rsquo;re called non-composable continuations. These two facts make <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span> confusing and difficult to use, so people usually use delimited, composable continuations with operators like <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>. But these can actually be implemented in terms of <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span>! So if you&rsquo;re working in a language with just <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span> and want delimited, composable continuations, you can implement them yourself.</p>\n\n<p>Before we get into any implementation, I need to give credit where credit is due. Most of the code in this post is based on code found on <a href=\"https://okmij.org/ftp/continuations/implementations.html\">Oleg Kiselyov&rsquo;s blog</a>. This post puts some of those pieces together, expands on them, and explains them in more detail.</p>\n\n<p>Let&rsquo;s think about what delimited continuations are. When we wrap code in a <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>, continuations created inside only capture up to the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>. In other words, calling a delimited continuation returns the result of \"filling the continuation&rsquo;s hole\" and running the rest of the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>&rsquo;s body. Calling an undelimited continuation fills in the hole and runs the rest of the whole program.</p>\n\n<p>Another property of continuations is composability. Non-composable continuations are like jumps. They are functions that never return, so you can&rsquo;t use the result. Composable continuations actually do return their results. In my continuations post, I called these aborting and non-aborting continuations respectively. This has nothing to do with whether a continuation is delimited. However, composable continuations only make sense when the continuations are delimited. If a composable continuation captures the whole rest of the program, it also captures the part of the program that exits the process! So the composable continuation is saying \"ok I&rsquo;m going to run the code from this continuation and then I&rsquo;ll come back to you\", but then while it&rsquo;s doing that, the world ends, so it never gets back to you.</p>\n\n<p>Side note: If you use <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span> from the repl, the continuations will actually return. But if you create a Racket program that just evaluates that expression, when run the program, you&rsquo;ll see that the continuation doesn&rsquo;t return. This is because the repl pretty much wraps top-level expression in a <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and modules don&rsquo;t.</p>\n\n<p>Our task is to limit how much is captured by a continuation and allow us to use the results of continuations.</p>\n\n<p>Now, without further ado, let&rsquo;s get coding!</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">go</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">top*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">program-thunk</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">thnk</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">go</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._when%29%29\">when</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">thnk</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">next-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._first%29%29\">first</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._rest%29%29\">rest</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">next-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">program-thunk</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">top</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">top*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">reset*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">go</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">reset*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">top</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(11)</span></p></td></tr></tbody></table></div>\n\n<p>In case you haven&rsquo;t seen it, <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"stt\"> </span><span class=\"RktSym\">k</span><span class=\"stt\"> </span><span class=\"RktSym\">body</span><span class=\"stt\"> </span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span> is equivalent to <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">lamdba</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktSym\">body</span><span class=\"stt\"> </span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span>. It&rsquo;s just easier to write.</p>\n\n<p>To start, we implement something like a scheduler, or trampolining, in <span class=\"RktSym\">top*</span>. <span class=\"RktSym\">go</span> is a (non-composable) continuation that takes in a zero-argument function (a thunk), and ends up jumping here to the \"scheduler\". This effectively throws away the context of the program as far as the runtime is concerned. We&rsquo;ll see why we do this soon.</p>\n\n<p><span class=\"RktSym\">go</span> is set to a continuation that saves its argument to <span class=\"RktSym\">thnk</span>, runs it, stores the result in <span class=\"RktSym\">v</span>, pops the next saved continuation off the stack, and calls it with the result of the thunk. We&rsquo;ll see who pushes continuations to the stack soon.</p>\n\n<p>Normally, we&rsquo;d just put the body of <span class=\"RktSym\">top*</span> at the beginning of the program. But since we&rsquo;re going to be running code in a repl, which delimits our continuations, we need to wrap our expressions with <span class=\"RktSym\">top</span> to establish the context of the scheduler every time. Pretend that instead of <span class=\"RktPn\">(</span><span class=\"RktSym\">program-thunk</span><span class=\"RktPn\">)</span>, we just had the entire rest of the program right there.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">reset*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">go</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">reset*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>In <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>, we push the current continuation onto <span class=\"RktSym\">pstack</span> and jump to the scheduler with the body as a thunk. Remember, the scheduler runs the body, saves the result, pops a continuation off the stack, and calls that continuation with the result. Pushing a continuation onto the stack before jumping to the scheduler ends up causing the scheduler to jump back to that continuation with the result of running the thunk.</p>\n\n<p>Let&rsquo;s think about a simple example, <span class=\"RktPn\">(</span><span class=\"RktSym\">top</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span>. When we reach the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>, the current continuation wraps its argument in a list and exits. We push this continuation onto the stack and jump to the scheduler with the thunk <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span>. This sets <span class=\"RktSym\">v</span> to <span class=\"RktVal\">1</span>, pops that continuation from the stack, and then calls it with <span class=\"RktVal\">1</span>, resulting in exiting with <span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"RktVal\">)</span>. So if there&rsquo;s no funny business in the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>, it&rsquo;s like it&rsquo;s not even there.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>In <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span>, we grab the current continuation <span class=\"RktSym\">k</span>. But we don&rsquo;t supply it to <span class=\"RktSym\">f</span> directly. Instead, we give <span class=\"RktSym\">f</span> a wrapped function that grabs <span class=\"RktSym\">cont</span>, the current continuation at the time of applying <span class=\"RktSym\">k</span>, and push that onto the stack before jumping to <span class=\"RktSym\">k</span>. Since the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> ends up at the scheduler, <span class=\"RktSym\">k</span> does too. <span class=\"RktSym\">k</span> runs the body of the reset with the argument passed to it replacing the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span>, but then since we pushed <span class=\"RktSym\">cont</span> onto the stack, we return to the body of the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span> instead of the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>! Don&rsquo;t worry if that doesn&rsquo;t fully make sense yet. We&rsquo;ll go step by step through an example in a moment.</p>\n\n<p>By the way, the reason we&rsquo;re doing <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span> instead of <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> for now because <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> is basically <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span> with an abort. <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span> keeps it simple and minimizes the numer of things we have to keep in our head at once.</p>\n\n<p>Now let&rsquo;s step through that example from the code.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">top</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(11)</span></p></td></tr></tbody></table></div>\n\n<p>But before we talk about how it works under our implementation, let&rsquo;s make sure we understand how it works in regular Racket. The continuation <span class=\"RktSym\">k</span> should essentially be the function <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span> since that&rsquo;s the only thing between the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span>. I wrapped the whole <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> in a <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span> to make sure that we&rsquo;re only capturing up to the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>. When we do <span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span>, we should get back 2. Then, we multiply that by 5, getting 10, and return that from the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span>, which adds 1 to it and wraps it in a list.</p>\n\n<p>Now how does our implementation work? I&rsquo;ll put the code here again so we can follow it:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">go</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">top*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">program-thunk</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">thnk</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">go</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._when%29%29\">when</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">thnk</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">next-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._first%29%29\">first</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._rest%29%29\">rest</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">next-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">program-thunk</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">top</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">top*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">reset*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">go</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">reset*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pstack</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">top</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(11)</span></p></td></tr></tbody></table></div>\n\n<p>First, we establish the scheduler with <span class=\"RktSym\">top</span>. Next, we call <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span>, so when <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> is called, the current continuation wraps its argument in a list and exits. <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> pushes this continuation onto the stack and it&rsquo;s the only continuation in it for now. Then, it jumps to the scheduler, discarding the context. At this point, we&rsquo;re at that <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._when%29%29\">when</a></span><span class=\"stt\"> </span><span class=\"RktSym\">thnk</span><span class=\"stt\"> </span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span> expression in <span class=\"RktSym\">top*</span>. Then, we call the thunk, which is the body of the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>.</p>\n\n<p>The first thing it does is call <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span>. Inside the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span>, the current continuation, which we&rsquo;ll get as <span class=\"RktSym\">k</span> in a moment, adds <span class=\"RktVal\">1</span> to its argument, sets that to <span class=\"RktSym\">v</span> in the scheduler, pops a continuation off the stack, and calls it with <span class=\"RktSym\">v</span>. We call <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span>, which gives us access to this continuation, but with a wrapper that pushes the current continuation <span class=\"RktSym\">cont</span> at the time of calling <span class=\"RktSym\">k</span> onto the stack. What happens when we call <span class=\"RktSym\">k</span>?</p>\n\n<p>We push the current continuation <span class=\"RktSym\">cont</span> onto the stack and call <span class=\"RktSym\">k</span> with <span class=\"RktVal\">1</span>. What does <span class=\"RktSym\">k</span> do? It adds <span class=\"RktVal\">1</span>, sets that to <span class=\"RktSym\">v</span> in the scheduler, pops <span class=\"RktSym\">cont</span> off the stack, and calls it with the result. Now, we&rsquo;re back in the body of the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span>! And we resumed with <span class=\"RktVal\">2</span>, which was the result of calling <span class=\"RktSym\">k</span>. This is exactly what we want! Then, we just multiply that <span class=\"RktVal\">2</span> by <span class=\"RktVal\">5</span> and return to the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> body, which adds <span class=\"RktVal\">1</span>, giving us <span class=\"RktVal\">11</span>.</p>\n\n<p>Then, we return from the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>, which returns to the scheduler, which pops a continuation off the stack. What continuation is on the stack? Remember, we originally pushed the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>&rsquo;s continuation onto the stack, then pushed <span class=\"RktSym\">cont</span> onto the stack, then popped it to jump back to the call site of <span class=\"RktSym\">k</span>. At this point, the next continuation is the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>&rsquo;s, so we call it with the result of running the body of the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>, <span class=\"RktVal\">11</span>, which wraps that result in a list and exits. And we&rsquo;re done!</p>\n\n<p>The big idea is that <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> saves the current continuation and jumps to the scheduler, telling it to run the body. Since the body runs in the scheduler&rsquo;s context, continuations captured in the body will capture the end of the scheduler, which pops the next continuation off the stack and calls it, which jumps. This is how we avoid capturing the whole rest of the program, which includes the exit. By mutating the stack of continuations, we can control where we&rsquo;ll end up next time we return to the scheduler.</p>\n\n<p>Before we call a composable continuation <span class=\"RktSym\">k</span>, we push the current continuation <span class=\"RktSym\">cont</span> onto the stack. That way, we&rsquo;ll run <span class=\"RktSym\">k</span>, which will end at the scheduler, which will pop and resume at <span class=\"RktSym\">cont</span> with the result of running the rest of the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> body with the argument we suppled to <span class=\"RktSym\">k</span>. Pushing the current continuation onto the stack causes control to return to this point when we hit the end of the scheduler. That&rsquo;s how we \"trick\" non-composable continuations into \"returning a value\". It&rsquo;s really just two jumps with some weird stuff in between, but as far as the user&rsquo;s concerned, it just looks like the continuation returned a value!</p>\n\n<p>This is all very subtle and hard to follow. There are a lot of nonlocal jumps and there is mutation happening while we&rsquo;re jumping all over the place. I encourage you to run through some more examples in your head and play around until you&rsquo;re comfortable. This is very tricky stuff.</p>\n\n<p>Now, let&rsquo;s implement <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>. Like I said before, <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> is basically <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span> with an abort. Once we understand how <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span> work, <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> isn&rsquo;t too much of a leap:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">go</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>It&rsquo;s the same as <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span>, but we wrap the body in a <span class=\"RktSym\">go</span>, which jumps to the scheduler. Unlike <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>, we don&rsquo;t save the continuation before we jump. This has the effect of using whatever happens to be on the top of the stack, which is usually the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>&rsquo;s continuation.</p>\n\n<p>For example, let&rsquo;s run through</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">top</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(0)</span></p></td></tr></tbody></table></div>\n\n<p>We establish the scheduler and push the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>&rsquo;s continuation onto the stack, which wraps its argument in a list and exits. When we end up at the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>, we jump to the scheduler with a thunk that returns <span class=\"RktVal\">0</span>. So we end up passing <span class=\"RktVal\">0</span> to that continuation, resulting in <span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">0</span><span class=\"RktVal\">)</span>. When we jumped to the scheduler from the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>, we discarded the context that included the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span>. The only thing that remembered that context was <span class=\"RktSym\">k</span>, which we ignored.</p>\n\n<p>So <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> ends up replacing the entire <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> with the result of the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>&rsquo;s body. And it&rsquo;s no different if we call <span class=\"RktSym\">k</span> in the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>. <span class=\"RktSym\">k</span> is basically a function as far as the user is concerned. It just happens to run the body of the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> that we aborted from.</p>\n\n<p>And there we have it! Using undelimited, non-composable continuations, we implemented delimited and composable continuations.</p>\n\n<p>Now what about <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span> and parameters?</p>\n\n<h1>2\n <tt>&nbsp;</tt><a name=\"(part._.Dynamic_.Wind)\"></a>Dynamic Wind</h1>\n\n<p>Let&rsquo;s say you&rsquo;re working with files. You have the functions <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/creatingunits.html#%28form._%28%28lib._racket%2Funit..rkt%29._open%29%29\">open</a></span><span class=\"stt\"> </span><span class=\"RktSym\">path</span><span class=\"RktPn\">)</span> which opens a file at the path and returns a value representing the file, and <span class=\"RktPn\">(</span><span class=\"RktSym\">close</span><span class=\"stt\"> </span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._file%29%29\">file</a></span><span class=\"RktPn\">)</span> which closes the file. We&rsquo;re well-behaved programmers, so we will make sure that we always close our files when we&rsquo;re done with them.</p>\n\n<p>To make sure we never forget, let&rsquo;s make an abstraction that closes the file for us when we&rsquo;re done:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-file</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">path</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._file%29%29\">file</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/creatingunits.html#%28form._%28%28lib._racket%2Funit..rkt%29._open%29%29\">open</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">path</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">body</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">close</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">path</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>Very nice. But what if we do this?</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._abort%29%29\">abort</a></span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-file</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">path</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._abort%29%29\">abort</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>We leave the body of <span class=\"RktSym\">with-file</span> without closing it!</p>\n\n<p>Alright, that&rsquo;s unfortunate, but it&rsquo;s not a huge deal. When the process ends, the operating system cleans up after us anyway.</p>\n\n<p>But here is another example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">with-file</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">path</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">42</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>If we use saved-k to re-enter the body of <span class=\"RktSym\">with-file</span>, at this point, the file is already closed! This would cause the body to fail. This would be a problem even if the continuation was composable.</p>\n\n<p>In general, there are a lot of situations where you want to run code under some context that includes setup and cleanup, and continuations don&rsquo;t play nice with that since they cause us to jump all over the place. What we want is an operation that allows us to run some body of code where every time we enter the body, we run some setup, and every time we leave the body, we run some cleanup, regardless of whether we naturally enter/exit or if it was because of a continuation jumping in or out. This operation is called <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span>.</p>\n\n<p>Let&rsquo;s look at some examples:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._abort%29%29\">abort</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"setup\"</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._abort%29%29\">abort</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">42</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"cleanup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktOut\">setup</span></p></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">42</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._abort%29%29\">abort</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"setup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._abort%29%29\">abort</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">42</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"cleanup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">setup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">cleanup</span></p></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">42</span></p></td></tr></tbody></table></div>\n\n<p>Without <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span>, the cleanup doesn&rsquo;t run when we abort. Let&rsquo;s look at another example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"setup\"</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"cleanup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">setup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">cleanup</span></p></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">42</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktOut\">cleanup</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"setup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"cleanup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">setup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">cleanup</span></p></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">42</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">setup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">cleanup</span></p></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">42</span></p></td></tr></tbody></table></div>\n\n<p>Without <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span>, we don&rsquo;t get the setup when we re-enter.</p>\n\n<p>Alright, how do we implement this thing?</p>\n\n<p>When I was trying to learn how to implement it, the first implementation I found kept track of the thunks that were pending execution. We keep track of a stack of pairs of thunks. Each pair has a setup and a cleanup thunk. We maintain the invariant that a pair is in the stack if and only if the setup has been run and the cleanup hasn&rsquo;t yet been run in the current dynamic context.</p>\n\n<p>When we call a continuation, we are jumping from one dynamic context to another. When we create a continuation, we remember the continuation&rsquo;s dynamic context by associating it with the current value of the stack of thunk pairs at the time of creation. When we call a continuation, we compare the current value of the stack with the continuation&rsquo;s and run the thunks as appropriate. But as we go, we have to carefully and incrementally change the value of the stack to maintain the invariant. And we also have to be careful about which thunks to run and the order that we run them.</p>\n\n<p>This implementation is very hard to understand and reason about. There is a lot of intricate book-keeping, there is global mutable state, and we&rsquo;re jumping all over the place because of <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span>.</p>\n\n<p>This implementation works fine with <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span>, but it was very difficult to try to generalize it to delimited continuations. To learn more about this strategy and see my failed attempt to generalize it to delimited continuations, you can look at <a href=\"https://github.com/quasarbright/learn-racket/blob/0c24b442b5e2b638b3c62e57445e08f4296ee9a4/callcc-to-everything-direct.rkt\">my implementation</a>.</p>\n\n<p>As usual, all roads lead back to Oleg Kiselyov. His post <a href=\"https://okmij.org/ftp/continuations/implementations.html#dynamic-wind\">Delimited continuations do dynamic-wind</a> has an implementation in terms of delimited continuations. This implementation is much simpler and doesn&rsquo;t need to be generalized to delimited continuations! This is the implementation we&rsquo;ll discuss in this post. I only bothered mentioning the other implementation because it&rsquo;s the original and it&rsquo;s the first thing you&rsquo;ll find if you&rsquo;re looking around.</p>\n\n<p>Before we get coding, I want to clarify that this implementation of <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span> has nothing to do with the code we&rsquo;ve just been writing for implementing delimited continuations. We&rsquo;re going to start out with Racket&rsquo;s built-in <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> operators, not the ones we made. We&rsquo;ll connect everything at the end.</p>\n\n<p>Now let&rsquo;s start coding:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">racket/control</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">yield-record</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield-record</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>We define a new operator called <span class=\"RktSym\">yield</span>, which shifts a record containing the value\nyielded and the continuation of the yield. Yield is sort of like an exception we can resume from. The expectation is that we are in the context of some handler that will decide what to do with the yield record.</p>\n\n<p>For example, we can use <span class=\"RktSym\">yield</span> to implement generators:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">for-generator</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">generator-thunk</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">loop-body</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">res</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">generator-thunk</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">res</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield-record</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">loop-body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29\">void</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29\">void</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">for-generator</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">1</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">2</span></p></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>Here, <span class=\"RktSym\">for-generator</span> is the \"handler\" for <span class=\"RktSym\">yield</span>. We run the generator body in a <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and look at the result. If we yielded from the body, the result would be a yield record. In that case, we run the <span class=\"RktSym\">loop-body</span> with the yielded value and recur, resuming the body. If the body ended on its own, we&rsquo;d reach the other branch, in which case we&rsquo;d return void and stop recurring.</p>\n\n<p>How should <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span> interact with <span class=\"RktSym\">yield</span>? If we yield from inside of a <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span>, then we should run the cleanup since we&rsquo;re leaving the body. And when we resume from the yield, we should run the setup. And the yield should go right through the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span> to the handler outside of it. For example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">for-generator</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"setup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"cleanup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>We should print <span class=\"RktSym\">setup</span><span class=\"stt\"> </span><span class=\"RktSym\">cleanup</span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"stt\"> </span><span class=\"RktSym\">setup</span><span class=\"stt\"> </span><span class=\"RktSym\">cleanup</span><span class=\"stt\"> </span><span class=\"RktVal\">2</span>. First, we naturally run the setup on the way in. Then The yield exits the generator body, hence the first cleanup. In the handler, we print the yielded value, <span class=\"RktVal\">1</span>. Then, we resume, which re-enters the body, hence the second setup. Next, we naturally run the cleanup on the way out. Finally, the next yield just results in <span class=\"RktVal\">2</span> getting printed with no <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span> business.</p>\n\n<p>Now, we&rsquo;re ready to implement <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">setup-thunk</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28form._%28%28lib._racket%2Ffunction..rkt%29._thunk%29%29\">thunk</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cleanup-thunk</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">th</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28form._%28%28lib._racket%2Ffunction..rkt%29._thunk%29%29\">thunk</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">setup-thunk</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">res</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">th</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cleanup-thunk</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">res</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield-record</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">reenter</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">reenter</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">r</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">r</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">for-generator</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"setup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"cleanup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">setup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">cleanup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">1</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">setup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">cleanup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">2</span></p></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>The structure is similar to the generator. <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span> is a handler for yields. We initialize our recursive loop with a <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28form._%28%28lib._racket%2Ffunction..rkt%29._thunk%29%29\">thunk</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span>, but we don&rsquo;t run it right away because we haven&rsquo;t run the setup yet. Instead, we wrap it in a thunk and call it <span class=\"RktSym\">th</span> so we can run it later. Next, we run <span class=\"RktSym\">setup-thunk</span>. Only after that do we run <span class=\"RktSym\">th</span>, which runs the main thunk. Then we run the cleanup thunk, regardless of whether we finished naturally or yielded. This is because in either case, we want to run the cleanup.</p>\n\n<p>Like in the generator, if we get a yield record, that means we yielded out of the main thunk. Since we want yields to go right through the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span> on the way out, we re-yield <span class=\"RktSym\">v</span> to let the outer handler handle it. It&rsquo;s like re-throwing an exception. But we also need the yield to go right through on the way back in, so we save the value that the outer handler resumes with to <span class=\"RktSym\">reenter</span> and we resume the body by calling <span class=\"RktSym\">k</span> with that value. But we don&rsquo;t resume right away. We do it in a thunk that we recur on so we end up calling the setup before we re-enter the body. And since this is in a loop, the whole thing happens for future yields until the body finishes, in which case we return the value of the body.</p>\n\n<p>This is very nice, but we don&rsquo;t want to use <span class=\"RktSym\">yield</span>. We want <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>! Luckily, we can implement <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> in terms of <span class=\"RktSym\">yield</span> such that they play nice with <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span>. But we also use <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> in our implementation of <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span>. To avoid confusion, let&rsquo;s make it clear whether we&rsquo;re using the built-in operators or our operators that we&rsquo;re making. We can do this with a qualified import:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._prefix-in%29%29\">prefix-in</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">racket:</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">racket/control</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._prefix-in%29%29\">prefix-in</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">racket:</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">racket</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">racket:shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield-record</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">setup-thunk</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28form._%28%28lib._racket%2Ffunction..rkt%29._thunk%29%29\">thunk</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cleanup-thunk</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">th</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">racket:reset</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28form._%28%28lib._racket%2Ffunction..rkt%29._thunk%29%29\">thunk</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">setup-thunk</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">res</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">th</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cleanup-thunk</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">res</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield-record</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">reenter</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">reenter</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">r</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">r</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>To start, let&rsquo;s think about how <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> should interact with <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span>. For example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">racket:reset</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">racket:dynamic-wind</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"setup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">racket:shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"after the shift\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"cleanup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">setup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">cleanup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">setup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">after the shift</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">cleanup</span></p></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>Remember, <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> aborts to the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>. That&rsquo;s why we get the first cleanup. And when we call the continuation inside the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>, we re-enter the body, which is why we get the second setup. After we re-enter, we print <span class=\"RktVal\">\"after the shift\"</span>. Although the <span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span> is lexically inside of the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span>, it executes from outside of its dynamic extent because the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> aborts before we run it. Next, we exit naturally, which runs the cleanup.</p>\n\n<p>Let&rsquo;s look at another example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">racket:reset</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">racket:dynamic-wind</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"setup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">racket:shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"after the shift\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"cleanup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">setup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">cleanup</span></p></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">setup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">after the shift</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">cleanup</span></p></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>The first setup comes naturally. The first cleanup is from the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> aborting. When we call <span class=\"RktSym\">saved-k</span>, we get a setup from re-entering the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span>, we print <span class=\"RktVal\">\"after the shift\"</span>, and we exit naturally, running the cleanup. It&rsquo;s really the same thing as last example, but instead of immediately resuming, we do it in the next repl prompt. But it&rsquo;s interesting that the continuation \"remembers\" the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span>.</p>\n\n<p>Alright, how do we implement this? Let&rsquo;s try using the built-in <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> and see what happens:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">racket:reset</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"setup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">racket:shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"after the shift\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"cleanup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">setup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">after the shift</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">cleanup</span></p></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>Notice that we used our <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span>, but racket&rsquo;s <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>. We&rsquo;re missing the inner setup and cleanup! We only get the natural ones, not the ones from jumping out and in. This is because the shift aborts right past the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span> to the reset, which means jumping past the code that runs the cleanup. And we resume right at the point of the shift instead of getting stopped going back through the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span>, skipping the setup on re-entry.</p>\n\n<p><span class=\"RktSym\">yield</span> is the only thing that plays nice with <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span>, so we&rsquo;ll implement <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> using it:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">shift-record</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">f</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift-record</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>Similar to how we made <span class=\"RktSym\">yield</span> in terms of <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>, we make a struct representing the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> operation and <span class=\"RktSym\">yield</span> that struct.</p>\n\n<p>If we&rsquo;re yielding, we&rsquo;ll need a handler. Where should the shift get handled? Well, shift aborts out the reset, so it&rsquo;s the perfect place to handle it! This means that shifts without a reset will just abort the program with a shift record, but that&rsquo;s not a big deal. Theoretically, we could wrap the entire program in a reset and everything would work fine.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">reset*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">racket:reset</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield-record</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift-record</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"unhandled yield from user reset\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">r</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">r</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">reset*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"setup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"after the shift\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"cleanup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">setup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">cleanup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">setup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">after the shift</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">cleanup</span></p></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>Like all the yield handlers we&rsquo;ve written, we run the body in a <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>. But we use the real Racket version, not the one we&rsquo;re making. We inherit the delimiting behavior from the real version and add the yield handling on top of it. Anyway, if the body yields a shift record, we run the shift body with <span class=\"RktSym\">k</span>, but wrapped in a <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>. And this is our <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>, not the built-in, real version. This recursive call is just like the looping that we used in our other handlers, but instead of a let loop, we just do a recursive call directly because it&rsquo;s easier.</p>\n\n<p>If something other than a shift record got yielded, we error. We do this because users aren&rsquo;t going to be using <span class=\"RktSym\">yield</span>, only <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>, which yield shift records. So we assume that any other kind of yield is from a mistake in our implementation.</p>\n\n<p>You might be wondering why we bothered going through yield at all. If we want shift, why not just implement <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span> in terms of shift instead of yield?</p>\n\n<p>You could try to do that, but it&rsquo;s much more straightforward with yield. With yield, the handler is what drives the control flow. After all, yield doesn&rsquo;t give the caller access to a continuation! Only the handler gets access. And <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span> is essentially a handler, so it fits in perfectly. The flow of the yield nicely captures the essence of jumping out of and into a dynamic extent.</p>\n\n<p>With <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>, the body drives the control flow, and there is no handler, which makes it harder to detect and handle exit and re-entry. We&rsquo;d have to manipulate the body and the continuation or something. It&rsquo;d be much trickier to figure out.</p>\n\n<p>Now that we have <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>, let&rsquo;s implement <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span> and <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span> is nothing surprising. It&rsquo;s just <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>, but we resume with the result of the body.</p>\n\n<p><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span> is a little weirder. It&rsquo;s similar, but we wrap the continuation such that it shifts when you call it. This gives us the aborting behavior.</p>\n\n<p>This is how you would normally implement these two operators in terms of <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>. However, this implementation doesn&rsquo;t play nice with <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">racket:reset</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">racket:dynamic-wind</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"setup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">racket:let/cc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"cleanup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">setup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">cleanup</span></p></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"setup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"cleanup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">setup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">cleanup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">setup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">cleanup</span></p></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr></tbody></table></div>\n\n<p>In our implementation, it looks like <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span> leaves the dynamic extent for some reason. This is because we use <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>! Even though we&rsquo;re resuming right away, we&rsquo;re still going out of and into the body.</p>\n\n<p>We can fix this with a little hack. We&rsquo;ll add a tag to some yields that tells <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span> to let it pass right on through without triggering cleanup and setup, trusting that the handler will resume right away. This will allow us to pretend like we never left.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">yield-record/passthrough</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">yield-record</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield/passthrough</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">racket:shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield-record/passthrough</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">setup-thunk</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28form._%28%28lib._racket%2Ffunction..rkt%29._thunk%29%29\">thunk</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cleanup-thunk</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">skip?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">th</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">racket:reset</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28form._%28%28lib._racket%2Ffunction..rkt%29._thunk%29%29\">thunk</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">skip?</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">skip?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">setup-thunk</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">res</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">th</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._when%29%29\">when</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield-record/passthrough?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">res</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">skip?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#t</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._unless%29%29\">unless</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">skip?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cleanup-thunk</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">res</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield-record</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">reenter</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">reenter</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">r</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">r</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>We made a sub-struct of <span class=\"RktSym\">yield-record</span> that we check for in <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span>. If the yield record is an instance of this struct, we skip the cleanup and setup. There&rsquo;s a little bit of book-keeping here, but it&rsquo;s not too crazy. The only weird part is that when the continuation resumes for the first time, we need to avoid triggering the setup, but if we use the continuation from outside later like what we usually do with <span class=\"RktSym\">saved-k</span>, we need it to trigger the setup. This all gets handled by the <span class=\"RktSym\">skip?</span> flag since it is only ever true on that first shift that should pass through.</p>\n\n<p>Anyway, let&rsquo;s rewrite <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span> and <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span> to use these operators:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift/passthrough*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield/passthrough</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift-record</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift/passthrough</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift/passthrough*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift/passthrough</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift/passthrough</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">racket:reset</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">racket:dynamic-wind</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"setup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">racket:let/cc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"cleanup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">setup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">cleanup</span></p></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"setup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._let%2Fcc%29%29\">let/cc</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"cleanup\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">setup</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">cleanup</span></p></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr></tbody></table></div>\n\n<p>Nice!</p>\n\n<h2>2.1\n <tt>&nbsp;</tt><a name=\"(part._.Parameters)\"></a>Parameters</h2>\n\n<p>One very useful feature you can create with <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span> is parameters, which implement dynamic binding.</p>\n\n<p>For example, let&rsquo;s say you want to run some function that prints stuff, but instead of it printing to standard out, you want to redirect its output to a file. One way to do this is to have it take in an output port and make it use the one passed to it instead of hard-coding standard out. But then you&rsquo;d have to pass this output port around everywhere. And what if the function is part of some library and you can&rsquo;t re-write it? Do we expect all libraries that might print stuff to take in output ports everywhere?</p>\n\n<p>Well, a very hacky solution would be to have a global, mutable variable for the current output port, and expect everyone to follow a convention of using that global mutable variable. If we want to redirect some output, we could <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span> the variable to something else, run the code, and then <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span> it back to its old value. Sounds like a job for <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span>!</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">redirect-output</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">new-output-port-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">old-output-port</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/port-ops.html#%28def._%28%28quote._~23~25kernel%29._current-output-port%29%29\">current-output-port</a></span><span class=\"RktPn\">]</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">new-output-port</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">new-output-port-expr</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/port-ops.html#%28def._%28%28quote._~23~25kernel%29._current-output-port%29%29\">current-output-port</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">new-output-port</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">lamdba</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">new-output-port</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/port-ops.html#%28def._%28%28quote._~23~25kernel%29._current-output-port%29%29\">current-output-port</a></span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/port-ops.html#%28def._%28%28quote._~23~25kernel%29._current-output-port%29%29\">current-output-port</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">old-output-port</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>The body can freely use and mutate <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/port-ops.html#%28def._%28%28quote._~23~25kernel%29._current-output-port%29%29\">current-output-port</a></span>, and any code outside of the body doesn&rsquo;t see the effects of this mutation. We do <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"stt\"> </span><span class=\"RktSym\">new-output-port</span><span class=\"stt\"> </span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/port-ops.html#%28def._%28%28quote._~23~25kernel%29._current-output-port%29%29\">current-output-port</a></span><span class=\"RktPn\">)</span> in case the body locally mutates the current output port, jumps out, and then jumps back in. When the body resumes, we want the variable to be exactly how it was before. This is called dynamic binding because the scope of the variable is the dynamic extent of the body, nothing to do with lexical scope. Nice! This is starting to sound less like some gross hack and more like a reasonable feature.</p>\n\n<p>To avoid confusion between dynamically scoped variables and regular old lexically scoped variables, we&rsquo;ll make a special abstraction called parameters:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/parameters.html#%28def._%28%28quote._~23~25kernel%29._make-parameter%29%29\">make-parameter</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">default-value</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">current-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">default-value</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28quote._~23~25kernel%29._case-lambda%29%29\">case-lambda</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">current-value</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">new-value</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">current-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">new-value</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parameterize-rt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">new-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">old-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">current-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">new-value</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">current-value</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">thnk</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">current-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">old-value</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define-syntax%29%29\">define-syntax</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/parameters.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._parameterize%29%29\">parameterize</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._syntax-rules%29%29\">syntax-rules</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/parameters.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._parameterize%29%29\">parameterize</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/parameters.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._parameterize%29%29\">parameterize</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">new-value</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pair</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parameterize-rt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">new-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/parameters.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._parameterize%29%29\">parameterize</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">pair</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">current-favorite-number</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/parameters.html#%28def._%28%28quote._~23~25kernel%29._make-parameter%29%29\">make-parameter</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">24</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">current-favorite-number</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">24</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">current-favorite-number</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">25</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">current-favorite-number</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">25</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/parameters.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._parameterize%29%29\">parameterize</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">current-favorite-number</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">12</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">current-favorite-number</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">12</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">current-favorite-number</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">25</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/parameters.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._parameterize%29%29\">parameterize</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">current-favorite-number</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">current-favorite-number</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">current-favorite-number</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">25</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29\">void</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">6</span></p></td></tr></tbody></table></div>\n\n<p>Parameters are very useful. They are a powerful mechanism for allowing code to be dynamically configured without having to pass a configuration around everywhere.</p>\n\n<h1>3\n <tt>&nbsp;</tt><a name=\"(part._.Putting_it_.All_.Together)\"></a>Putting it All Together</h1>\n\n<p>At the beginning of this post, I told you that we could get all of this from just <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span>, but we implemented <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span> in terms of <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>. Well, remember how we implemented <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> in terms of <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span>? That&rsquo;s right, if we start out with just <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span>, we can implement <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> on top of that, implement <span class=\"RktSym\">yield</span> and <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span> in terms of that <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>, and then implement <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>, <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>, <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span>, and <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span> that play nice with <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span> in terms of <span class=\"RktSym\">yield</span>. If you want to see it all put together in one module, <a href=\"https://github.com/quasarbright/learn-racket/blob/0206b16e7735b5148bae684e9d3be6c3916e08f6/callcc-to-everything-yield.rkt\">here it is</a>. I&rsquo;m not going to go through writing it here because there is nothing interesting and new. It&rsquo;s just some layering and connecting pieces together in the obvious way.</p>\n\n<h1>4\n <tt>&nbsp;</tt><a name=\"(part._.Conclusion)\"></a>Conclusion</h1>\n\n<p>From just the humble, confusing <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span>, we implemented all our favorite control operators and even added <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._dynamic-wind%29%29\">dynamic-wind</a></span> to be able to set up and clean up context in the face of continuations. This is by no means the best way to implement these operators, it&rsquo;s just what I found to be the easiest to understand. But if you&rsquo;re stranded on an island with just duct tape and <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span>, you aren&rsquo;t going to be stuck with nasty, undelimited, non-composable continuations!</p>")) ((? . 2) f post (u . "Guess-Free Minesweeper") (? . 2) 1744126109 (p+ #"/home/runner/work/blog/blog/repo/2024/04/guess-free-minesweeper.html" . unix) (u . "/blog/2024/04/guess-free-minesweeper.html") (u . "2024-04-01T20:29:50") (? . 8) (? . 4) (c (u . "projects") c (u . "game") c (u . "artificial-intelligence") c (u . "math")) (u . "\n<p>Have you ever played Minesweeper? If you have, you&rsquo;ve probably run into a situation where you&rsquo;re forced to guess, hoping you&rsquo;re not about to step on a mine and lose the game. What if I told you it was possible to make it so you never have to guess in a game of minesweeper?</p>\n\n<p>In this post, I&rsquo;ll explain how I made a minesweeper solver and how I used the solver to generate guess-free minefields.</p>") #t (u . "\n<p>Have you ever played Minesweeper? If you have, you&rsquo;ve probably run into a situation where you&rsquo;re forced to guess, hoping you&rsquo;re not about to step on a mine and lose the game. What if I told you it was possible to make it so you never have to guess in a game of minesweeper?</p>\n\n<p>In this post, I&rsquo;ll explain how I made a minesweeper solver and how I used the solver to generate guess-free minefields.</p>\n<!--more-->\n\n<p>For those unfamiliar, minesweeper is a deduction puzzle game. You play on a 2D grid of cells. Each cell may or may not have a mine in it. If you uncover a cell with a mine, you lose. If you uncover a cell with no mine, you can see how many neighboring cells have mines in them. As you uncover more cells, you gain more information about which cells may have mines. If you uncover all non-mine cells, you win and your friends can safely walk through the minefield!</p>\n\n<p>If you know a cell has a mine under it, you can flag it to keep track of mines and make sure you don&rsquo;t accidentally uncover a cell that you knew was a mine.</p>\n\n<p>At the beginning of the game, one of the cells has a green \"X\". That cell is guaranteed to be mine-free so you can start the game without immediately losing. I call it the hint cell.</p>\n\n<p>The best way to get an understanding of the game is to play it yourself. One popular site is <a href=\"https://minesweeper.online/\">https://minesweeper.online/</a>. You can also play my less pretty version: <a href=\"https://quasarbright.github.io/minesweeper/\">https://quasarbright.github.io/minesweeper/</a>. On both, you can click a cell to uncover it and right-click a cell to flag it.</p>\n\n<p>If you play for a while, you&rsquo;ll start to develop these rules for quickly deducing whether to clear or flag a cell. For example, consider this scenario:</p>\n\n<p><img src=\"/blog/img/posts/2024-04-01-minesweeper/obvious-mine.png\" alt=\"flaggable-1\" class=\"Minesweeper\" height=\"240\" width=\"246\" /></p>\n\n<p>The 1 cell tells you there&rsquo;s a mine in the center cell because there&rsquo;s 1 mine neighboring it and only 1 cell that we haven&rsquo;t uncovered. So that&rsquo;s the only place where the mine can be. Here is another, similar sitiation:</p>\n\n<p><img src=\"/blog/img/posts/2024-04-01-minesweeper/flaggable-2.png\" alt=\"flaggable-2\" class=\"Minesweeper\" height=\"430\" width=\"442\" /></p>\n\n<p>The 2 cell tells you that there are mines in both the cells. In general, if you have an uncovered N cell with exactly N hidden neighbors, they must all be mines.</p>\n\n<p>Conversely, if you have an uncovered N cell with N flagged cells around it, you can uncover the remaining neighboring cells. For example:</p>\n\n<p><img src=\"/blog/img/posts/2024-04-01-minesweeper/satisfied-3.png\" alt=\"satisfied-3\" class=\"Minesweeper\" height=\"436\" width=\"440\" /></p>\n\n<p>Assuming your flags are correct, you can safely uncover the un-flagged neighbors of the 3 cell. I call the 3 cell \"satisfied\" in this situation.</p>\n\n<p>There are also some less obvious rules you can apply. Here is what I call the 1-1 rule:</p>\n\n<p><img src=\"/blog/img/posts/2024-04-01-minesweeper/1-1.png\" alt=\"1-1\" class=\"Minesweeper\" height=\"284\" width=\"434\" /></p>\n\n<p>From the leftmost 1 cell, you know there is one mine in either the first or second cell. The next 1 cell is like a superset of the leftmost one since it has the third neighbor as well as the first and second. It says there is 1 mine in either the first, second, or third cell. But we already know that the mine is in either the first or the second, so it can&rsquo;t be in the third! This means we can clear the third cell.</p>\n\n<p>Here is a similar situation:</p>\n\n<p><img src=\"/blog/img/posts/2024-04-01-minesweeper/deep-1-1.png\" alt=\"deep-1-1\" class=\"Minesweeper\" height=\"402\" width=\"406\" /></p>\n\n<p>Ignoring the corner 1-cells, from the top middle 1 cell, we know that either the middle left or middle right cells is a mine. This makes the center 1 cell redundant since its neighbors are a superset of the the top-middle 1 cell&rsquo;s neighbors. Since the center 1 cell&rsquo;s mine is either in the cell to its left or its right, it&rsquo;s not in the 3 neighbor cells below it, so we can clear those.</p>\n\n<p>In general, if a number cell&rsquo;s hidden neighbors are a superset of another&rsquo;s you can \"subtract\" the other cell&rsquo;s information from the superset&rsquo;s. We&rsquo;ll make this more concrete later.</p>\n\n<p>Another rule I use is what I call the 1-2 rule. Here is an example:</p>\n\n<p><img src=\"/blog/img/posts/2024-04-01-minesweeper/1-2.png\" alt=\"1-2\" class=\"Minesweeper\" height=\"286\" width=\"436\" /></p>\n\n<p>Let&rsquo;s focus on the 1 and 2 cells. For a 2-cell with 3 hidden neighbors, we know that only one of those cells is mine-free. But its neighbors overlap in two places with the 1 cell&rsquo;s, and the 1-cell only has 1 mine, so the rest of its neighbors are mine-free. This means at least one of the overlapping cells must be mine-free, so the rightmost neighbor (which isn&rsquo;t one of the 1 cell&rsquo;s neighbors) must be a mine.</p>\n\n<p>There is a way to generalize this rule too, but we don&rsquo;t have the language to nicely describe it yet.</p>\n\n<p>One more thing we can take advantage of is the total remaining mine count. The game tells you how many mines are left, so you can use this information to eliminate certain possibilities. For example:</p>\n\n<p><img src=\"/blog/img/posts/2024-04-01-minesweeper/need-total.png\" alt=\"need-total\" class=\"Minesweeper\" height=\"332\" width=\"336\" /></p>\n\n<p>You know there is exactly one mine among the top cells and one among the left cells. There are two possibilities: One mine in the top left, or a mine in the top-right and another in the bottom-left. And we don&rsquo;t know anything about the bottom-right. But if I told you that there is only 1 mine remaining in the whole minefield, it&rsquo;d be impossible for there to be a mine in the top-right and bottom-left, so the mine must be in the top-left. And there must also not be a mine in the bottom-right!</p>\n\n<p>With just these simple rules, you can get surprisingly far. You hardly ever need anything more.</p>\n\n<p>If you&rsquo;ve played a lot of minesweeper, you&rsquo;ve probably developed a few rules like these and used them so many times that they&rsquo;re like muscle memory, so automatic that you feel like a robot could do it. Hey, wait a minute!</p>\n\n<p>Let&rsquo;s make a solver using these rules. We&rsquo;ll use something that I call \"count-sets\" to represent the information we can observe and deduce from looking at the minefield. A count-set stores a set of hidden cells and the exact number of mines among them. For example,</p>\n\n<p><img src=\"/blog/img/posts/2024-04-01-minesweeper/count-set.png\" alt=\"count-set\" class=\"Minesweeper\" height=\"284\" width=\"420\" /></p>\n\n<p>The 1-cell would give us a count-set with cells A,B and a mine count of 1. The middle 2-cell would give us a count-set with cells A,B,C and mine count 2. The rightmost 2-cell gives us a count-set with cells B,C and a mine count of 2.</p>\n\n<p>If a count-set&rsquo;s count is the same size as its set, like the rightmost 2-cell&rsquo;s, we know they&rsquo;re all mines and can flag them. Similarly, if a count-set&rsquo;s count is 0, we know they&rsquo;re all mine-free so we can clear them.</p>\n\n<p>I call these count-sets certainties.</p>\n\n<p>We write count-sets like this: \\(1\\{A,B\\}\\) is a count-set with 1 mine and cells \\(\\{A,B\\}\\).</p>\n\n<p>Now we can talk about the superset rule, which is the generalization of the 1-1 rule I talked about before. If we have two count-sets and one&rsquo;s set is a superset of the other&rsquo;s, we can subtract the smaller count-set from the bigger one:</p>\n\n<p>\\[\nNS,MT \\rightarrow (N-M)(S-T),MT\n\\]</p>\n\n<p>Where \\(T \\subseteq S\\)</p>\n\n<p>We subtract the smaller count-set&rsquo;s count and set from the bigger one. In my implementation, I threw away the original superset after refining it. Theoretically, we might miss some potential solutions by doing this, but in practice, it does fine. These rules don&rsquo;t need to catch every solution anyway because we&rsquo;re going to have a surefire backup in case we get stuck.</p>\n\n<p>Why is this rule useful? Let&rsquo;s think about possiblities. If we have the count-set \\(2\\{A,B,C,D\\}\\), there are \\(\\binom{4}{2} = 6\\) possible configurations of mines that are consistent with that information. In general, the number of possible configurations for a count-set with \\(N\\) mines and a set of size \\(|S|\\) is \\(\\binom{|S|}{N}\\). Certainties are certain because there is only one possibility: \\(\\binom{N}{N} = \\binom{N}{0} = 1\\). In the superset rule, we refine the superset by making it smaller, which reduces the number of possibilites. This is deduction!</p>\n\n<p>Now we&rsquo;re ready to talk about the 1-2 rule:</p>\n\n<p>\\[\nNS,1T \\rightarrow (N-1)(S-T),1(S \\cap T),0(T-S)\n\\]</p>\n\n<p>Where \\(|S \\cap T| = 2\\) and \\(|S| = N+1\\)</p>\n\n<p>In english: If \\(NS\\) only has one non-mine among its cells and it overlaps two cells with a 1-count, those cells from \\(S\\) which don&rsquo;t overlap with the 1-count must all be mines, the overlap must contain the 1-count&rsquo;s mine, and the rest of the 1-count must not contain a mine. The intuition behind this is that at exactly one of the overlapping cells is a non-mine, therefore that&rsquo;s <span class=\"emph\">the</span> non-mine of \\(NS\\). So the rest of \\(S\\) must all be mines. And since we narrowed down where the 1-count&rsquo;s mine is, we can refine that set and clear the rest of it.</p>\n\n<p>Why is \\((N-1)(S-T)\\) all mines? The size \\(|S-T| = |S|-|S \\cap T| = |S|-2 = N-1\\). So \\((N-1)(S-T)\\) is a certainty.</p>\n\n<p>This rule could be generalized further, but it&rsquo;s good enough in practice and already pretty confusing as-is.</p>\n\n<p>When solving, we start out by creating count-sets from numbered cells. As a shortcut, we only need to consider numbered cells which are neighbors with hidden, unflagged cells. We&rsquo;ll assume flagged cells have mines in them and subtract them from our count-sets. For example:</p>\n\n<p><img src=\"/blog/img/posts/2024-04-01-minesweeper/relative-count-set.png\" alt=\"relative-count-set\" class=\"Minesweeper\" height=\"294\" width=\"582\" /></p>\n\n<p>The 2 cell will contribute the count-set \\(1\\{A,B,C\\}\\). We have a 1-count because after accounting for the flagged cell, there&rsquo;s only 1 mine left among A,B,C. And there&rsquo;s no need to include the flagged cell in the count since we know it&rsquo;s a mine.</p>\n\n<p>We also add a count-set for the total remaining mine count. Its set contains all hidden, non-flagged cells, and its count is the total number of mines in the minefield minus the number of flags.</p>\n\n<p>One more thing before we get to the main solver algorithm: These rules are pretty good, but they might miss some solutions. As a backup, we&rsquo;ll make a brute-force solver.</p>\n\n<p>This brute force solver will use our count-sets. here is the algorithmm:</p>\n\n<p></p>\n\n<table cellpadding=\"0\" cellspacing=\"0\" class=\"SVerbatim\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\">cells = all hidden, unflagged cells</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\">for cell in cells:</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">if assuming the cell is a mine leads to a contradiction:</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">the cell is not a mine</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">else if assuming it's not a mine leads to a contradiction:</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">the cell is a mine</span></p></td></tr></tbody></table>\n\n<p>This is like a SAT solver, but instead of trying to find one possible configuration of mines, we want to find out which cells <span class=\"emph\">must</span> be a mine or not a mine.</p>\n\n<p>To assume that a cell is a mine, we go through all count-sets that mention it, remove it from the set, and decrease its count by 1. To assume that a cell isn&rsquo;t a mine, we do the same thing, but leave the count as-is.</p>\n\n<p>To test whether an assumption leads to a contradiction, we try every possible assignment of remaining hidden, non-flagged cells as mine or non-mine. If we can find an assignment that is free of contradictions, the initial assumption is possible, so we can&rsquo;t rule it out.</p>\n\n<p>We have a contradiction when a count-set has a negative count or a count higher than its set size. This can only happen if we made a wrong assumption. As long we started with good information, if we make a single assumption about a cell being a mine and every possibility leads to a contradiction, that assumption must have been wrong, so the opposite must be true.</p>\n\n<p>This algorithm is super slow since it tries a potentially exponential number of assignments, so we only use it when all else fails. And we break out whenever we learn the truth about a single cell since that new bit of information may allow us to make more progress with our more efficient hand-written rules.</p>\n\n<p>Alright, now we&rsquo;re finally ready for the main algorithm!</p>\n\n<p></p>\n\n<table cellpadding=\"0\" cellspacing=\"0\" class=\"SVerbatim\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\">reveal the hint cell</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\">create count-sets from minefield</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\">loop:</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">loop:</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">loop:</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">handle certainties</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">loop:</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">deduction</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">loop:</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">brute force</span></p></td></tr></tbody></table>\n\n<p><span class=\"RktSym\">loop</span><span class=\"RktMeta\"></span> means repeat the body over and over until we find a solution or stop making progress. If any step of the body results in a solved state, break out immediately.</p>\n\n<p><span class=\"RktSym\">handle</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">certainties</span><span class=\"RktMeta\"></span> detects certainties present in our count-sets, flags and clears cells appropriately, and updates our count-sets according to the resulting minefield.</p>\n\n<p><span class=\"RktSym\">deduction</span><span class=\"RktMeta\"></span> applies the superset rule and the 1-2 rule to our count-sets.</p>\n\n<p><span class=\"RktSym\">brute</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">force</span><span class=\"RktMeta\"></span> invokes our brute-force solver.</p>\n\n<p>In english, we try handling certainties and applying our deduction rules over and over again until we reach a solution or get stuck. If we get stuck, try brute forcing until we learn something new, then go back to handling certainty and using our deduction rules and keep doing all this until we&rsquo;re fully stuck or find a solution. We can get stuck if the minefield forces us to guess. Sometimes that&rsquo;s unavoidable.</p>\n\n<p>All right, now we have a solver. How do we use this to generate a guess-free minefield?</p>\n\n<p>At a high level, what we do is start out with a random minefield. Then we solve as much as we can. If we get stuck, we move one of the mines that makes us stuck into a non-mine cell that we know nothing about. Then, we start over solving this new minefield from scratch, repeating until we can solve it all the way. If we wind up in a situation where we&rsquo;re stuck and there&rsquo;s nowhere to move the mines, like if the last two hidden cells are a 50-50, we start over with a new random minefield.</p>\n\n<p>We can select one of the mines that makes us stuck by selecting a random cell from one of our (non-certain) count-sets, ignoring the total mines remaining count-set. And a cell that we know nothing about is a hidden cell that doesn&rsquo;t appear in any of our count sets, ignoring the total mines remaining count-set.</p>\n\n<p>In order for this to work, our selection of the hint cell needs to be deterministic. Otherwise, the solver might be able to solve the minefield from one hint-cell, but then the player gets a different hint-cell which could lead to them getting stuck. I generate the hint cell by sorting all cells by their distance from the center of the minefield and pick the first mine-free cell with a minimum count, which is almost always a zero-count.</p>\n\n<p>One problem with this algorithm is that it tends to push the mines out towards the edges of the minefield. One way to mitigate this is instead of always pushing away when we get stuck, half of the time, we can pull a mine from the unknown cells into the cells we have some information about instead. But in practice, the effect is not really noticable, so this is unnecessary.</p>\n\n<p>This guess-free generation strategy doesn&rsquo;t actually require the solver to be perfect. For example, if you use a solver that only does <span class=\"RktSym\">handle</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">certainties</span><span class=\"RktMeta\"></span>, you&rsquo;d generate a minefield that only requires <span class=\"RktSym\">handle</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">certainties</span><span class=\"RktMeta\"></span> in order to be solved. If we removed the brute force backup, we&rsquo;d generate minefields that can be solved with just our deduction rules. This is nice because it means we can tweak the difficulty not only by changing the total number of mines, but also by changing the sophistication of our solver.</p>\n\n<p>And there we have it! Now you&rsquo;ll never have to guess in minesweeper again. Here is the source code for my implementation: <a href=\"https://github.com/quasarbright/minesweeper\">https://github.com/quasarbright/minesweeper</a></p>")) ((? . 3) f post (u . "Extending Automatic Differentiation to Higher Order Derivatives") (? . 3) 1744126109 (p+ #"/home/runner/work/blog/blog/repo/2023/07/extending-automatic-differentiation-to-higher-order-derivatives.html" . unix) (u . "/blog/2023/07/extending-automatic-differentiation-to-higher-order-derivatives.html") (u . "2023-07-07T23:15:39") (? . 7) (? . 11) (c (u . "racket") c (u . "math") c (u . "machine-learning") c (u . "projects") c (u . "tutorials")) (u . "\n<p>This is part 2 of a series of blog posts about implementing automatic differentiation. You can read part 1 <a href=\"/blog/2022/12/understanding-and-implementing-automatic-differentiation.html\">here</a>. In this post, we extend our automatic differentiation system to support higher order derivatives.</p>\n\n<p>Like the previous post, some knowledge of calculus is required and Racket-y stuff will be explained as we go.</p>") #t (u . "\n<p>This is part 2 of a series of blog posts about implementing automatic differentiation. You can read part 1 <a href=\"/blog/2022/12/understanding-and-implementing-automatic-differentiation.html\">here</a>. In this post, we extend our automatic differentiation system to support higher order derivatives.</p>\n\n<p>Like the previous post, some knowledge of calculus is required and Racket-y stuff will be explained as we go.</p>\n<!--more-->\n\n<table cellpadding=\"0\" cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.Higher_.Order_.Derivatives%29\">1<span class=\"hspace\">&nbsp;</span>Higher Order Derivatives</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\"></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.The_.Problem%29\">2<span class=\"hspace\">&nbsp;</span>The Problem</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toclink\" data-pltdoc=\"x\" href=\"#%28part._.Laziness%29\">2.1<span class=\"hspace\">&nbsp;</span>Laziness</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\"></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.Lazy_.Computation_.Graph%29\">3<span class=\"hspace\">&nbsp;</span>Lazy Computation Graph</a></p></td></tr></tbody></table>\n\n<p>In part 1, we implemented first order automatic differentiation. Our derivative function took in a <span class=\"RktSym\">DNumber</span> representing the output and a <span class=\"RktSym\">DNumber</span> representing the input and returned a plain number representing the derivative of the output with respect to the input. Recall that a <span class=\"RktSym\">DNumber</span> represents the result of a differentiable computation and stores a mapping from each input to the numerical value of its derivative.</p>\n\n<h1>1\n <tt>&nbsp;</tt><a name=\"(part._.Higher_.Order_.Derivatives)\"></a>Higher Order Derivatives</h1>\n\n<p>At the end of part 1, I teased higher order derivatives. What are higher order derivatives? In part one, we only took the first derivatives. In math, we can compute the second derivative by taking the first derivative twice. For example, the second derivative of \\(x^2\\) with respect to \\(x\\) is \\(2\\), which can be found by taking the first derivative, getting \\(2x\\), and taking the first derivative again, getting \\(2\\).</p>\n\n<p>More precisely, to compute the \\(n\\)th derivative of \\(y\\) with respect to \\(x\\),</p>\n\n<p>\\[\\frac{d^0y}{dx^0} = y\\]\n\\[\\frac{d^ny}{dx^n} = \\frac{d}{dx}\\frac{d^{n-1}y}{dx}\\]</p>\n\n<p>where \\(n \\ge 0\\).</p>\n\n<p>Great! We have our <span class=\"RktSym\">derivative</span> function from part 1, so we can just call it \\(n\\) times, right? No. The signature doesn&rsquo;t line up. Our <span class=\"RktSym\">derivative</span> function returns a plain number, but the first argument has to be a <span class=\"RktSym\">DNumber</span>. Ok, can we just make <span class=\"RktSym\">derivative</span> return a <span class=\"RktSym\">DNumber</span> then?</p>\n\n<p>Let&rsquo;s take a step back and think about what would mean. A <span class=\"RktSym\">DNumber</span> is the result of a differentiable computation. A <span class=\"RktSym\">DNumber</span> is created by storing the computation&rsquo;s inputs and the partial derivative of the output with respect to each input. An operator like multiplication is responsible for recording these inputs and computing these partial derivatives.</p>\n\n<p>Currently, these partial derivatives are stored as plain numbers. And when we compute the derivative, we are adding and multiplying plain numbers together with Racket&rsquo;s built-in arithmetic operators, not our custom differentiable ones. In order for the result of <span class=\"RktSym\">derivative</span> to be a <span class=\"RktSym\">DNumber</span>, the computation of the derivative itself must be differentiable. This means <span class=\"RktSym\">DNumber</span>s must store partial derivatives as <span class=\"RktSym\">DNumber</span>s instead of plain numbers and <span class=\"RktSym\">derivative</span> must use our differentiable addition and multiplication to combine partial derivatives. This also means that our operators, which construct a <span class=\"RktSym\">DNumber</span> for the result, will also have to construct a <span class=\"RktSym\">DNumber</span> to compute each partial derivative, rather than using plain Racket numbers.</p>\n\n<p>Let&rsquo;s revise our data definitions:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">inputs</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">a DNumber (\"differentiable number\") is a</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">(dnumber Number (listof DChild) )</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">It represents the result of a differentiable computation.</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">&lsquo;</span><span class=\"RktCmt\">value</span><span class=\"RktCmt\">&lsquo;</span><span class=\"RktCmt\"> is the numerical value of the result of this computation</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">&lsquo;</span><span class=\"RktCmt\">inputs</span><span class=\"RktCmt\">&lsquo;</span><span class=\"RktCmt\"> associates each input to this computation with the numerical value of its partial derivative</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">input</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">derivative</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">A DChild is a</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">(dchild DNumber DNumber)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">It represents an input to a differential computation.</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">&lsquo;</span><span class=\"RktCmt\">input</span><span class=\"RktCmt\">&lsquo;</span><span class=\"RktCmt\"> is the DNumber that was supplied as an input to the parent computation</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">&lsquo;</span><span class=\"RktCmt\">derivative</span><span class=\"RktCmt\">&lsquo;</span><span class=\"RktCmt\"> is a DNumber representing the computation of the partial derivative of the parent result with respect to this input.</span></td></tr></tbody></table></div>\n\n<p>All we changed was the data type of the <span class=\"RktSym\">derivative</span> field of <span class=\"RktSym\">dchild</span>. It used to be a plain number, and now it&rsquo;s a <span class=\"RktSym\">DNumber</span>.</p>\n\n<p>Ok, so far so good. Let&rsquo;s rewrite multiplication:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">(DNumber DNumber -&gt; DNumber)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">differentiable multiplication</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\">(dnumber</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\">6</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\">(list</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(dchild (dnumber 2 '()) (dnumber 3 '()))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(dchild (dnumber 3 '()) (dnumber 2 '()))))</span></p></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>Let&rsquo;s compare this to the previous implementation:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul/old</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>Previously, the partial derivative with respect to one input was the numerical value of the other input. Now, we just use the other input directly! This is actually simpler and more straightforward than the old implementation.</p>\n\n<p>Let&rsquo;s do addition now:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">(DNumber DNumber -&gt; DNumber)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">differentiable addition</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">add</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">add</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const5</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\">(dnumber</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\">9</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\">(list</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(dchild (dnumber 4 '()) (dnumber 1 '()))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(dchild (dnumber 5 '()) (dnumber 1 '()))))</span></p></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>The only change we made was creating dummy <span class=\"RktSym\">DNumber</span>s for the 1s.</p>\n\n<h1>2\n <tt>&nbsp;</tt><a name=\"(part._.The_.Problem)\"></a>The Problem</h1>\n\n<p>Things start to break down when we try to do this to an operator like \\(\\frac{1}{x}\\):</p>\n\n<p>\\[\n\\frac{d}{dx} \\frac{1}{x} = -\\frac{1}{x^2}\n\\]</p>\n\n<p>The derivative of the reciprocal operation contains another reciprocal operation. To see why this is a problem, let&rsquo;s look at the old and new implementations:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">reciprocal-old</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2F%29%29\">/</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2F%29%29\">/</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\"><span class=\"nobreak\">-1</span></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">reciprocal-new</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2F%29%29\">/</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\"><span class=\"nobreak\">-1</span></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">reciprocal-new</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>Previously, we just use Racket&rsquo;s built-in <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2F%29%29\">/</a></span> function to compute the derivative. But now, since the computation of the derivative must be differentiable, we have to use our own operators to produce a <span class=\"RktSym\">DNumber</span>. For <span class=\"RktSym\">add</span> and <span class=\"RktSym\">mul</span>, the partial derivatives are simple and don&rsquo;t involve other operations. But for <span class=\"RktSym\">reciprocal</span>, the partial derivative is another call to <span class=\"RktSym\">reciprocal</span>. This recursion never terminates. This makes sense because you can keep taking the derivative of the reciprocal function and the exponent in the denominator will continue growing. Since the computation of the partial derivatives must be differentiable, they will have partial derivatives as well. If the function can be differentiated arbitrarily many times and continue producing different expressions with more partial derivatives, the computation graph will be infinite and its construction will never terminate.</p>\n\n<h2>2.1\n <tt>&nbsp;</tt><a name=\"(part._.Laziness)\"></a>Laziness</h2>\n\n<p>To avoid this problem, we can be lazy and construct the computation graph on demand, rather than all at once. Remember, to compute first-order derivatives, all we needed was the numerical values of the partial derivatives. Similarly, to compute the second derivative, we only need the numerical value of the partial derivatives&rsquo; partial derivatives. We can build the computation graph just as deeply as we need it, and no more.</p>\n\n<p>To make this idea of laziness more concrete, let&rsquo;s explore a common example of laziness: streams.</p>\n\n<p>A stream is like a list, but it can be infinite, and it can be constructed \"on demand\". For example, let&rsquo;s construct a stream containing all integers, starting at a given one:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">racket/stream</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">integers-from</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream-cons%29%29\">stream-cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">integers-from</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28def._%28%28lib._racket%2Fstream..rkt%29._stream-~3elist%29%29\">stream-&gt;list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28def._%28%28lib._racket%2Fstream..rkt%29._stream-take%29%29\">stream-take</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">integers-from</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(1 2 3 4 5 6 7 8 9 10)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28def._%28%28lib._racket%2Fstream..rkt%29._stream-~3elist%29%29\">stream-&gt;list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28def._%28%28lib._racket%2Fstream..rkt%29._stream-take%29%29\">stream-take</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">integers-from</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">20</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)</span></p></td></tr></tbody></table></div>\n\n<p>A brief Racket aside: Racket has linked lists. The function <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span> takes in an element and a list and returns a list with that element at the beginning of the list. For example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._null%29%29\">null</a></span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'()</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'()</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._null%29%29\">null</a></span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(1)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(1)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._null%29%29\">null</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(1 2)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(1 2)</span></p></td></tr></tbody></table></div>\n\n<p><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._null%29%29\">null</a></span> is the empty list, also written as <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span> and <span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span>. And in the output, we see lists like <span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">1</span><span class=\"stt\"> </span><span class=\"RktVal\">2</span><span class=\"RktVal\">)</span>. This is the same as <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"stt\"> </span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span>.</p>\n\n<p>The <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span> function we&rsquo;ve been working with is shorthand for uses of <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span> and <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._null%29%29\">null</a></span>.</p>\n\n<p><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream-cons%29%29\">stream-cons</a></span> is similar to <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span> for lists, but delays the evaluation of the rest of the stream (the second argument) until its value is needed. <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28def._%28%28lib._racket%2Fstream..rkt%29._stream-take%29%29\">stream-take</a></span> takes in a stream and a number <span class=\"RktSym\">n</span> and returns another stream that produces the first <span class=\"RktSym\">n</span> elements of the given stream. <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28def._%28%28lib._racket%2Fstream..rkt%29._stream-~3elist%29%29\">stream-&gt;list</a></span> forces the evaluation of all elements of the stream and converts the stream to a list. If we did <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28def._%28%28lib._racket%2Fstream..rkt%29._stream-~3elist%29%29\">stream-&gt;list</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">integers-from</span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span>, it would never terminate.</p>\n\n<p>Rather than store the entire stream in memory like a list, a stream stores a function that computes the rest of the stream. However, once part of the stream is computed, it is remembered:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream-cons%29%29\">stream-cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream-cons%29%29\">stream-cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/begin.html#%28form._%28%28quote._~23~25kernel%29._begin%29%29\">begin</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"hello!\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28def._%28%28lib._racket%2Fstream..rkt%29._empty-stream%29%29\">empty-stream</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28def._%28%28lib._racket%2Fstream..rkt%29._stream-~3elist%29%29\">stream-&gt;list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktOut\">hello!</span></p></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(1 2)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28def._%28%28lib._racket%2Fstream..rkt%29._stream-~3elist%29%29\">stream-&gt;list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(1 2)</span></p></td></tr></tbody></table></div>\n\n<p>The <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/begin.html#%28form._%28%28quote._~23~25kernel%29._begin%29%29\">begin</a></span> expression prints <span class=\"RktVal\">\"hello!\"</span> and then returns 2.</p>\n\n<p>The <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"stt\"> </span><span class=\"RktVal\">\"hello!\"</span><span class=\"RktPn\">)</span> only runs once because the first <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28def._%28%28lib._racket%2Fstream..rkt%29._stream-~3elist%29%29\">stream-&gt;list</a></span> forces the evaluation of the whole stream. Once a stream is forced, it remembers the values of its elements, so when you ask for them again, it doesn&rsquo;t re-compute the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/begin.html#%28form._%28%28quote._~23~25kernel%29._begin%29%29\">begin</a></span> with the print. This is nice because if, instead of printing, there was a big calculation to compute one of the elements, you wouldn&rsquo;t want to run that more than once.</p>\n\n<p>This is the kind of behavior we want for our new computation graphs. Like a stream, our computation graph might be infinite, but we don&rsquo;t need the whole thing at once. And we don&rsquo;t want to re-run potentially expensive numerical computations if we don&rsquo;t have to.</p>\n\n<p>We will achieve this laziness using Racket&rsquo;s promises. From the Racket documentation:</p>\n\n<blockquote class=\"SubFlow\">\n <p>A promise encapsulates an expression to be evaluated on demand via <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span>. After a promise has been <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span>d, every later <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span> of the promise produces the same result.</p></blockquote>\n\n<p>These are not like JavaScript&rsquo;s promises, which are used for sequencing asynchronous computations. Racket&rsquo;s promises are used for delayed computations.</p>\n\n<p>For our purposes, we will be using <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span>, which creates a simple promise. If you want to learn more about promises, see <a href=\"/blog/2022/10/02/composable-promises.html\">my blog post on composable promises</a>!</p>\n\n<p>Here is an example showing how <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span> and <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span> work:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">racket/promise</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/begin.html#%28form._%28%28quote._~23~25kernel%29._begin%29%29\">begin</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"hello!\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">42</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktOut\">hello!</span></p></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">42</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">42</span></p></td></tr></tbody></table></div>\n\n<p>Like a stream&rsquo;s elements, the value of the promise is computed only when forced, and the result is remembered so subsequent forces don&rsquo;t re-compute the result.</p>\n\n<p>For our computation graphs, what should we wrap in a promise? In other words, what should only be computed on demand? Sometimes, we don&rsquo;t care about a <span class=\"RktSym\">DNumber</span>&rsquo;s derivatives at all. For example, if we just want a <span class=\"RktSym\">DNumber</span>&rsquo;s value, we don&rsquo;t need any of its derivatives. But when we are computing the derivative of a <span class=\"RktSym\">DNumber</span> with respect to another, we will look at all of its derivatives. Considering this, it makes sense to wrap the <span class=\"RktSym\">children</span> list of a <span class=\"RktSym\">DNumber</span> in a promise. This means that the only thing that will be eagerly computed when constructing a <span class=\"RktSym\">DNumber</span> is its value. Derivatives will only be computed on-demand. And when they are <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span>d, they&rsquo;ll all be forced at once, and only their values will be computed eagerly. If we want the first derivative, we won&rsquo;t even compute partial derivatives of partial derivatives. We&rsquo;ll only compute the immediate values of the immediate partial derivatives.</p>\n\n<h1>3\n <tt>&nbsp;</tt><a name=\"(part._.Lazy_.Computation_.Graph)\"></a>Lazy Computation Graph</h1>\n\n<p>Here are our new data definitions:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">children</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">A DNumber is a</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">(dnumber number? (promise-of (listof DChild)))</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Represents the result of a differentiable computation</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">where</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">value is the numerical result (plain number)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">children are the inputs and their derivatives.</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">input</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">derivative</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">A DChild is a</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">(dchild DNumber DNumber)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Represents an input to a differentiable computation and its derivative</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">where</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">input is the input</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">derivative is its first derivative of this child</span><span class=\"RktCmt\">'</span><span class=\"RktCmt\">s parent with respect to this input</span></td></tr></tbody></table></div>\n\n<p>Rather than a list of <span class=\"RktSym\">DChild</span>ren, we store a promise of a list of <span class=\"RktSym\">DChild</span>ren. This achieves the desired laziness. Let&rsquo;s rewrite multiplication and addition again:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">(DNumber DNumber -&gt; DNumber)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">differentiable multiplication</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber 6 #&lt;promise:eval:5:0&gt;)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">(DNumber DNumber -&gt; DNumber)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">differentiable addition</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">add</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">add</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const5</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber 9 #&lt;promise:eval:9:0&gt;)</span></p></td></tr></tbody></table></div>\n\n<p>It&rsquo;s the same as before, except we wrap the children <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span>s in a <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span>. Now let&rsquo;s write <span class=\"RktSym\">reciprocal</span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">reciprocal</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2F%29%29\">/</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\"><span class=\"nobreak\">-1</span></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">reciprocal</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>Again, we just wrap the children <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span>s in a <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span>. Importantly, in this case, the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span> protects us from an infinite loop. The evaluation of the list of children is delayed until it is <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span>d, so the function terminates without actually making a recursive call. Like the infinite stream of integers, this infinite computation graph is computed on-demand.</p>\n\n<p>Now let&rsquo;s re-write <span class=\"RktSym\">derivative</span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">(DNumber DNumber -&gt; DNumber)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">computes the derivative of y with respect to x</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">inputs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-children</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Ffold%29%29\">for/fold</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">sum</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">input</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">inputs</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">u</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild-input</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">input</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">dy/du</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild-derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">input</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">add</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">sum</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">dy/du</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">u</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>There are a few differences between the old <span class=\"RktSym\">derivative</span> function and this new one: Instead of returning <span class=\"RktVal\">1</span>, we create a fresh constant <span class=\"RktSym\">DNumber</span> for it. And since <span class=\"RktSym\">dnumber-children</span> is a promise, we must <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span> it to demand the values of the inputs. Additionally, since we&rsquo;re working with <span class=\"RktSym\">DNumber</span>s instead of plain numbers, we can&rsquo;t use Racket&rsquo;s <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Fsum%29%29\">for/sum</a></span> to add up the partial derivatives. Instead, we use <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Ffold%29%29\">for/fold</a></span>, which accumulates the <span class=\"RktSym\">sum</span> variable as we loop over the inputs.</p>\n\n<p>Here is an example of using <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Ffold%29%29\">for/fold</a></span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"My \"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"name \"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"is \"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"Mike.\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Ffold%29%29\">for/fold</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">sentence</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"\"</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">word</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string-append%29%29\">string-append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">sentence</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">word</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">\"My name is Mike.\"</span></p></td></tr></tbody></table></div>\n\n<p>The last difference is that we use our custom <span class=\"RktSym\">add</span> operator to compute the rolling sum and we use our <span class=\"RktSym\">mul</span> operator to compute the chain rule since we&rsquo;re working with <span class=\"RktSym\">DNumber</span>s now.</p>\n\n<p>Let&rsquo;s run the same tests as before:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">0</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">0</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">add</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">add</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">0</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">add-4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">add</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">add-4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">add-4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">double</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">add</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">double</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">double</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">0</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">square</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">square</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">8</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">square</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">6</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">3</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">4</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">square</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">add</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">84</span></p></td></tr></tbody></table></div>\n\n<p>The results are the same, but <span class=\"RktSym\">derivative</span> returns <span class=\"RktSym\">DNumber</span>s now instead of plain numbers, so we use <span class=\"RktSym\">dnumber-value</span> to get the numerical value of the derivative. Now let&rsquo;s compute some higher order derivatives:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">square</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">6</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">square</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">square</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">0</span></p></td></tr></tbody></table></div>\n\n<p>Nice! One cool thing about promises is that when we print them out, we can see whether they&rsquo;re forced or not:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">p</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#&lt;promise:p&gt;</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">p</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#&lt;promise!2&gt;</span></p></td></tr></tbody></table></div>\n\n<p>If the promise is forced, we see its value.</p>\n\n<p>We can use this to see how much of our computation graph has been forced:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">recip4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">reciprocal</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">recip4</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber 1/4 #&lt;promise:eval:11:0&gt;)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">recip4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber -1/16 #&lt;promise:eval:9:0&gt;)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">recip4</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\">(dnumber</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\">1/4</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\">#&lt;promise!(#(struct:dchild</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dnumber 4 #&lt;promise!()&gt;)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dnumber -1/16 #&lt;promise:eval:5:0&gt;)))&gt;)</span></p></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">recip4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber 1/32 #&lt;promise:eval:9:0&gt;)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">recip4</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\">(dnumber</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\">1/4</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\">#&lt;promise!(#(struct:dchild</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dnumber 4 #&lt;promise!()&gt;)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dnumber</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">-1/16</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#&lt;promise!(#(struct:dchild</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dnumber -1 #&lt;promise!()&gt;)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dnumber</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">1/16</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#&lt;promise!(#(struct:dchild</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dnumber</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">16</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#&lt;promise!(#(struct:dchild</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dnumber</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">4</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#&lt;promise!()&gt;)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dnumber</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">4</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#&lt;promise!()&gt;))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dchild</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dnumber</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">4</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#&lt;promise!()&gt;)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dnumber</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">4</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#&lt;promise!()&gt;)))&gt;)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dnumber</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">-1/256</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#&lt;promise:eval:5:0&gt;)))&gt;))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dchild</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dnumber</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">1/16</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#&lt;promise!(#(struct:dchild</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dnumber</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">16</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#&lt;promise!(#(struct:dchild</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dnumber</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">4</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#&lt;promise!()&gt;)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dnumber</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">4</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#&lt;promise!()&gt;))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dchild</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dnumber</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">4</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#&lt;promise!()&gt;)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dnumber</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">4</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#&lt;promise!()&gt;)))&gt;)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dnumber</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">-1/256</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#&lt;promise:eval:5:0&gt;)))&gt;)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#(struct:dnumber -1 #&lt;promise!()&gt;)))&gt;)))&gt;)</span></p></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>We can see that, initially, no derivatives have been computed. But as we take higher order derivatives, more of the compuation graph gets forced as needed.</p>\n\n<p>Now let&rsquo;s make some more operators, starting with \\(e^x\\):</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">e^x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">result</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._exp%29%29\">exp</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">result</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktSym\">result</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">e^4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">e^x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">e^4</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber 54.598150033144236 #&lt;promise:eval:45:0&gt;)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">e^4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber 54.598150033144236 #&lt;promise:eval:9:0&gt;)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">e^4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber 54.598150033144236 #&lt;promise:eval:9:0&gt;)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">e^4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber 54.598150033144236 #&lt;promise:eval:9:0&gt;)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">e^4</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\">#0=(dnumber</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">54.598150033144236</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">#&lt;promise!(#(struct:dchild #(struct:dnumber 4 #&lt;promise!()&gt;) #0#))&gt;)</span></p></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>Since \\(\\frac{d}{dx}e^x = e^x\\), we can store the result itself as the partial derivative of the result with respect to x. Not only is this pretty cool, but it also has the benefit that even though our computation\ncan be differentiated arbitrarily many times, the computation graph will stay the same size. This is not the case for reciprocal, which grows exponentially with successive derivatives.</p>\n\n<p>Another interesting thing is that our computation graph now has a cycle, but it is actually fine since it will never cause the computation of a derivative to infinitely loop. In particular, our assumption that no computation is an input to itself is not violated since the cycle is in the derivative, not the input itself.</p>\n\n<p>We can see this cycle in the way <span class=\"RktSym\">e^4</span> gets printed after its children have been forced. That #0= and #0# stuff is what happens when racket prints a value which contains cycles. The #0# is where the result is stored in itself.</p>\n\n<p>Now let&rsquo;s do exponentiation. Recall the partial derivatives of the exponential:</p>\n\n<p>\\[\n\\frac{\\partial a^b}{\\partial a} = b a^{b-1}\n\\]</p>\n\n<p>\\[\n\\frac{\\partial a^b}{\\partial b} = \\ln(a) a^b\n\\]</p>\n\n<p>Since the computation of our partial derivatives must be differentiable, we must also have a differentiable operator for \\(\\ln\\).</p>\n\n<p>\\[\n\\frac{\\partial \\ln(x)}{\\partial x} = \\frac{1}{x}\n\\]</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">ln</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._log%29%29\">log</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">reciprocal</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">pow</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">result</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._expt%29%29\">expt</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">pow</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">add</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\"><span class=\"nobreak\">-1</span></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">ln</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">result</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktSym\">result</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">ln</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber 1/4 #&lt;promise:eval:9:0&gt;)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">pow</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const2</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber 6 #&lt;promise:eval:9:0&gt;)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">pow</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const2</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const2</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber 9.887510598012987 #&lt;promise:eval:9:0&gt;)</span></p></td></tr></tbody></table></div>\n\n<p>Again, we use a cycle to minimize the size of the computation graph of the exponential. However, our computation graph still grows with successive derivatives.</p>\n\n<p>Just for fun, let&rsquo;s implement sine and cosine too.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">sine</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._sin%29%29\">sin</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cosine</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cosine</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._cos%29%29\">cos</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\"><span class=\"nobreak\">-1</span></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">sine</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">sine</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber 0.1411200080598672 #&lt;promise:eval:57:0&gt;)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">cosine</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber -0.9899924966004454 #&lt;promise:eval:58:0&gt;)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">sine</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber -0.9899924966004454 #&lt;promise:eval:9:0&gt;)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cosine</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber -0.1411200080598672 #&lt;promise:eval:9:0&gt;)</span></p></td></tr></tbody></table></div>\n\n<p>The definitions are mutually recursive in their derivatives.</p>\n\n<p>Now our little automatic differentiation library supports higher order derivatives.</p>\n\n<p>Let&rsquo;s recap:</p>\n\n<p>We had automatic differentiation for first order dervatives, but we couln&rsquo;t do higher order derivatives since the result of a derivative was a plain number with no computation graph. In order to make the derivative return a <span class=\"RktSym\">DNumber</span>, we had to make the computation of the derivative itself differentiable. This led to infinite computation graphs, so we used laziness to compute the computation graph on demand.</p>\n\n<p>With higher order derivatives, you can do some crazy stuff. For example, you can do meta-gradient descent, where you use gradient descent to optimize the hyperparameters of gradient descent. This implementation is a little too inefficient for that to be practical, but it is possible.</p>\n\n<p>The source code for the full \"library\" can be found <a href=\"https://github.com/quasarbright/number-diff\">here</a>. In there, I have an example of using automatic differentiation for machine learning.</p>")) ((? . 4) f post (u . "Math From Scratch: Creating a Proof Checker") (? . 4) 1744126109 (p+ #"/home/runner/work/blog/blog/repo/2024/04/math-from-scratch-creating-a-proof-checker.html" . unix) (u . "/blog/2024/04/math-from-scratch-creating-a-proof-checker.html") (u . "2024-04-29T22:57:22") (? . 2) (? . 5) (c (u . "math") c (u . "projects") c (u . "tutorials")) (u . "\n<p>Math, at its core, is a network of facts that are undoubtably known to be true. We start out with some simple assumptions called axioms and prove new facts to be true using logic and reasoning. As long as the proofs are valid, then under the founding assumptions, anything that can is proven is definitely true. But when you&rsquo;re proving something in math, how do you actually know if you&rsquo;re doing it right? What if you make a mistake? What if you gloss over proving something which is \"obviously true\" that turns out to be false? One way to be sure is to have a computer check your proof, which is what we&rsquo;re going to do. But first, we&rsquo;re going to have to build math from the ground up.</p>") #t (u . "\n<p>Math, at its core, is a network of facts that are undoubtably known to be true. We start out with some simple assumptions called axioms and prove new facts to be true using logic and reasoning. As long as the proofs are valid, then under the founding assumptions, anything that can is proven is definitely true. But when you&rsquo;re proving something in math, how do you actually know if you&rsquo;re doing it right? What if you make a mistake? What if you gloss over proving something which is \"obviously true\" that turns out to be false? One way to be sure is to have a computer check your proof, which is what we&rsquo;re going to do. But first, we&rsquo;re going to have to build math from the ground up.</p>\n<!--more-->\n\n<table cellpadding=\"0\" cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.A_.Language_for_.Facts%29\">1<span class=\"hspace\">&nbsp;</span>A Language for Facts</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\"></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.Rules_for_.Reasoning%29\">2<span class=\"hspace\">&nbsp;</span>Rules for Reasoning</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toclink\" data-pltdoc=\"x\" href=\"#%28part._.Tying_up_.Loose_.Ends%29\">2.1<span class=\"hspace\">&nbsp;</span>Tying up Loose Ends</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\"></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.Theories%29\">3<span class=\"hspace\">&nbsp;</span>Theories</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toclink\" data-pltdoc=\"x\" href=\"#%28part._.Set_.Theory%29\">3.1<span class=\"hspace\">&nbsp;</span>Set Theory</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toclink\" data-pltdoc=\"x\" href=\"#%28part._.Natural_.Numbers%29\">3.2<span class=\"hspace\">&nbsp;</span>Natural Numbers</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\"></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.Extras%29\">4<span class=\"hspace\">&nbsp;</span>Extras</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toclink\" data-pltdoc=\"x\" href=\"#%28part._.Natural_.Numbers_as_.Sets%29\">4.1<span class=\"hspace\">&nbsp;</span>Natural Numbers as Sets</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toclink\" data-pltdoc=\"x\" href=\"#%28part._.Law_of_.Excluded_.Middle%29\">4.2<span class=\"hspace\">&nbsp;</span>Law of Excluded Middle</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toclink\" data-pltdoc=\"x\" href=\"#%28part._.All_you_need_is____forall___and____rightarrow__%29\">4.3<span class=\"hspace\">&nbsp;</span>All you need is \\(\\forall\\) and \\(\\rightarrow\\)</a></p></td></tr></tbody></table>\n\n<p>Proofs are essential to math. We start out with some facts we assume to be true called axioms. From those axioms, we can deduce other facts. If a fact is proven to be true given the axioms, it is called a theorem. Working in such a system, we can use theorems to prove other theorems. In this way, math builds on itself, using reasoning to accumulate more and more facts that follow from those initial assumptions. But this process relies on a few things to make sense: Your axioms and rules of reasoning must be \"sensible\", and you must apply them correctly in a proof. In this blog post, we will create a language for stating mathematical facts, a \"sensible\" set of rules for reasoning and, in the next post, a system that checks the correctness of proofs using those rules. We will be able to throw in whatever axioms we want and explore what facts we can prove from them.</p>\n\n<p>For this post, you actually won&rsquo;t need to know much math. It would help to be sort of familiar with proofs, logic, and sets, but we&rsquo;re going to be building math from the ground up, so you won&rsquo;t need much to start with.</p>\n\n<p>In this post, we will lay the foundation for our proof checker by creating a language for mathematical statements and a set of rules for proving statements. In part 2, we will implement a proof checker based on our language and rules.</p>\n\n<h1>1\n <tt>&nbsp;</tt><a name=\"(part._.A_.Language_for_.Facts)\"></a>A Language for Facts</h1>\n\n<p>In order to state facts, we need a language to write those facts in. For example, let&rsquo;s consider a statement written in English:</p>\n\n<p>\"All men are mortals. Socrates is a man. Therefore Socrates is mortal.\"</p>\n\n<p>What exactly is the relationship between these sentences? What do \"is\" and \"are\" mean? You can look up the definitions for \"is\" and \"are\" in a dictionary, but those definitions are in terms of other imprecise english words. What we want are some well-defined connectives for building statements and relating objects. To this end, we will use the language of first-order logic.</p>\n\n<p>A formula is a statement written in first-order logic. A formula \\(P,Q\\) is one of</p>\n\n<p>A variable</p>\n\n<p>\\[x\\]</p>\n\n<p>A universal quantification</p>\n\n<p>\\[\n\\forall x (P)\n\\]</p>\n\n<p>An existential quantification</p>\n\n<p>\\[\n\\exists x (P)\n\\]</p>\n\n<p>An implication (if-then)</p>\n\n<p>\\[\nP \\rightarrow Q\n\\]</p>\n\n<p>A conjunction (and)</p>\n\n<p>\\[\nP \\wedge Q\n\\]</p>\n\n<p>A disjunction (inclusive or)</p>\n\n<p>\\[\nP \\vee Q\n\\]</p>\n\n<p>A negation (not)</p>\n\n<p>\\[\n\\neg P\n\\]</p>\n\n<p>An operation. Like \\(x \\in y\\) for set membership or \\(x = y\\) for equality.</p>\n\n<p>A formula in first-order logic represents a mathematical statement of a fact that may or may not be true. I&rsquo;ll be using \"formula\" and \"statement\" somewhat interchangably, but remember that a statement is the idea of a fact, and a formula is a way of writing it down in our language. And not all formulas represent statements. Some formulas just represent objects that are being discussed in a statement.</p>\n\n<p>Let&rsquo;s go through each type of formula and think about what these statements mean:</p>\n\n<p>A variable is a name that represents some object, like a set.</p>\n\n<p>Universal quantification is used to make a statement about all things. \\(\\forall x (P)\\) means \"for all x, the statement P is true\", where \\(P\\) is some statement about \\(x\\). Here, \\(x\\) is a variable in our language, and \\(P\\) is a meta-variable representing some formula/statement in our language. This is a subtle distinction. When you see something like \\(x,y,z,S\\), that means a variable in our language, and when you see \\(P,Q,R\\), that means some formula, not literally the variable \\(P\\). So \\(x\\) is literally the formula \\(x\\), and \\(P\\) is a meta-variable representing some formula in our language.</p>\n\n<p>Existential quantification is used to say that there exists an object with some property. \\(\\exists x (P)\\) means \"there exists an x such that P is true\", where \\(P\\) says something about \\(x\\).</p>\n\n<p>Implication has a few uses. One is to make assumptions. \\(P \\rightarrow Q\\) means that if you assume that \\(P\\) is true, then \\(Q\\) must be true. This sounds like how we use axioms. Another use is to state implications directly. In the Socrates example, we want to say \"All men are mortals\". To state that fact in our language, we can say \\(\\forall x (x \\in men \\rightarrow x \\in mortals)\\), which means that being in the set of men implies being in the set of mortals. In other words, being a man implies being a mortal. This pattern of an implication in a forall is very common. Often times, we don&rsquo;t want to make a direct statement about all things, but rather all things with some property. \\(\\forall x (P \\rightarrow Q)\\) means \"for all x where P is true, Q is true.\"</p>\n\n<p>Conjunction (and) is used to state that two facts are both true. \\(P \\wedge Q\\) is true when both \\(P\\) is true and \\(Q\\) is true.</p>\n\n<p>Disjunction (inclusive or) is used to state that one fact or another fact are true, or both. \\(P \\vee Q\\) is true when \\(P\\) is true, \\(Q\\) is true, or they&rsquo;re both true.</p>\n\n<p>A negation (not) is used to state that a fact is not true. \\(\\neg P\\) is true when \\(P\\) is not true.</p>\n\n<p>We mentioned set membership \\(\\in\\), but we haven&rsquo;t defined it. Operators like \\(\\in\\) aren&rsquo;t part of the fundamental language of first-order logic, and the rules of logic are independent from the definitions of operators. We&rsquo;ll see how they fit in later. I only include statements about sets in our examples so we can have something concrete to state facts about. Otherwise, it&rsquo;s very abstract and hard to think about. For now, let&rsquo;s just say that a set is a collection of objects and \\(x \\in y\\) means that \\(x\\) is in the set \\(y\\).</p>\n\n<p>Let&rsquo;s look at some examples to get a feel for this language:</p>\n\n<p>\\[\\forall x (\\exists S (x \\in S))\\]</p>\n\n<p>This means \"For all x, there exists S such that x is an element of S\". This is saying that for any object, there is a set containing that object. This is not saying that there is only one such set, just that there is at least one.</p>\n\n<p>Here is another example:</p>\n\n<p>\\[\\forall x (\\forall S (x \\in S \\vee \\neg (x \\in S)))\\]</p>\n\n<p>This means \"For all x, for all S, x is an element of S or x is not an element of S\".</p>\n\n<p>Here is our socrates example written in this language:</p>\n\n<p>\\[\n(\\forall x (x \\in men \\rightarrow x \\in mortals) \\wedge socrates \\in men) \\rightarrow socrates \\in mortals\n\\]</p>\n\n<p>In English: \"If, for all things x, x being a member of the set of men implies that x is a member of the set of mortals and socrates is in the set of men, then socrates is in the set of mortals.\" Simplifying a little more, \"If being in the set of men implies being in the set of mortals and socrates is in the set of men, then socrates is in the set of mortals\". We state \"socrates is mortal\" with the formula \\(socrates \\in mortals\\), meaning \"socrates is in the set of mortals\".</p>\n\n<p>Let&rsquo;s think about what the variables in our statements really mean. In examples using set membership, variables represented sets and elements of sets. But we can also make statements like this:</p>\n\n<p>\\[\\forall x (x \\rightarrow x)\\]</p>\n\n<p>This means that \"for all x, if x is true, then x is true\". This is a statement about statements, rather than a statement about sets. And it feels like it should be true, so it&rsquo;s not nonsense. In fact, this is a completely valid statement. But if variables can represent statements and also objects like sets, then we can write nonsense like</p>\n\n<p>\\[\n\\forall x (\\forall S (x \\in (\\neg S)))\n\\]</p>\n\n<p>This is treating \\(S\\) as a statement and as a set, which is nonsense. Saying that an object is an element of a statement is meaningless.</p>\n\n<p>It&rsquo;s actually fine that we can write nonsense like this. We just have to make sure that our axioms and rules for reasoning don&rsquo;t allow us to prove nonsensical statements like that to be true. Or we can create a system in which statements like this actually have some meaning, which is also fine. We just have to keep in mind that variables can represent statements as well as other mathematical objects like sets.</p>\n\n<h1>2\n <tt>&nbsp;</tt><a name=\"(part._.Rules_for_.Reasoning)\"></a>Rules for Reasoning</h1>\n\n<p>We now have a language for stating mathematical facts. Now, we need a set of rules for proving that statements are true. These are our rules for reasoning.</p>\n\n<p>In order to prove anything interesting, we need to start out with some assumptions. Throughout a proof, we&rsquo;ll have some collection of assumptions which we&rsquo;ll use to prove some statements. We will represent this collection of assumptions with a context, often denoted with the greek letter \\(\\Gamma\\), pronounced \"gamma\". A context is a list of formulas which are assumed to be true statements. For example, in the socrates example, we assumed that all men are mortals and that socrates is a man. We could represent these assumptions as a context like this:</p>\n\n<p>\\[\n\\Gamma = \\forall x (x \\in men \\rightarrow x \\in mortals), socrates \\in men\n\\]</p>\n\n<p>In this case, \\(\\Gamma\\) is a list of two assumptions. If we want to make a statement under those assumptions, we&rsquo;d write it like this:</p>\n\n<p>\\[\n\\forall x (x \\in men \\rightarrow x \\in mortals), socrates \\in men \\vdash socrates \\in mortals\n\\]</p>\n\n<p>The turnstile symbol \\(\\vdash\\) separates the assumptions from the statement you&rsquo;re making. In general,</p>\n\n<p>\\[\n\\Gamma \\vdash P\n\\]</p>\n\n<p>means under the assumptions in the context \\(\\Gamma\\), \\(P\\) is true. This is called a judgement. Rather than proving statements directly, we will be proving judgements. For a theorem, \\(\\Gamma\\) would contain your axioms and \\(P\\) would be the statement of your theorem. Proving a theorem is proving your statement to be true assuming that the axioms are true.</p>\n\n<p>Let&rsquo;s think back to our original statement of the socrates example:</p>\n\n<p>\\[\n(\\forall x (x \\in men \\rightarrow x \\in mortals) \\wedge socrates \\in men) \\rightarrow socrates \\in mortals\n\\]</p>\n\n<p>One of the uses of implication is to encode the idea of an assumption. Isn&rsquo;t this the same as our judgement? Yes! In general, the judgement</p>\n\n<p>\\[\nP,Q,\\ldots \\vdash R\n\\]</p>\n\n<p>is equivalent to the statement</p>\n\n<p>\\[\nP \\wedge Q \\wedge \\ldots \\rightarrow R\n\\]</p>\n\n<p>We will represent this fact with two rules. One for proving an implication:</p>\n\n<p>\\[\n\\frac{\n\\Gamma, P \\vdash Q\n}{\n\\Gamma \\vdash P \\rightarrow Q\n} ({\\rightarrow} R)\n\\]</p>\n\n<p>and one for using a conjunction:</p>\n\n<p>\\[\n\\frac{\n\\Gamma, P, Q \\vdash R\n}{\n\\Gamma, P \\wedge Q \\vdash R\n} ({\\wedge} L)\n\\]</p>\n\n<p>Let&rsquo;s start out by talking about this notation for rules. We have two judgements separated by a line called an inference line, and we have the name of the rule to the right of the whole thing, like \\(({\\rightarrow} R)\\). The meaning of a rule written this way is, in order to prove the bottom judgement, you must prove the top judgement. I find it easiest to read these rules starting at the bottom and then the top. For our implication rule \\(({\\rightarrow} R)\\), we are saying that in order to prove that an implication \\(P \\rightarrow Q\\) is true using some assumptions \\(\\Gamma\\), it suffices to prove that \\(Q\\) is true if we add \\(P\\) to our list of assumptions. This is how we use implication to represent assumptions. It is literally baked in to our rules for reasoning.</p>\n\n<p>Now let&rsquo;s talk about that second rule, \\(({\\wedge} L)\\). This is saying that if we assume that a conjunction \\(P \\wedge Q\\) is true, we can assume that both statements are true and add both statements to our list of assumptions.</p>\n\n<p>A proof in this system will consist of a sequence of applications of rules until we reach a judgement that requires no sub-proofs to prove. We&rsquo;ll see how that works soon. This is all pretty abstract, so let&rsquo;s bring it back to our socrates example and sketch out a proof of that statement:</p>\n\n<p>We start out with this judgement:</p>\n\n<p>\\[\n\\vdash (\\forall x (x \\in men \\rightarrow x \\in mortals) \\wedge socrates \\in men) \\rightarrow socrates \\in mortals\n\\]</p>\n\n<p>Notice that there is nothing to the left of the turnstile. This means we are starting out with no assumptions. Now, to start proving this statement, we can use our rules:</p>\n\n<p>\\[\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n\\displaystyle\n\\cdots\n}{\n\\displaystyle\n\\forall x (x \\in men \\rightarrow x \\in mortals), socrates \\in men \\vdash socrates \\in mortals\n} (?)\n} {\n\\displaystyle\n\\forall x (x \\in men \\rightarrow x \\in mortals) \\wedge socrates \\in men \\vdash socrates \\in mortals\n} ({\\wedge} L)\n}{\n\\displaystyle\n\\vdash (\\forall x (x \\in men \\rightarrow x \\in mortals) \\wedge socrates \\in men) \\rightarrow socrates \\in mortals\n} ({\\rightarrow} R)\n\\]</p>\n\n<p>Remember, we read bottom up and the proof grows upward as we progress. We start out with no assumptions. We must prove an implication, so we use \\(({\\rightarrow} R)\\). Then, we have a conjunction in our assumptions, so we use \\(({\\wedge} L)\\) to add both statements to our assumptions. We don&rsquo;t know what to do next, so we&rsquo;ll leave it for now.</p>\n\n<p>I chose to name these rules \\(({\\rightarrow} R)\\) and \\(({\\wedge} L)\\) for a reason. You use \\(({\\rightarrow} R)\\) to prove that an implication is true, and you use \\(({\\wedge} L)\\) to use a conjunction in your assumptions. In fact, for all of our different types of formulas, there is an \\(L\\) rule for using it as an assumption and an \\(R\\) rule for proving that the statement is true. To make some more progress in our Socrates proof, let&rsquo;s define how we can use a universal quantification.</p>\n\n<p>Notice that we \"lost\" the conjunction assumption when we used \\(({\\wedge}L)\\). In this case, that&rsquo;s fine. But for other \\(L\\) rules, we might want to use an assumption more than once. Later on, we&rsquo;ll introduce a rule for duplicating assumptions.</p>\n\n<p>If we assume that a universal quantification \\(\\forall x (P)\\) is true, that means the statement \\(P\\) is true for any thing \\(x\\). In our example, we assume</p>\n\n<p>\\[\n\\forall x (x \\in men \\rightarrow x \\in mortals)\n\\]</p>\n\n<p>If we assume \\(\\forall x (x \\in men \\rightarrow x \\in mortals)\\), then we are assuming that this is true for all things. So this should also be true for socrates! In other words, we should be able to assume that</p>\n\n<p>\\[\nsocrates \\in men \\rightarrow socrates \\in mortals\n\\]</p>\n\n<p>What we just did is substitute \\(socrates\\) for \\(x\\) in the body of the quantification. In general, if we assume a universal quantification \\(\\forall x (P)\\) to be true, we should be able to substitute anything for \\(x\\) in \\(P\\) and assume that to be true. This is the \\(({\\forall} L)\\) rule:</p>\n\n<p>\\[\n\\frac{\n\\Gamma, P[t \\mathbin{/} x] \\vdash Q\n} {\n\\Gamma, \\forall x (P) \\vdash Q\n} ({\\forall} L)\n\\]</p>\n\n<p>where \\(P[t \\mathbin{/} x]\\) denotes substituting the formula \\(t\\) in place of the variable \\(x\\) in \\(P\\). \\(t\\) does not necessarily represent a statement, so we refer to it as a \"term\". Here, \\(t\\) can be any formula, not just a variable.</p>\n\n<p>This is sometimes referred to as \"instantiating\" the universal quantification with a particular term \\(t\\).</p>\n\n<p>Cool! Let&rsquo;s use this in our Socrates proof:</p>\n\n<p>\\[\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n\\displaystyle\n\\cdots\n}{\n\\displaystyle\nsocrates \\in men \\rightarrow socrates \\in mortals, socrates \\in men \\vdash socrates \\in mortals\n} (?)\n}{\n\\displaystyle\n\\forall x (x \\in men \\rightarrow x \\in mortals), socrates \\in men \\vdash socrates \\in mortals\n} ({\\forall} L)\n}{\n\\displaystyle\n\\forall x (x \\in men \\rightarrow x \\in mortals) \\wedge socrates \\in men \\vdash socrates \\in mortals\n} ({\\wedge} L)\n}{\n\\displaystyle\n\\vdash (\\forall x (x \\in men \\rightarrow x \\in mortals) \\wedge socrates \\in men) \\rightarrow socrates \\in mortals\n} ({\\rightarrow} R)\n\\]</p>\n\n<p>Our \\(({\\forall} L)\\) rule is written as if the universal quantification has to be the last element of the context, but order of assumptions doesn&rsquo;t matter, so it can be anywhere in the context for the rule to be applicable. Later on, we&rsquo;ll justify this be adding a rule that allows us to re-order the asusmptions of the context.</p>\n\n<p>We&rsquo;re one step closer! Now we have an implication in our context of assumptions. How do we use that?</p>\n\n<p>Remember, the direct interpretation of the implication \\(P \\rightarrow Q\\) being true is that \\(P\\) being true implies that \\(Q\\) is true. In other words, if we assume that \\(P \\rightarrow Q\\) is true and we prove that \\(P\\) is true, then we should be able to assume that \\(Q\\) is true. This is the \\(({\\rightarrow L})\\) rule:</p>\n\n<p>\\[\n\\frac{\n\\Gamma \\vdash P \\qquad \\Gamma, Q \\vdash R\n}{\n\\Gamma, P \\rightarrow Q \\vdash R\n} ({\\rightarrow} L)\n\\]</p>\n\n<p>This means that when we assume an implication \\(P \\rightarrow Q \\) and we&rsquo;re trying to prove that some statement \\(R\\) is true, if we can prove the antecedent \\(P\\) is true, then we can assume the consequent \\(Q\\) is true and use it to prove \\(R\\). This is an example of a rule which requires two subproofs instead of just one. We have to prove \\(P\\) before we can assume \\(Q\\) to prove \\(R\\).</p>\n\n<p>Let&rsquo;s use it in our proof:</p>\n\n<p>\\[\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\\cdots}{socrates \\in men \\vdash socrates \\in men} (?) \\qquad \\frac{\\cdots}{socrates \\in mortals, socrates \\in men \\vdash socrates \\in mortals} (?)\n}{\n\\displaystyle\nsocrates \\in men \\rightarrow socrates \\in mortals, socrates \\in men \\vdash socrates \\in mortals\n} ({\\rightarrow} L)\n}{\n\\displaystyle\n\\forall x (x \\in men \\rightarrow x \\in mortals), socrates \\in men \\vdash socrates \\in mortals\n} ({\\forall} L)\n}{\n\\displaystyle\n\\forall x (x \\in men \\rightarrow x \\in mortals) \\wedge socrates \\in men \\vdash socrates \\in mortals\n} ({\\wedge} L)\n}{\n\\displaystyle\n\\vdash (\\forall x (x \\in men \\rightarrow x \\in mortals) \\wedge socrates \\in men) \\rightarrow socrates \\in mortals\n} ({\\rightarrow} R)\n\\]</p>\n\n<p>We&rsquo;re almost done!</p>\n\n<p>For our remaining subproofs, the statement we&rsquo;re trying to prove is actually in the context of assumptions! If we assume that a statement is true, we don&rsquo;t need to do any more work to prove that it is true. This is the \\((I)\\) rule.</p>\n\n<p>\\[\n\\frac{}{\\Gamma,P \\vdash P} (I)\n\\]</p>\n\n<p>Notice that there are no subproofs. In fact, all valid proofs will end with rules like this one, which have no subproofs. In this way, a proof is a tree of inferences, where each node is a judgement and an application of a rule, and its children are the sub-proofs required by the rule. The leaves of this tree are applications of rules like \\((I)\\) which require no subproofs. We&rsquo;ll come back to this fact when we implement our proof checker. For now, let&rsquo;s just realize that proofs are tree-like.</p>\n\n<p>Let&rsquo;s finish up our proof:</p>\n\n<p>\\[\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{}{socrates \\in men \\vdash socrates \\in men} (I) \\qquad \\frac{}{socrates \\in mortals, socrates \\in men \\vdash socrates \\in mortals} (I)\n}{\n\\displaystyle\nsocrates \\in men \\rightarrow socrates \\in mortals, socrates \\in men \\vdash socrates \\in mortals\n} ({\\rightarrow} L)\n}{\n\\displaystyle\n\\forall x (x \\in men \\rightarrow x \\in mortals), socrates \\in men \\vdash socrates \\in mortals\n} ({\\forall} L)\n}{\n\\displaystyle\n\\forall x (x \\in men \\rightarrow x \\in mortals) \\wedge socrates \\in men \\vdash socrates \\in mortals\n} ({\\wedge} L)\n}{\n\\displaystyle\n\\vdash (\\forall x (x \\in men \\rightarrow x \\in mortals) \\wedge socrates \\in men) \\rightarrow socrates \\in mortals\n} ({\\rightarrow} R)\n\\]</p>\n\n<p>We did it! Now we know for sure that Socrates is mortal! That is, as long as our assumptions are true and our rules for reasoning make sense.</p>\n\n<p>We started out with an imprecise english statement of a fact. Then, we translated the statement into a precise mathematical language. Finally, we have proven that the statement is true using a set of simple rules that make intuitive sense.</p>\n\n<p>Now, let&rsquo;s write down the rules for all the types of formulas:</p>\n\n<p>We already figured out \\(({\\forall} L)\\):</p>\n\n<p>\\[\n\\frac{\n\\Gamma, P[t \\mathbin{/} x] \\vdash Q\n} {\n\\Gamma, \\forall x (P) \\vdash Q\n} ({\\forall} L)\n\\]</p>\n\n<p>What about \\(({\\forall} R)\\)? How do we prove that something is true about all things? In order to do that, we can instantiate the forall with some new variable that has no current meaning and no assumptions about it. Here&rsquo;s what this looks like:</p>\n\n<p>\\[\n\\frac{\n\\Gamma \\vdash P[y \\mathbin{/} x]\n}{\n\\Gamma \\vdash \\forall x (P)\n} ({\\forall} R)\n\\]</p>\n\n<p>We must add the restriction that \\(y\\) must not be mentioned anywhere in our context of assumptions \\(\\Gamma\\) or our statement \\(\\forall x (P)\\). More precisely, \\(y\\) must not occur free in \\(\\Gamma\\) or \\(\\forall x (P)\\). We&rsquo;ll define what that means later. This restriction is necessary because if we are proving that \\(P\\) is true for all \\(x\\), we must be able to prove \\(P[y \\mathbin{/} x]\\) without knowing or assuming anything about \\(y\\). This makes sense because if we prove that it is true for \\(y\\) without knowing anything about \\(y\\), then \\(y\\) could&rsquo;ve been anything and we could&rsquo;ve used the exact same proof.</p>\n\n<p>For example,</p>\n\n<p>\\[\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n}{\n\\displaystyle\ny \\vdash y\n} (I)\n}{\n\\displaystyle\n\\vdash y \\rightarrow y\n} ({\\rightarrow} R)\n}{\n\\displaystyle\n\\vdash \\forall x (x \\rightarrow x)\n} ({\\forall} R)\n\\]</p>\n\n<p>If \\(y\\) was some other statement, even nonsense, we could&rsquo;ve used the exact same proof structure:</p>\n\n<p>\\[\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n}{\n\\displaystyle\n(x \\in \\neg x) \\vdash (x \\in \\neg x)\n} (I)\n}{\n\\displaystyle\n\\vdash (x \\in \\neg x) \\rightarrow (x \\in \\neg x)\n} ({\\rightarrow} R)\n\\displaystyle\n\\]</p>\n\n<p>Now let&rsquo;s do \\({\\exists} L\\). If we assume that \\(\\exists x (P)\\) is true, then we know that there exists at least one thing \\(x\\) such that \\(P\\) is true. How can we use this assumption? We can instantiate the quantifier! We can introduce some new variable \\(y\\) representing the thing that exists, and add an assumption \\(P[y \\mathbin{/} x]\\) stating that the statement \\(P\\) is true for \\(y\\). Similar to \\(({\\forall} R)\\), \\(y\\) must not occur free in the context \\(\\Gamma\\) or \\(\\exists x (P)\\). All we are allowed to assume about \\(y\\) is that \\(P[y \\mathbin{/} x]\\) is true. That&rsquo;s all we know about it.</p>\n\n<p>\\[\n\\frac{\n\\Gamma, P[y \\mathbin{/} x] \\vdash Q\n}{\n\\Gamma, \\exists x (P) \\vdash q\n} ({\\exists} L)\n\\]</p>\n\n<p>This rule is dual to \\(({\\forall} R)\\). It&rsquo;s the same thing, except everything is happening to the left of the turnstile instead of the right. Proving a \\(\\forall\\) is dual to using an \\(\\exists\\). Pretty cool!</p>\n\n<p>Unsurprisingly, the rule \\(({\\exists} R)\\) is dual to \\(({\\forall} L)\\):</p>\n\n<p>\\[\n\\frac{\n\\Gamma \\vdash P[t \\mathbin{/} x]\n}{\n\\Gamma \\vdash \\exists x (P)\n} ({\\exists} R)\n\\]</p>\n\n<p>In order to prove an existential \\(\\exists x (P)\\), you must substitute some term \\(t\\) for \\(x\\) in \\(P\\) and prove that \\(t\\) makes the statement true. In other words, to prove that something exists with a property, you give an example and prove that it has the property! And for the duality, proving an \\(\\exists\\) is dual to using a \\(\\forall\\).</p>\n\n<p>We figured out \\({\\wedge} L\\). What about \\(({\\wedge} R)\\)? How do we prove \\(P \\wedge Q\\)? We prove \\(P\\) and we prove \\(Q\\)!</p>\n\n<p>\\[\n\\frac{\n\\Gamma \\vdash P \\qquad \\Gamma \\vdash Q\n}{\n\\Gamma \\vdash P \\wedge Q\n} ({\\wedge} R)\n\\]</p>\n\n<p>Makes sense. Unsurprisingly, the disjuncion rules are dual to these conjunction rules:</p>\n\n<p>\\[\n\\frac{\n\\Gamma,P \\vdash R \\qquad \\Gamma,Q \\vdash R\n}{\n\\Gamma,P \\vee Q \\vdash R\n} ({\\vee} L)\n\\]</p>\n\n<p>This one is a little confusing on first glance. Let&rsquo;s think about what this means: We assume \\(P \\vee Q\\) is true. So we assume that either \\(P\\) is true, \\(Q\\) is true, or they&rsquo;re both true. If we want to use this assumption, we need to handle each possible case (the case where they&rsquo;re both true is implicitly handled). Thus, we need a separate proof for each case.</p>\n\n<p>\\(({\\vee} R)\\) actually has two rules:</p>\n\n<p>\\[\n\\frac{\n\\Gamma \\vdash P\n}{\n\\Gamma \\vdash P \\vee Q\n} ({\\vee} R1)\n\\]</p>\n\n<p>\\[\n\\frac{\n\\Gamma \\vdash Q\n}{\n\\Gamma \\vdash P \\vee Q\n} ({\\vee} R2)\n\\]</p>\n\n<p>Since a disjunction is true when either statement is true, proving a disjunction only requires proving one of the statements. In a proof, you can choose whichever statement is easier to prove.</p>\n\n<p>Why isn&rsquo;t this dual to \\(({\\wedge} L)\\)? It could have been. We could have written that as two rules as well:</p>\n\n<p>\\[\n\\frac{\n\\Gamma, P, \\vdash R\n}{\n\\Gamma, P \\wedge Q \\vdash R\n} ({\\wedge} L1)\n\\]</p>\n\n<p>\\[\n\\frac{\n\\Gamma, Q, \\vdash R\n}{\n\\Gamma, P \\wedge Q \\vdash R\n} ({\\wedge} L2)\n\\]</p>\n\n<p>But, with another rule we&rsquo;ll introduce later which allows us to duplicate assumptions, we&rsquo;ll see that \\(({\\wedge} L)\\) is equivalent to applying that duplication rule, \\(({\\wedge} L1)\\), and then \\(({\\wedge} L2)\\). So we might as well always do both.</p>\n\n<p>We already have both rules for implication.</p>\n\n<p>All that&rsquo;s left is negation, which is a little weird. Negation says that a statement is false. How can we use that as an assumption? If we assume that a statement is false and show that this assumption leads to that statement being true, we have reached a contradiction. The statement can&rsquo;t be both true and false. If we can reach a contradiction, all bets are off.</p>\n\n<p>\\[\n\\frac{\n\\Gamma \\vdash P\n}{\n\\Gamma, \\neg P \\vdash Q\n} ({\\neg} L)\n\\]</p>\n\n<p>If we assume that \\(P\\) is false and prove that it is true, we have a contradiction. We can use this contradiction to prove anything. This can be seen by the fact that we prove \\(Q\\), which could be anything, by proving \\(P\\).</p>\n\n<p>And how do we prove a negation \\(\\neg P\\)?</p>\n\n<p>\\[\n\\frac{\n\\Gamma, P \\vdash \\forall x (x)\n}{\n\\Gamma \\vdash \\neg P\n} ({\\neg} R)\n\\]</p>\n\n<p>We assume that \\(P\\) is true and prove that this leads to a contradiction. This means it must be false. We choose \\(\\forall x (x)\\) to represent \"false\" or \"contradiction\" because it&rsquo;s the simplest statement that is impossible to prove unless you reach a contradiction like \\(x \\wedge \\neg x\\). This rule is the essence of a proof by contradiction.</p>\n\n<p>Now, we have rules for every type of formula. One for using it as an assumption and one for proving it (actually, two for proving \\(\\vee\\)). We also have a special rule, \\((I)\\), for when the statement we want to prove is already assumed to be true.</p>\n\n<p>I also mentioned some rules for duplicating and re-ordering assumptions. These are called structural rules. Here they are:</p>\n\n<p>\\[\n\\frac{\n\\Gamma,P,P \\vdash Q\n}{\n\\Gamma,P \\vdash Q\n} (CL)\n\\]</p>\n\n<p>This allows us to duplicate assumptions so we don&rsquo;t have to \"lose\" them when we use them. All of our \\(L\\) rules replace the used assumption with something else. But the more assumptions we have, the easier it is to prove things. So we will implicitly invoke this rule when we invoke \\(L\\) rules to avoid losing assumptions.</p>\n\n<p>\\[\n\\frac{\n\\Gamma_1,Q,P,\\Gamma_2 \\vdash R\n}{\n\\Gamma_1,P,Q,\\Gamma_2 \\vdash R\n} (PL)\n\\]</p>\n\n<p>This allows us to permute, or reorder our assumptions. In other words, the order of assumptions does not matter.</p>\n\n<p>These two rules allow us to treat the context of assumptions as a set where we pretty much just keep adding assumptions as we go up the inference tree.</p>\n\n<p>We can also forget assumptions if we don&rsquo;t need them:</p>\n\n<p>\\[\n\\frac{\n\\Gamma \\vdash Q\n}{\n\\Gamma,P \\vdash Q\n} (WL)\n\\]</p>\n\n<p>This is valid because if we can prove that \\(Q\\) is true without assuming \\(P\\), then that is also a valid proof if you assume \\(P\\).</p>\n\n<p>Another rule we can add for convenience is the \\((Cut)\\) rule:</p>\n\n<p>\\[\n\\frac{\n\\Gamma \\vdash Q \\qquad \\Gamma,Q \\vdash P\n}{\n\\Gamma \\vdash P\n} (Cut)\n\\]</p>\n\n<p>This means if we prove some auxiliary statement \\(Q\\), often called a lemma, we can use it as an assumption to prove our original statement \\(P\\). This rule is technically not necessary. It can be shown that any proof that uses it can be translated to a proof that doesn&rsquo;t use it. But is often convenient to have and can save us from duplicating proofs. This rule also allows us to build up our knowledge. For example, if we think of \\(Q\\) as a theorem, this means if we prove a theorem, we can assume that the theorem is true to prove new theorems.</p>\n\n<p>Let&rsquo;s think a little more about \\(\\forall x (x)\\). This is saying that all statements are true, which is obviously false. If we can prove that this statement is true, and thus use it as an assumption with \\((Cut)\\), we can use \\(({\\forall}L)\\) to prove anything. This would essentially be proving that false is true, which is a contradiction. This is an example of why a contradiction can be used to prove anything, which hopefully makes \\(({\\neg}L)\\) seem less weird.</p>\n\n<p>For those who want to learn more about this kind of system of rules, look up \"Sequent Calculus\".</p>\n\n<h2>2.1\n <tt>&nbsp;</tt><a name=\"(part._.Tying_up_.Loose_.Ends)\"></a>Tying up Loose Ends</h2>\n\n<p>Now, let&rsquo;s tie up some loose ends. First, let&rsquo;s talk about free variables and substitution.</p>\n\n<p>In the formula \\(\\forall x (P)\\), we say that \\(x\\) is bound in \\(P\\). In other words, \\(x\\) is in scope for the formula \\(P\\). This means that when \\(P\\) references the variable \\(x\\), it is specifically referring to the universally quantified variable \\(x\\). For example, in the formula \\(\\forall x (x \\rightarrow x)\\), the \\(x\\) in the implication is the universally quantified \\(x\\). In contrast, if we consider the formula \\(x \\wedge y\\) in isolation, \\(x\\) and \\(y\\) have no meaning. They are free variables. They are not bound. We say that \\(x\\) occurs free in \\(x \\wedge y\\) and \\(x\\) occurs bound in \\(\\forall x (x \\rightarrow x)\\). In other words, a variable occurs free in an expression when it is referenced in a place where it is not bound by anything like a quantification.</p>\n\n<p>Let&rsquo;s define this for each type of formula:</p>\n\n<p>Let&rsquo;s say we&rsquo;re asking whether the variable \\(x\\) occurs free in some formula.</p>\n\n<p>For a variable formula, \\(x\\) occurs free in the formula if the formula is \\(x\\). For example, \\(x\\) occurs free in the formula \\(x\\), but \\(x\\) does not occur free in the formula \\(y\\).</p>\n\n<p>For a quantification, if the name of the quantified variable is \\(x\\), then \\(x\\) does not occur free. For example, \\(x\\) does not occur free in \\(\\forall x (x \\rightarrow x)\\) because its references are bound by the quantifier. In contrast, \\(x\\) does occur free in \\(\\forall y (x \\rightarrow x)\\) because the quantifier does not bind \\(x\\). So, in general, \\(x\\) occurs free in a quantifier if the quantified variable is not \\(x\\) and \\(x\\) occurs free in the body formula.</p>\n\n<p>For a connective or an operator like \\(P \\rightarrow Q\\), \\(x\\) occurs free in that formula if \\(x\\) occurs free in any of the sub-formulas.</p>\n\n<p>Here are some more examples:</p>\n\n<p>The variables \\(x\\) and \\(y\\) both occur free in \\(x \\wedge y\\).</p>\n\n<p>The variable \\(z\\) does not occur free in \\(x \\wedge y\\).</p>\n\n<p>The variable \\(x\\) does not occur free in \\(\\forall x (x \\wedge y)\\), but the variable \\(y\\) does.</p>\n\n<p>The variable \\(x\\) occurs free in \\(x \\wedge \\forall x (x)\\). Although it is bound in the forall, it is also referenced outside of the forall, where it is free.</p>\n\n<p>A variable occurs free in a context if it occurs free in any formula in the context.</p>\n\n<p>Hopefully, the restrictions on \\(({\\forall} R)\\) and \\(({\\exists} L)\\) make sense now. If \\(y\\) occurred free in the context, we&rsquo;d know something about \\(y\\).</p>\n\n<p>Now, let&rsquo;s talk about substitution. Recall that the notation for substitution is \\(P[t \\mathbin{/} x]\\), meaning replace \\(x\\) with the term \\(t\\) in the formula \\(P\\). For example, \\((x \\wedge y)[z \\rightarrow z \\mathbin{/} x]\\) would be \\((z \\rightarrow z) \\wedge y\\). Let&rsquo;s define substitution:</p>\n\n<p>For a variable formula, \\(x[t \\mathbin{/} x]\\) becomes \\(t\\). But if the variable is different, \\(y[t \\mathbin{/} x]\\) is just \\(y\\).</p>\n\n<p>For a quantification, \\((\\forall y (P))[t \\mathbin{/} x]\\) becomes \\(\\forall y (P[t \\mathbin{/} x])\\). We just substitute in the body. But if the quantified variable is \\(x\\), we don&rsquo;t substitute. So \\((\\forall x (P))[t \\mathbin{/} x]\\) stays \\(\\forall x (P)\\). This is because we only want to substitute free variables. Since \\(x\\) takes on a new meaning in the body of the quantifier, it shouldn&rsquo;t get substituted. Another problem is that the quantified variable could occur free in \\(t\\). For example, in the subtitution \\((\\forall y (y \\wedge x))[y \\mathbin{/} x]\\), we get \\(\\forall y (y \\wedge y)\\). We substituted a free variable \\(y\\) for \\(x\\), but it ended up bound after the subtitution. This is a problem because \\(y\\) could mean something outside of this quantification, but when it gets substituted in, its meaning gets changed to the universally quantified variable. This problem is known as name capture. For now, we will just say that this substitution is illegal.</p>\n\n<p>For a connective or operator like \\(P \\rightarrow Q\\), we just substitute in each sub-formula.</p>\n\n<p>Another thing we briefly mentioned is equivalence. What does it mean for two statements to be equivalent? There are a few ways to interpret this. We can define equivalence to mean that two formulas must be identical. But this is unnecessarily restrictive. Under this definition, \\(x \\wedge y\\) would not be equivalent to \\(y \\wedge x\\) even though those two statements feel like they should be equivalent. Another way of defining equivalence is that \\(P\\) and \\(Q\\) are equivalent if \\(P\\) is true when \\(Q\\) is true and vice versa. Symbolically, \\((P \\rightarrow Q) \\wedge (Q \\rightarrow P)\\). This also means that if one statement is false, the other must be false. Our equivalence statement is true when both statements are true or when both statements are false. This is called a bidirectional implication, written \\(P \\leftrightarrow Q\\), and this is our notion of equivalent statements. We can prove that statements like \\(x \\wedge y\\) and \\(y \\wedge x\\) are equivalent by proving that bidirectional implication. People often read \\(\\leftrightarrow\\) as \"if and only if\".</p>\n\n<p>This notion of equivalence is useful, but it only makes sense for statements because implication and conjunction only make sense for statements. What if we want to say that two sets are the same? Or that two numbers are the same? We need a notion of equality to state that two objects are the same. How should we define equality?</p>\n\n<p>First let&rsquo;s define how we can write down an equality. We will write an equality like \\(t_1 = t_2\\), where \\(t_1\\) and \\(t_2\\) are \"terms\". A term is just a formula, but we use the word \"term\" when the formula might represent some object like a set or a number, not necessarily a statement.</p>\n\n<p>Ok, now that we have a way to state an equality, how should we define it? Let&rsquo;s start by listing some properties we want equality to have: Equality should be reflexive. So \\(x = x\\). Equality should be symmetric, so \\(x = y \\rightarrow y = x\\). Equality should also be transitive, so \\(x = y \\wedge y = z \\rightarrow x = z\\). Another useful property to have is the subsitution property of equality. For example, if we have two equations,  \\(x = y + 1\\) and \\(x + y = 2\\), we should be able to substitute the first equation into the second and get \\(y + 1 + y = 2\\). Now that we have some general idea of how we want our equality operator to behave, let&rsquo;s write some rules:</p>\n\n<p>A good first step is to make \\(L\\) and \\(R\\) rules, just like our logical connectives. Let&rsquo;s start with \\(({=}R)\\). How do we prove that two things are equal? In the simplest case, it should always be true that something is equal to itself. That&rsquo;s our reflexive property. As a rule, we write</p>\n\n<p>\\[\n\\frac{}{\\Gamma \\vdash t = t} ({=}R)\n\\]</p>\n\n<p>Like \\((I)\\), this requires no subproofs. Before we think about other ways we might prove that two things are equal, let&rsquo;s think about how we can use an assumed equality. If we assume that \\(x = y\\), we can use the substitution property of equality to substitute \\(x\\) with \\(y\\) or vice versa. Anywhere we see an \\(x\\), we can replace it with a \\(y\\). In a proof, we&rsquo;d run this substitution on the statement we&rsquo;re trying to prove. Here is the rule:</p>\n\n<p>\\[\n\\frac{\\Gamma \\vdash P[t \\mathbin{/} x]}{\\Gamma,x=t \\vdash P} ({=}L)\n\\]</p>\n\n<p>What about symmetry and transitivity? They actually follow from these two rules! Let&rsquo;s prove that this is true, starting with symmetry:</p>\n\n<p>\\[\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{}{\\vdash y=y} ({=}R)\n}{\n\\displaystyle\nx=y \\vdash y=x\n} ({=}L)\n\\]</p>\n\n<p>We substituted \\(y\\) for \\(x\\) in the equation we&rsquo;re trying to prove. Now for transitivity:</p>\n\n<p>\\[\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n}{\ny=z \\vdash y=z\n} (I)\n}{\n\\displaystyle\nx=y,y=z \\vdash x=z\n} ({=}L)\n\\]</p>\n\n<p>Cool! But there is a slight problem. Since substitution is only defined for replacing a variable, if we want to use an equation with non-variable terms on both sides like \\(x + y = y + x\\), we wouldn&rsquo;t be able to substitute these two terms for each other. To fix this, let&rsquo;s extend our definition of substitution to be able to replace terms as well as variables.</p>\n\n<p>We will add a case: \\(t_1[t_2 \\mathbin{/} t_1]\\) becomes \\(t_2\\). If the whole formula is identical to the term we&rsquo;re replacing, we just replace the whole formula. For example, \\((x \\rightarrow y)[a \\wedge b \\mathbin{/} x \\rightarrow y]\\) becomes \\(a \\wedge b\\).</p>\n\n<p>The variable case and the simple connectives cases stay the same (although the variable case is no longer necessary). For quantifiers,  the rule \\(\\forall x (P)[t \\mathbin{/} x]\\) remains unchanged, but \\(\\forall y (P)[t \\mathbin{/} x]\\) becomes \\(\\forall y (P[t \\mathbin{/} x])\\). We needed to add that case where the variable being replace is the same as the quantified variable because we only wanted to substitute free occurrences of the variable, and the quantifier binds the variable, giving it a new meaning. To generalize this to term subsitution, \\((\\forall x (P))[t_2 \\mathbin{/} t_1]\\) will remain unchanged if \\(x\\) occurs free in \\(t_1\\), otherwise it will become \\(\\forall x (P[t_2 \\mathbin{/} t_1])\\). For example, \\((\\forall x (x \\wedge (x \\rightarrow y)))[z \\mathbin{/} x \\rightarrow y]\\) remains \\(\\forall x (x \\wedge (x \\rightarrow y))\\) because \\(x\\) occurs free in \\(x \\rightarrow y\\). And again, to avoid name capture, the substitution is illegal if \\(x\\) occurs free in \\(t_2\\).</p>\n\n<p>Now that we have extended our definition of substitution, we can write a more general \\(({=}L)\\) rule:</p>\n\n<p>\\[\n\\frac{\\Gamma \\vdash P[t_2 \\mathbin{/} t_1]}{\\Gamma,t_1=t_2 \\vdash P} ({=}L)\n\\]</p>\n\n<p>We just extended our language to include equality and all we needed to do was add a rule for how to prove an equality and a rule for how to use an equality. This is a common pattern.</p>\n\n<p>We now have a language for stating mathematical facts, a set of rules for proving statements in that language, and an idea of how to extend it as needed to incorporate new kinds of statements. Now, let&rsquo;s explore how to apply this system to do some math!</p>\n\n<h1>3\n <tt>&nbsp;</tt><a name=\"(part._.Theories)\"></a>Theories</h1>\n\n<h2>3.1\n <tt>&nbsp;</tt><a name=\"(part._.Set_.Theory)\"></a>Set Theory</h2>\n\n<p>Let&rsquo;s talk about sets. What is a set? Intuitively, we think of a set as an unordered collection of things. Something is either in a set or not in a set. We will write set membership like \\(x \\in S\\), which means \\(x\\) is an element of the set \\(S\\). This is a new type of formula in our language. Last time we added something new, equality, we added rules for how to prove it and how to use it as an assumption. For set membership, we won&rsquo;t be doing that. You can&rsquo;t really use the fact that an object is in a set on its own like you could with an equality. There is also no inherent way to prove set membership like there is for equality. Instead, we will write some axioms that describe the nature of set membership. This is how we will define what a set is. We will be using some of the axioms of Zermelo-Fraenkel set theory.</p>\n\n<p>First up, we have the axiom of extensionality:</p>\n\n<p>\\[\n\\forall x (\\forall y ([\\forall z (z \\in x \\leftrightarrow z \\in y)] \\rightarrow x = y))\n\\]</p>\n\n<p>That&rsquo;s pretty dense. Let&rsquo;s translate to English: For any two objects \\(x\\) and \\(y\\), if, for all objects \\(z\\), \\(z \\in x\\) if and only if \\(z \\in y\\), then \\(x\\) and \\(y\\) are the same set. In other words, two sets are equal when they have the same elements.</p>\n\n<p>Next, we have the axiom of empty set:</p>\n\n<p>\\[\n\\exists \\emptyset (\\forall x (\\neg (x \\in \\emptyset)))\n\\]</p>\n\n<p>This states that there exists a set with no elements.</p>\n\n<p>Next, we have the axiom of pairing:</p>\n\n<p>\\[\n\\forall x (\\forall y (\\exists z (\\forall e (e \\in z \\leftrightarrow e = x \\vee e = y))))\n\\]</p>\n\n<p>This is saying that, for any two things \\(x\\) and \\(y\\), there exists a set \\(z\\) containing exactly those two objects.</p>\n\n<p>Next, we have the axiom of union:</p>\n\n<p>\\[\n\\forall F (\\exists A (\\forall Y (\\forall x ((x \\in Y \\wedge Y \\in F) \\leftrightarrow x \\in A))))\n\\]</p>\n\n<p>Here, \\(F\\) is some set of sets, \\(Y\\) is an element of \\(F\\), \\(x\\) is an element of \\(Y\\), and \\(A\\) is the union of sets that are elements of \\(F\\). All this is saying is that for all sets of sets \\(F\\), there exists some set \\(A\\) that is the union of all sets that are elements of \\(F\\). For example, if we had \\(F = \\{\\{a,b,c\\}, \\{b,c,d\\}, \\{a\\}\\}\\), we&rsquo;d have \\(A = \\{a,b,c,d\\}\\). The property that defines \\(A\\) is that elements of \\(A\\) are elements of elements of \\(F\\).</p>\n\n<p>Next, we have the axiom of power set:</p>\n\n<p>\\[\n\\forall x (\\exists y (\\forall z ([\\forall e (e \\in z \\rightarrow e \\in x)] \\leftrightarrow z \\in y)))\n\\]</p>\n\n<p>The power set of a set \\(x\\) is the set of all subsets of \\(x\\). \\(z\\) is a subset of \\(x\\) if and only if every element of \\(x\\) is an element of \\(z\\). That&rsquo;s what \\(\\forall e (e \\in z \\rightarrow e \\in x)\\) is saying. For example, the power set of \\(\\{1,2,3\\}\\) is \\(\\{\\{\\}, \\{1\\}, \\{2\\}, \\{3\\}, \\{1,2\\}, \\{1,3\\}, \\{2,3\\}, \\{1,2,3\\}\\}\\). Notice that the empty set \\(\\{\\}\\) and the set itself \\(\\{1,2,3\\}\\) are subsets of \\(\\{1,2,3\\}\\). This axiom is saying that for all sets \\(x\\), the power set of \\(x\\), \\(y\\), exists.</p>\n\n<p>Next, we have the axiom schema of specification:</p>\n\n<p>Let \\(P\\) be some formula with free variables \\(x,z,w_1,w_2,\\ldots,w_n\\) where \\(y\\) does not occur free in \\(P\\).</p>\n\n<p>\\[\n\\forall z (\\forall w_1 (\\forall w_2 (\\ldots \\forall w_n (\\exists y (\\forall x (x \\in y \\leftrightarrow (x \\in z \\wedge P)))))))\n\\]</p>\n\n<p>This is hard to read, but the idea is actually quite simple. If we have some set \\(z\\), there exists a set \\(y\\) which is a subset of \\(z\\) that contains elements of \\(z\\) that have some property \\(P\\). We often see this written like \\(y = \\{x \\in z : P\\}\\). In other words, we can construct a set \\(y\\) from a set \\(z\\) by \"filtering\" its elements. You might be wondering why we can&rsquo;t just construct a set \\(\\{x : P\\}\\) of all objects with some property. If we allowed that, we could write \\(\\{x : \\neg (x \\in x)\\}\\). This is the set of all sets that do not contain themselves. This is Russel&rsquo;s paradox and it leads to a contradiction. To avoid this, we restrict ourselves to constructing subsets of existing sets.</p>\n\n<p>This is called an axiom schema because there is an axiom for every formula \\(P\\) where \\(y\\) does not occur free.</p>\n\n<p>There are more axioms in Zermelo-Fraenkel set theory, but we&rsquo;ll stick to these for now.</p>\n\n<p>These axioms describe what equality means for sets and states what sets can exist. We can express ideas like subsets, power sets, intersections, and unions using logic and our membership operator.</p>\n\n<p>How can we use these axioms to prove things about sets? For the axioms, we can just put them in our context of assumptions. For an axiom schema like the axiom schema of specification, we can use a rule:</p>\n\n<p>\\[\n\\frac{\n\\Gamma,\\exists y (\\forall x (x \\in y \\leftrightarrow (x \\in z \\wedge P))) \\vdash Q\n}{\n\\Gamma \\vdash Q\n} (Spec)\n\\]</p>\n\n<p>With the restriction that \\(y\\) does not occur free in \\(P\\)</p>\n\n<p>This allows us to add the axiom (with the foralls of \\(z\\) and the free variables already instantiated) for some formula \\(p\\) to our context at any time.</p>\n\n<p>As an example, let&rsquo;s prove the existence of binary set intersections. That is, given two sets, there exists a set whose elements are in both sets. We&rsquo;ll use the axiom schema of specification.</p>\n\n<p>\\[\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{}{\n\\displaystyle\nd \\in c \\leftrightarrow (w \\in a \\wedge w \\in b) \\vdash d \\in c \\leftrightarrow (w \\in a \\wedge w \\in b)\n} (I)\n}{\n\\displaystyle\n\\forall x (x \\in c \\leftrightarrow (x \\in a \\wedge x \\in b)) \\vdash d \\in c \\leftrightarrow (w \\in a \\wedge w \\in b)\n} ({\\forall}L)\n}{\n\\displaystyle\n\\forall x (x \\in c \\leftrightarrow (x \\in a \\wedge x \\in b)) \\vdash  \\forall w (w \\in c \\leftrightarrow (w \\in a \\wedge w \\in b))\n} ({\\forall}R)\n}{\n\\displaystyle\n\\forall x (x \\in c \\leftrightarrow (x \\in a \\wedge x \\in b)) \\vdash \\exists z (\\forall w (w \\in z \\leftrightarrow (w \\in a \\wedge w \\in b)))\n} ({\\exists}R)\n}{\n\\displaystyle\n\\exists y (\\forall x (x \\in y \\leftrightarrow (x \\in a \\wedge x \\in b))) \\vdash \\exists z (\\forall w (w \\in z \\leftrightarrow (w \\in a \\wedge w \\in b)))\n} ({\\exists}L)\n}{\n\\displaystyle\n\\vdash \\exists z (\\forall w (w \\in z \\leftrightarrow (w \\in a \\wedge w \\in b)))\n} (Spec)\n}{\n\\displaystyle\n\\vdash \\forall y (\\exists z (\\forall w (w \\in z \\leftrightarrow (w \\in a \\wedge w \\in y))))\n} ({\\forall}R)\n}{\n\\displaystyle\n\\vdash \\forall x (\\forall y (\\exists z (\\forall w (w \\in z \\leftrightarrow (w \\in x \\wedge w \\in y)))))\n} ({\\forall}R)\n\\]</p>\n\n<p>We used specification on the set \\(a\\) and our property \\(P\\) was \\(x \\in b\\).</p>\n\n<p>You might be wondering where symbols like \\(\\subseteq\\) and curly brace notation \\(\\{\\}\\) is. We actually don&rsquo;t need it. We can express these ideas in terms of logic and the membership \\(\\in\\) operator. But it is convenient to be able to write things down with custom notation, and as long as we&rsquo;re careful, this won&rsquo;t break anything.</p>\n\n<p>We can introduce a notation by introducing an axiom that defines its meaning. For example, for subset, we can introduce the axiom</p>\n\n<p>\\[\n\\forall x (\\forall y (x \\subseteq y \\leftrightarrow \\forall z (z \\in x \\rightarrow z \\in y)))\n\\]</p>\n\n<p>This is just defining a new operator in terms of existing operators.</p>\n\n<p>For something like curly brace notation \\(\\{x,y,z\\}\\), we can think of it as a variadic operator. Its defining property is</p>\n\n<p>\\[\n\\forall x_1 (\\forall x_2 (\\ldots \\forall x_n (\\forall y (y \\in \\{x_1,x_2,\\ldots,x_n\\} \\leftrightarrow y = x_1 \\vee y = x_2 \\vee \\ldots \\vee y = x_n))))\n\\]</p>\n\n<p>We can&rsquo;t write a single axiom for this since we want an axiom for each \\(n\\). So we can add a rule instead like for the axiom schema of specification.</p>\n\n<p>This is an example of constructive notation. Unlike \\(\\subseteq\\), which is just shorthand for a formula, this is shorthand for an object. Another example of constructive notation is binary set intersection \\(x \\cap y\\). We can define it like this:</p>\n\n<p>\\[\n\\forall x (\\forall y (\\forall z (z \\in x \\cap y \\leftrightarrow z \\in x \\wedge z \\in y)))\n\\]</p>\n\n<p>We have to be careful when we introduce constructive notation like this. Notation should just be shorthand. It shouldn&rsquo;t allow us to prove anything that we couldn&rsquo;t prove before. So if you introduce notation that is shorthand for an object with some property, you should first prove that an object with that property exists without using the notation. In math, we call this a conservative extension of our theory. For set intersection, we should prove</p>\n\n<p>\\[\n\\forall x (\\forall y (\\exists w (\\forall z (z \\in w \\leftrightarrow z \\in x \\wedge z \\in y))))\n\\]</p>\n\n<p>We can prove this using the axiom schema of specification, as we did above.</p>\n\n<p>Unrestricted set comprehension is an example of a notational definition that is not a conservative extension:</p>\n\n<p>\\[\n\\forall x (x \\in \\{x : P\\} \\leftrightarrow P)\n\\]</p>\n\n<p>Where \\(x\\) occurs free in \\(P\\). This constructs the set of all objects that satisfy some property \\(P\\). To see why this is a problem, let&rsquo;s construct the set</p>\n\n<p>\\[\n\\{x : \\neg (x \\in x)\\}\n\\]</p>\n\n<p>This is the set of all sets that do not contain themselves, whose existence leads to Russel&rsquo;s paradox. We took great care to prevent us from being able to prove the existence of this set because it leads to a contradiction. Without this notation, it would be impossible to prove this set&rsquo;s existence. But now, it can be proven. This is an example of why we should make sure our notational definitions are conservative extensions.</p>\n\n<p>There is another, more artificial problem with that notation: In the previous operators, in order to compute free variables and substitution, we can just recur on the sub-formulas. But here, if we tried to substitute something for \\(x\\) in a comprehension, we wouldn&rsquo;t want the \\(x\\) to be replaced. This notation is like a quantification over x. Are we going to have to specify free variables and substitution on every operator we define? Let&rsquo;s keep things simple for now and restrict ourselves to operators that don&rsquo;t bind any variables. It is possible to allow for this kind of notation, but it will complicate the implementation.</p>\n\n<p>Before we move on, let&rsquo;s take a step back and think about what we did to express set theory in our system. We wrote down some axioms and defined some operators. We also added some rules. Some of these axioms were fundamental, like the axiom of empty set. Others were conservative extensions, like the definition of the subset operator \\(\\subseteq\\) and curly braces. This is how we will express theories in our system. A theory is just a collection of axioms, operators, and rules.</p>\n\n<h2>3.2\n <tt>&nbsp;</tt><a name=\"(part._.Natural_.Numbers)\"></a>Natural Numbers</h2>\n\n<p>We talked about sets, now let&rsquo;s finally talk about numbers! Specifically, natural numbers. That is, \\(0,1,2,3,\\ldots\\).</p>\n\n<p>We&rsquo;ll start out by stating that the constant \\(zero\\) is a natural number. To do that, we&rsquo;ll introduce a new operator, \\(N\\). This is a unary operator, which means it has one argument. \\(N(x)\\) means that \\(x\\) is a natural number.</p>\n\n<p>Our first axiom states that 0 is a natural number:</p>\n\n<p>\\[N(zero)\\]</p>\n\n<p>We are defining the number zero to be the free variable \\(zero\\).</p>\n\n<p>So far so good. We will also introduce a successor operation, \\(S\\), which is another unary operator. \\(S(x)\\) is the successor of \\(x\\). We define the number 1 to be the successor of 0, \\(S(zero)\\). And we define 2 to be the successor of 1, \\(S(S(zero))\\). And so on. The successor operation behaves like adding 1.</p>\n\n<p>Our second axiom states that the natural numbers are closed under succession:</p>\n\n<p>\\[\\forall n (N(n) \\rightarrow N(S(n)))\\]</p>\n\n<p>If \\(n\\) is a natural number, then its successor is a natural number.</p>\n\n<p>Our third axiom tells us about equality of natural numbers:</p>\n\n<p>\\[\\forall n (\\forall m (N(n) \\wedge N(m) \\rightarrow (S(n) = S(m) \\rightarrow n = m)))\\]</p>\n\n<p>If the successors of two natural numbers are equal, then the two numbers are equal.</p>\n\n<p>We also state that 0 is not the successor of any natural number:</p>\n\n<p>\\[\\forall n (N(n) \\rightarrow \\neg (S(n) = zero))\\]</p>\n\n<p>Finally, we have the axiom schema of induction:</p>\n\n<p>Let \\(P\\) be some formula where \\(n\\) does not occur free.</p>\n\n<p>\\[[P[zero \\mathbin{/} x] \\wedge \\forall n (P[n \\mathbin{/} x] \\rightarrow P[S(n) \\mathbin{/} x])] \\rightarrow \\forall x (N(x) \\rightarrow P)\\]</p>\n\n<p>If \\(P\\) is true for 0 and, for all natural numbers \\(n\\), \\(P\\) being true for \\(n\\) implies that \\(P\\) is true for \\(S(n)\\), then \\(P\\) is true for all natural numbers. This is how we prove that things are true for all natural numbers. Here is the rule:</p>\n\n<p>\\[\n\\frac{\n\\Gamma \\vdash P[zero \\mathbin{/} x]\n\\qquad\n\\Gamma, N(n), P[n \\mathbin{/} x] \\vdash P[S(n) \\mathbin{/} x]\n}{\n\\Gamma \\vdash \\forall x (N(x) \\rightarrow P)\n} (NatInd)\n\\]</p>\n\n<p>With the restriction that \\(n\\) does not occur free in \\(P\\). This form follows from the axiom schema if we apply some rules.</p>\n\n<p>These are the peano axioms for natural numbers. Normally, people also include axioms that assert reflexive, symmetric, and transitive equality, and that natural numbers are closed under equality \\(\\forall n (\\forall a ((N(n) \\wedge n = a) \\rightarrow N(a)))\\), but these all follow from our definition of equality, so we don&rsquo;t need these axioms.</p>\n\n<p>We can define addition and multiplication by adding two operators \\(+,\\cdot\\) and some axioms:</p>\n\n<p>\\[\\forall a (N(a) \\rightarrow a + 0 = a)\\]\n\\[\\forall a (\\forall b(N(a) \\wedge N(b) \\rightarrow a + S(b) = S(a + b)))\\]\n\\[\\forall a (N(a) \\rightarrow a \\cdot  0 = 0)\\]\n\\[\\forall a (\\forall b(N(a) \\wedge N(b) \\rightarrow a \\cdot S(b) = a + a \\cdot b))\\]</p>\n\n<p>For some intuition, let&rsquo;s look at some examples:</p>\n\n<p>\\[a + S(S(S(zero)))\\]\n\\[S(a + S(S(zero)))\\]\n\\[S(S(a + S(zero)))\\]\n\\[S(S(S(a + zero)))\\]\n\\[S(S(S(a)))\\]</p>\n\n<p>\\(a + b\\) just applies \\(S\\) to \\(a\\) \\(b\\) times. So addition is repeated succession.</p>\n\n<p>\\[a \\cdot S(S(S(zero)))\\]\n\\[a + a \\cdot S(S(zero))\\]\n\\[a + a + a \\cdot S(zero)\\]\n\\[a + a + a + a \\cdot zero\\]\n\\[a + a + a + zero\\]\n\\[a + a + a\\]</p>\n\n<p>\\(a \\cdot b\\) just adds \\(a\\) to itself \\(b\\) times. So multiplication is repeated addition.</p>\n\n<p>If you want some practice, prove that the natural numbers are closed under addition: \\(\\forall a(N(a) \\rightarrow \\forall b (N(b) \\rightarrow N(a + b)))\\). Hint: you only need to do induction on \\(b\\).</p>\n\n<p>Now we see how we can use our system to talk about pretty much any area of math. In this post, we built a foundation for mathematics where we can make statements and prove them. In the next part, we will implement this system in code so we can have a computer automatically check our proofs.</p>\n\n<h1>4\n <tt>&nbsp;</tt><a name=\"(part._.Extras)\"></a>Extras</h1>\n\n<p>Here is some extra exploration of the concepts in this post:</p>\n\n<h2>4.1\n <tt>&nbsp;</tt><a name=\"(part._.Natural_.Numbers_as_.Sets)\"></a>Natural Numbers as Sets</h2>\n\n<p>We can actually define natural numbers in terms of sets. And all we need to do is add a few axioms:</p>\n\n<p>\\[\nzero = \\{\\}\n\\]</p>\n\n<p>\\[\n\\forall n (S(n) = \\bigcup \\{n, \\{n\\}\\})\n\\]</p>\n\n<p>Where \\(\\bigcup\\) denotes the union of a set&rsquo;s elements, like in the axiom of union. To define this operator, we&rsquo;ll add the axiom</p>\n\n<p>\\[\n\\forall F (\\forall x (x \\in \\bigcup F \\leftrightarrow \\exists Y (x \\in Y \\wedge Y \\in F)))\n\\]</p>\n\n<p>This means that</p>\n\n<p>\\[\n0 = \\{\\}\n\\]</p>\n\n<p>\\[\n1 = \\{\\{\\}\\} = \\{0\\}\n\\]</p>\n\n<p>\\[\n2 = \\{\\{\\}, \\{\\{\\}\\}\\} = \\{0,1\\}\n\\]</p>\n\n<p>\\[\n3 = \\{\\{\\}, \\{\\{\\}\\}, \\{\\{\\}, \\{\\{\\}\\}\\}\\} = \\{0,1,2\\}\n\\]</p>\n\n<p>Each natural number is the set of all lesser natural numbers.</p>\n\n<p>Rather than \\(S\\) being a primitive operator, it is now defined in terms of union and our curly brace notation, which is defined in terms of logic and set membership.</p>\n\n<p>We can also define \\(N\\) in terms of sets:</p>\n\n<p>\\[\\forall n (N(n) \\leftrightarrow n = \\{\\} \\vee \\exists m (N(m) \\wedge n = S(m)))\\]</p>\n\n<p>This definition is equivalent to the original definition under our new axioms. (We need to use induction to prove the equivalence though).</p>\n\n<p>Now that we have notation, we can more easily express the axiom of infinity, one of the axioms we left out of our set theory:</p>\n\n<p>\\[\n\\exists X (\\{\\} \\in X \\wedge \\forall y (y \\in X \\rightarrow S(y) \\in X))\n\\]</p>\n\n<p>This axiom guarantees the existence of an infinite set. You might be surprised to see \\(S\\) show up in there, but now it&rsquo;s defined in terms of sets, so it is valid to use in set theory. But this looks like it&rsquo;s saying something about natural numbers. We can also see that zero, which we have now defined as \\(\\{\\}\\), shows up too. In fact, this set is a superset of the natural numbers! We can prove that all natural numbers are in this set by induction. To give an idea of the proof, 0 is in the set by the first condition \\(\\{\\} \\in X\\) and the second condition is basically an inductive case.</p>\n\n<p>We can then prove the existence of the set of natural numbers \\(\\mathbb{N}\\) using specification and the axiom of infinity:</p>\n\n<p>\\[\n\\exists \\mathbb{N} (\\forall n (n \\in \\mathbb{N} \\leftrightarrow (n \\in X \\wedge N(n))))\n\\]</p>\n\n<p>Where \\(X\\) is the set from the axiom of infinity.</p>\n\n<p>This, combined with the fact that all natural numbers are in \\(X\\), allows us to add the axiom</p>\n\n<p>\\[\n\\forall n (n \\in \\mathbb{N} \\leftrightarrow N(n))\n\\]</p>\n\n<p>Another thing we get for free by defining things in terms of set theory is comparison \\(&lt;\\). Our definition of natural numbers leads to the fact that every natural number is the set of all natural numbers less than itself. This means we can define natural number comparison in terms of set membership:</p>\n\n<p>\\[\n\\forall a (\\forall b (N(a) \\wedge N(b) \\rightarrow (a &lt; b \\leftrightarrow a \\in b)))\n\\]</p>\n\n<p>Another consequence of using set theory is that we can get rid of some of our axioms because they follow from our definitions and the axioms of set theory. We can get rid of the axioms that state zero is natural, the successor of a natural is a natural, successors being equal implies that the two numbers are equal (we need another set theory axiom for this, the axiom of regularity), and zero is not the successor of any natural. This means we only need the axioms that define \\(N,+,\\cdot\\) and the axiom schema of induction.</p>\n\n<p>Here is the axiom of regularity that I mentioned:</p>\n\n<p>\\[\n\\forall x (\\neg (x = \\emptyset) \\rightarrow \\exists y (y \\in x \\wedge y \\cap x = \\emptyset))\n\\]</p>\n\n<p>This means that every nonempty set has an element that doesn&rsquo;t overlap with itself. This, along with the axiom of pairing, guarantees that no set is an element of itself.</p>\n\n<p>Set theory is pretty cool! In fact, pretty much all modern mathematics can be expressed in terms of set theory. Real numbers can be defined in terms of rationals, which can be defined in terms of integers, which can be defined in terms of naturals, which can be defined in terms of sets. In geometry, shapes and lines can be defined in terms of sets of points in space. Points in space can be defined in terms of ordered pairs of real numbers, which can be defined in terms of sets. This is why people say that logic and set theory are the foundation of mathematics.</p>\n\n<p>You might be wondering why there is no predicate for sets like how we have \\(N\\) for naturals. In our set theory, we pretty much assume that everything is a set and that sets just contain other sets. These are called pure sets. You can also have a set theory that permits things that aren&rsquo;t sets to be elements of sets. If you want to learn more, look up urelements and Zermelo-Fraenkel set theory with atoms. In practice, since pretty much everything can be defined in terms of sets, pure sets are usually all you need!</p>\n\n<h2>4.2\n <tt>&nbsp;</tt><a name=\"(part._.Law_of_.Excluded_.Middle)\"></a>Law of Excluded Middle</h2>\n\n<p>These rules we wrote are an adaptation of the system LK. Our adaptation has a few problems though. In LK, in the same way that we have a list of assumptions that are conjoined (and) on the left of the turnstile, we have a list of statements we&rsquo;re trying to prove on the right side that are disjoined (or). In this system, judgements look like</p>\n\n<p>\\[\nP_1,P_2,\\ldots,P_n \\vdash Q_1,Q_2,\\ldots,Q_m\n\\]</p>\n\n<p>Which means assuming \\(P_1,P_2,\\ldots,P_n\\), at least one of \\(Q_1,Q_2,\\ldots,Q_m\\) is true. Our judgements are special cases where \\(m=1\\). In LK, there are some things that you can prove that you cannot prove with our rules. For example, the law of excluded middle:</p>\n\n<p>\\[\\vdash x \\vee \\neg x\\]</p>\n\n<p>In order to be complete with respect to LK, we need to modify some of our rules and add some more structural rules:</p>\n\n<p>\\[\n\\frac{\\Gamma, P \\vdash Q \\vee R}{\\Gamma \\vdash (P \\rightarrow Q) \\vee R} ({\\rightarrow}R^*)\n\\]\n\\[\n\\frac{\\Gamma, P \\vdash Q}{\\Gamma \\vdash \\neg P \\vee Q} ({\\neg}R^*)\n\\]</p>\n\n<p>This makes sense since \\((P \\rightarrow Q) \\leftrightarrow (\\neg P \\vee Q)\\).</p>\n\n<p>\\[\n\\frac{\\Gamma \\vdash P[y \\mathbin{/} x] \\vee Q}{\\Gamma \\vdash \\forall x (P) \\vee Q} ({\\forall}R^*)\n\\]\nWhere \\(y\\) does not occur free in \\(P\\).\n\\[\n\\frac{\\Gamma \\vdash P \\vee P}{\\Gamma \\vdash P} (CR)\n\\]\n\\[\n\\frac{\\Gamma \\vdash Q \\vee P}{\\Gamma \\vdash P \\vee Q} (PR)\n\\]</p>\n\n<p>With these rules, we are now complete with respect to LK. We can keep our old versions of the rules since they follow from the new versions. The new versions have stars next to their names so we can tell the difference. Here is the proof of the law of excluded middle:</p>\n\n<p>\\[\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{\n\\displaystyle\n\\frac{}{\n\\displaystyle\ny \\vdash y\n} (I)\n}{\n\\displaystyle\n\\vdash \\neg y \\vee y\n} ({\\neg}R^*)\n}{\n\\displaystyle\n\\vdash y \\vee \\neg y\n} (PR)\n}{\n\\displaystyle\n\\vdash \\forall x (x \\vee \\neg x)\n} ({\\forall}R)\n\\]</p>\n\n<p>Now that we can prove this, we can create the assumption \\(P \\vee \\neg P\\) \"out of thin air\" using \\(Cut\\). As an example of why this can be useful, if we&rsquo;re trying to prove something about natural numbers, we can create the assumption that the number is either even or not even (which implies that it&rsquo;s odd) and then handle both cases. Sometimes being able to do this makes a proof easier.</p>\n\n<h2>4.3\n <tt>&nbsp;</tt><a name=\"(part._.All_you_need_is____forall___and____rightarrow__)\"></a>All you need is \\(\\forall\\) and \\(\\rightarrow\\)</h2>\n\n<p>All you actually need for our language of statements is \\(\\forall\\) and \\(\\rightarrow\\) (and operators like \\(\\in\\) for theories). These equivalences show how our connectives can be defined in terms of these two things:</p>\n\n<p>\\[(\\neg p) \\leftrightarrow (p \\rightarrow \\forall x (x))\\]</p>\n\n<p>Let&rsquo;s think about why these two formulas are equivalent. When \\(\\neg P\\) is true, \\(P \\rightarrow \\forall x (x)\\) is also true. If we think about proving \\(\\neg P \\rightarrow (P \\rightarrow \\forall x (x))\\), we&rsquo;d end up with assumptions \\(\\neg P\\) and \\(P\\). We can use this to prove anything, including \\(\\forall x (x)\\). When \\(P \\rightarrow \\forall x (x)\\) is true, \\(P\\) must be false. If \\(P\\) was true, we&rsquo;d be able to prove \\(\\forall x (x)\\), which is a contradiction. If we think about proving \\((P \\rightarrow \\forall x (x)) \\rightarrow \\neg P\\), we&rsquo;d end up with assumptions \\(P\\) and \\(P \\rightarrow \\forall x (x)\\) and having to prove \\(\\forall x (x)\\), which can be done with \\(({\\rightarrow}L)\\).</p>\n\n<p>\\[\\exists x (P) \\leftrightarrow (\\neg \\forall x (\\neg P)) \\leftrightarrow ((\\forall x (P \\rightarrow \\forall x (x))) \\rightarrow \\forall x (x))\\]</p>\n\n<p>To understand this, let&rsquo;s think about \\(\\neg \\exists x (P)\\). This is saying that there does not exist an object with property \\(P\\). This is the same as saying that all objects don&rsquo;t have property \\(P\\), which can also be written as \\(\\forall x (\\neg p)\\). And the negation of that is equivalent to \\(\\neg \\neg \\exists x (P)\\), which is just \\(\\exists x (P)\\).</p>\n\n<p>\\[(P \\vee Q) \\leftrightarrow (\\neg P \\rightarrow Q) \\leftrightarrow ((P \\rightarrow \\forall x (x)) \\rightarrow Q)\\]</p>\n\n<p>To see why these two are equivalent, let&rsquo;s think about both directions. If \\(P \\vee Q\\) is true, then either \\(P\\) is true or \\(Q\\) is true (or both). If \\(P\\) is true, then we can prove \\(\\neg P \\rightarrow Q\\) by reaching a contradiction. If \\(Q\\) is true, we don&rsquo;t even need to use the \\(\\neg P\\) assumption to prove the \\(Q\\). In the other direction, let&rsquo;s assume \\(\\neg P \\rightarrow Q\\) is true. We know that either \\(P \\vee \\neg P\\) is true by the law of excluded middle. If \\(P\\) is true, then we can prove \\(P \\vee Q\\) with \\(P\\). If it is false, we can use the implication and the negation to get \\(Q\\).</p>\n\n<p>\\[(P \\wedge Q) \\leftrightarrow (\\neg (\\neg P \\vee \\neg Q)) \\leftrightarrow ((P \\rightarrow (Q \\rightarrow \\forall x (x))) \\rightarrow \\forall x (x))\\]</p>\n\n<p>Let&rsquo;s think about \\(\\neg (\\neg P \\vee \\neg Q)\\). \\(\\neg P \\vee \\neg Q\\) is true when either \\(P\\) or \\(Q\\) is false (or both). It is only false when neither are false. So \\(\\neg (\\neg P \\vee \\neg Q)\\) is true when neither \\(P\\) nor \\(Q\\) are false, which means they&rsquo;re both true \\(P \\wedge Q\\). This is one of DeMorgan&rsquo;s laws. The other is the dual: \\(P \\vee Q \\leftrightarrow \\neg (\\neg P \\wedge \\neg Q)\\).</p>\n\n<p>Negation is a little less weird in this system. \\(({\\neg}L)\\) makes more sense when you think about it in terms of \\(({\\rightarrow}L)\\). We prove \\(p\\) to reach a contradiction and then we get \\(\\forall x (x)\\) as an assumption, which lets us prove anything.</p>\n\n<p>Pretty cool.</p>")) ((? . 5) f post (u . "Computing Fibonacci Numbers in Logarithmic Time") (? . 5) 1744126109 (p+ #"/home/runner/work/blog/blog/repo/2024/08/computing-fibonacci-numbers-in-logarithmic-time.html" . unix) (u . "/blog/2024/08/computing-fibonacci-numbers-in-logarithmic-time.html") (u . "2024-08-09T13:15:59") (? . 4) (? . 14) (c (u . "math") c (u . "algorithms") c (u . "dynamic-programming") c (u . "JavaScript")) (u . "\n<p>In this post, we&rsquo;re going to implement an algorithm for computing the \\(n\\)th fibonacci number. We&rsquo;ll gradually optimize it and eventually end up with an algorithm that takes \\(O(\\log n)\\) steps, which is much better than the \\(n\\) steps that most implementations take. I&rsquo;ll assume some familiarity with complexity analysis. If you know big O notation, you&rsquo;ll be fine.</p>") #t (u . "\n<p>In this post, we&rsquo;re going to implement an algorithm for computing the \\(n\\)th fibonacci number. We&rsquo;ll gradually optimize it and eventually end up with an algorithm that takes \\(O(\\log n)\\) steps, which is much better than the \\(n\\) steps that most implementations take. I&rsquo;ll assume some familiarity with complexity analysis. If you know big O notation, you&rsquo;ll be fine.</p>\n<!-- more-->\n\n<h1 id=\"a-recursive-algorithm\">A Recursive Algorithm</h1>\n\n<p>The fibonacci sequence is defined recursively:</p>\n\n<p>$$ F_0 = 0 $$ $$ F_1 = 1 $$ $$ F_n = F_{n&ndash;1} + F_{n&ndash;2} $$</p>\n\n<p>Its elements are \\(0,1,1,2,3,5,8,13, \\ldots\\). Each term is the sum of the previous two. Let&rsquo;s translate this definition directly into code:</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">fibRecursive</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mf\">0</span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mf\">1</span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">fibRecursive</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">fibRecursive</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This works, but it&rsquo;s pretty inefficient. We&rsquo;re duplicating a lot of work. To see just how bad this is, let&rsquo;s think about each recursive call. Here is the call tree:</p>\n\n<pre><code>+ fibRecursive(4)\n+--+ fibRecursive(3)\n|  +--+ fibRecursive(2)\n|  |  +--- fibRecursive(1)\n|  |  +--- fibRecursive(0)\n|  +--- fibRecursive(1)\n|\n+--+ fibRecursive(2)\n   +--- fibRecursive(1)\n   +--- fibRecursive(0)</code></pre>\n\n<p>We end up doing all the work of <code>fibRecursive(2)</code> twice. For bigger inputs, there is even more duplicated.</p>\n\n<p>How many steps will this algorithm perform? The base cases only take 1 step, but the recursive case takes however many steps <code>fibRecursive(n-1)</code> takes, plus however many steps <code>fibRecursive(n-2)</code> takes, plus one to add the results together. Sound familiar? The number of steps this algorithm takes is basically \\(O(F_n)\\)! It&rsquo;s a little worse because of that plus one though. This is almost as bad as exponential runtime, which is really slow. We can do better.</p>\n\n<h2 id=\"dynamic-programming\">Dynamic Programming</h2>\n\n<p>Our recursive algorithm is slow because we re-compute the same things over and over again. What if we just remember the answer each time we compute a fibonacci number and then use our stored answer the second time around? This is caled memoization, which is a technique of dynamic programming.</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">savedFibs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"nb\">Map</span><span class=\"o\">&lt;</span><span class=\"kt\">number</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"o\">&gt;</span><span class=\"p\">()</span>\n<span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">fibMemo</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mf\">0</span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mf\">1</span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">savedFibs</span><span class=\"p\">.</span><span class=\"nx\">has</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">savedFibs</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">)</span><span class=\"o\">!</span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">fibMemo</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">fibMemo</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nx\">savedFibs</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">result</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">result</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Before we make a recursive call, we check if we&rsquo;ve already computed this fibonacci number, and if we have, just use the stored result. Otherwise, actually make the recursive call and store the result in <code>savedFibs</code> so we don&rsquo;t compute it again. How many steps does this take? We still compute every fibonacci number from \\(0 \\ldots n\\), but only once, so it&rsquo;s \\(O(n)\\), which is not bad! But there&rsquo;s still a problem.</p>\n\n<p>Although this algorithm is faster, we&rsquo;re using up memory storing all of these fibonacci numbers. We&rsquo;re using \\(O(n)\\) space since we store about \\(n\\) numbers in <code>savedFibs</code> when we compute the \\(n\\)th fibonacci number. Also, since our algorithm is recursive, we&rsquo;re taking up stack space while we make recursive calls. This is \\(O(n)\\) in both the original recursive algorithm and the memoized algorithm since we&rsquo;re going to have a call stack \\(n\\) calls deep at some point. Can we do better?</p>\n\n<p>Let&rsquo;s think about how <code>savedFibs</code> gets built up by running through <code>fibMemo(4)</code>. <code>fibMemo(4)</code> will call <code>fibMemo(3)</code>, which will call <code>fibMemo(2)</code>, which will call <code>fibMemo(1)</code> and <code>fibMemo(0)</code>, which will immediately return. We&rsquo;ll then compute that <code>fibMemo(2)</code> is 1 after adding the recursive calls, store that in <code>savedFibs</code>, and return to <code>fibMemo(3)</code>. Then, we&rsquo;ll compute <code>fibMemo(1)</code>, which will immediately return. Next, we&rsquo;ll compute that <code>fibMemo(3)</code> is 2 after adding up the recursive calls, store that in <code>savedFibs</code>, and return to <code>fibMemo(4)</code>. Then, we&rsquo;ll recursively call <code>fibMemo(2)</code> which will immediately return since its result is saved, we&rsquo;ll add up the recursive calls to determine that <code>fibMemo(4)</code> is 3, store that in <code>savedFibs</code>, and then finally return.</p>\n\n<p>In that example, <code>fibMemo(2) = 1</code> was stored, then <code>fibMemo(3) = 2</code>, then <code>fibMemo(4) = 3</code>. Although the computation is top-down with big inputs recursively calling on small inputs, our saved results end up being build bottom-up with the results of small inputs being stored first. When we call <code>fibMemo(n)</code>, we&rsquo;ll end up storing <code>fibMemo(2)</code>, then <code>fibMemo(3)</code>, then <code>fibMemo(4)</code>, and so on until we get up to <code>n</code>. What if we just built this up directly instead of doing recursive calls?</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">fibMemoBottomUp</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">savedFibs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mf\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"nx\">n</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">savedFibs</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">savedFibs</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"o\">-</span><span class=\"mf\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">savedFibs</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"o\">-</span><span class=\"mf\">2</span><span class=\"p\">])</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">savedFibs</span><span class=\"p\">[</span><span class=\"nx\">n</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>We&rsquo;re no longer recursive, but we still take up linear space because we&rsquo;re building an array with all of the fibonacci numbers. But we don&rsquo;t really need the whole array. We only ever need the last two elements, so let&rsquo;s only store those:</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">fibIterative</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mf\">0</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"c1\">// fib(i-2)</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">prev</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span>\n<span class=\"w\">  </span><span class=\"c1\">// fib(i-1)</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">current</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">1</span>\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"nx\">n</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// fib(i)</span>\n<span class=\"w\">    </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">next</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">prev</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">current</span>\n<span class=\"w\">    </span><span class=\"nx\">prev</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">current</span>\n<span class=\"w\">    </span><span class=\"nx\">current</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">next</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">current</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This is even better. Now we have linear runtime and constant space.</p>\n\n<p>Let&rsquo;s review what just happened. We started out with a simple recursive implementation that ended up being slow from duplicate computaitons. Then, we did some memoization to make it faster. Next, we converted our top-down memoization to bottom up. Finally, we realized that with our bottom-up method, we could perform an optimization to make our algorithm even more efficient. This pattern of recursive, memoized, bottom up, then optimized is very common in dynamic programming.</p>\n\n<p>Linear time is good, but what if I told you that it&rsquo;s possible to compute the \\(n\\)th fibonacci number in \\(O(\\log n)\\) steps? Sounds impossible, right? Don&rsquo;t we need to compute them in sequence? How could you do that faster than \\(O(n)\\)?</p>\n\n<h1 id=\"the-matrix\">The Matrix</h1>\n\n<p>Donald E. Knuth showed that the \\(n\\)th fibonacci number can be calculated with matrix multiplication:</p>\n\n<p>$$ \\begin{bmatrix} F_{n+1} &amp; F_n\\\\ F_n &amp; F_{n&ndash;1} \\end{bmatrix} = \\begin{bmatrix} 1 &amp; 1\\\\ 1 &amp; 0 \\end{bmatrix} ^ n $$</p>\n\n<p>To get an intuition for why this works, let&rsquo;s see the recursive step in action:</p>\n\n<p>$$ \\begin{bmatrix} F_{n+1} &amp; F_n\\\\ F_n &amp; F_{n&ndash;1} \\end{bmatrix}   \\begin{bmatrix} 1 &amp; 1\\\\ 1 &amp; 0 \\end{bmatrix} = \\begin{bmatrix} (1F_{n+1} + 1F_n) &amp; (1F_{n+1} + 0F_n)\\\\ (1F_n + 1F_{n&ndash;1}) &amp; (1F_n + 0F_{n&ndash;1}) \\end{bmatrix} = \\begin{bmatrix} F_{n+2} &amp; F_{n+1}\\\\ F_{n+1} &amp; F_{n} \\end{bmatrix} $$</p>\n\n<p>Multiplying by the matrix gives us the next step in the sequence. This matrix of zeros and ones causes matrix multiplication to add the numbers up in just the right way to compute fibonacci numbers.</p>\n\n<p>This is cool, but it doesn&rsquo;t help us beat linear runtime since exponentiation to the power of \\(n\\) requires \\(O(n)\\) multiplications. Or does it?</p>\n\n<h2 id=\"repeated-squaring\">Repeated Squaring</h2>\n\n<p>Let&rsquo;s say I want to compute \\(x^{16}\\). Instead of multiplying \\(x\\) with itself 16 times, we can just square it 4 times, which is 4 multiplications:</p>\n\n<p>$$ x^{16} = \\left(\\left(\\left(x^2\\right)^2\\right)^2\\right)^2 $$</p>\n\n<p>This little trick works nicely for exponents that are powers of 2, but what about other numbers like 10?</p>\n\n<p>$$ x^{10} = x^2 x^8 = x^2 \\left(\\left(x^2\\right)^2\\right)^2 $$</p>\n\n<p>That&rsquo;s 5 multiplications: 3 for \\(x^8\\), 1 for \\(x^2\\), and 1 to multiply them together. But if we avoid re-computing \\(x^2\\), we can get it down to 4. We can always avoid these re-computations by remembering smaller squarings as we go:</p>\n\n<p>$$ x^7 = x x^2 x^4 $$ $$ y = x^2 $$ $$ z = y^2 $$ $$ x^7 = xyz $$</p>\n\n<p>Sound familiar? This is another bottom-up approach to avoid duplicate computation.</p>\n\n<p>This only has 4 multiplications.</p>\n\n<p>Can we always split a number up like this? Yes! Every number can be broken down into a sum of powers of two. That&rsquo;s exactly what a number&rsquo;s binary representation is:</p>\n\n<p>$$ 12 = 1 \\cdot 8 + 1 \\cdot 4 + 0 \\cdot 2 + 0 \\cdot 1 = 1100_2 $$</p>\n\n<p>In general, the number of multiplications necessary for \\(x^n\\) with our repeated squaring algorithm is \\(O(\\log n)\\) (specifically \\(\\log_2\\)) since that&rsquo;s how many squarings we need to perform, and the number of multiplications to combine squarings is similar.</p>\n\n<p>Let&rsquo;s implement this for numbers before we do matrices:</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">pow</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">n</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">product</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">1</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">square</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">x</span>\n<span class=\"w\">  </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">remainder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mf\">2</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">remainder</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"nx\">product</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"nx\">square</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">floor</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nx\">square</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">square</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">square</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">product</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>We&rsquo;re essentially converting the number to binary, from least significant to most significant digits (right to left). If there is a 1-digit at that point in the number&rsquo;s binary representation, we multiply the accumulated product by the current squaring of \\(x\\). In each iteration, we square again. The <code>square</code> variable stores \\(x\\), then \\(x^2\\), then \\((x^2)^2\\), and so on. This allows us to avoid re-computing squares. This is a bottom-up, iterative algorithm similar to our last fibonacci algorithm.</p>\n\n<p>Now let&rsquo;s implement <code>pow</code> for matrices:</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span>\n<span class=\"normal\">44</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">matPow</span><span class=\"p\">(</span><span class=\"nx\">M</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">[][],</span><span class=\"w\"> </span><span class=\"nx\">n</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"c1\">// assume M is a square matrix</span>\n<span class=\"w\">  </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">M</span><span class=\"p\">.</span><span class=\"nx\">length</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">product</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">identity</span><span class=\"p\">(</span><span class=\"nx\">size</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">square</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">M</span>\n<span class=\"w\">  </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">remainder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mf\">2</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">remainder</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"nx\">product</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">matMul</span><span class=\"p\">(</span><span class=\"nx\">product</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">square</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">floor</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nx\">square</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">matMul</span><span class=\"p\">(</span><span class=\"nx\">square</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">square</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">product</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">matMul</span><span class=\"p\">(</span><span class=\"nx\">A</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">[][],</span><span class=\"w\"> </span><span class=\"nx\">B</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">[][])</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"c1\">// assume A,B are square matrices of the same size to keep things simple</span>\n<span class=\"w\">  </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">A</span><span class=\"p\">.</span><span class=\"nx\">length</span>\n<span class=\"w\">  </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">product</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">r</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"nx\">size</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">r</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">row</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">c</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"nx\">size</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">c</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">dot</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span>\n<span class=\"w\">      </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"nx\">size</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nx\">dot</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"nx\">A</span><span class=\"p\">[</span><span class=\"nx\">r</span><span class=\"p\">][</span><span class=\"nx\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">B</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">c</span><span class=\"p\">]</span>\n<span class=\"w\">      </span><span class=\"p\">}</span>\n<span class=\"w\">      </span><span class=\"nx\">row</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">dot</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nx\">product</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">row</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">product</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Identity matrix</span>\n<span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">identity</span><span class=\"p\">(</span><span class=\"nx\">size</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">[][]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">M</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">r</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"nx\">size</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">r</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">row</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Array</span><span class=\"p\">(</span><span class=\"nx\">size</span><span class=\"p\">).</span><span class=\"nx\">fill</span><span class=\"p\">(</span><span class=\"mf\">0</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nx\">row</span><span class=\"p\">[</span><span class=\"nx\">r</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">1</span>\n<span class=\"w\">    </span><span class=\"nx\">M</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">row</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">M</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>It&rsquo;s pretty much the same thing, except we use matrix operations instead of standard numeric ones.</p>\n\n<h1 id=\"putting-it-all-together\">Putting it All Together</h1>\n\n<p>Now, we can use our efficient exponentiation algorithm to raise our fibonacci matrix to the \\(n\\)th power:</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">M</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mf\">1</span><span class=\"p\">,</span><span class=\"mf\">1</span><span class=\"p\">],</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mf\">1</span><span class=\"p\">,</span><span class=\"mf\">0</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">fibMat</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">matPow</span><span class=\"p\">(</span><span class=\"nx\">M</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">n</span><span class=\"p\">)[</span><span class=\"mf\">0</span><span class=\"p\">][</span><span class=\"mf\">1</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>That&rsquo;s it! Since <code>matPow</code> has \\(O(\\log n)\\) runtime and constant space, so does our new and improved fibonacci algorithm.</p>")) ((? . 6) f post (u . "Matching Regular Expressions by Computing Their Derivatives") (? . 6) 1744126109 (p+ #"/home/runner/work/blog/blog/repo/2022/11/matching-regular-expressions-by-computing-their-derivatives.html" . unix) (u . "/blog/2022/11/matching-regular-expressions-by-computing-their-derivatives.html") (u . "2022-11-05T16:01:01") (? . 15) (? . 7) (c (u . "racket") c (u . "tutorials")) (u . "\n<p>Regular expressions allow us to describe patterns in text. They are very useful and show up all over the place in programming,\nbut matching regular expressions can be difficult. One well-known technique for matching regular expressions is converting the regular\nexpression to a finite state machine. This is pretty elegant, but can get complicated and messy.</p>\n\n<p>An alternative technique, which is the subject of this blog post, involves something called a Brzozowski derivative. This technique can be\nused to compute the derivative of a generalized regular expression.</p>") #t (u . "\n<p>Regular expressions allow us to describe patterns in text. They are very useful and show up all over the place in programming,\nbut matching regular expressions can be difficult. One well-known technique for matching regular expressions is converting the regular\nexpression to a finite state machine. This is pretty elegant, but can get complicated and messy.</p>\n\n<p>An alternative technique, which is the subject of this blog post, involves something called a Brzozowski derivative. This technique can be\nused to compute the derivative of a generalized regular expression.</p>\n<!--more-->\n\n<h1>1\n <tt>&nbsp;</tt><a name=\"(part._.The_.Derivative_of_a_.Regular_.Expression_)\"></a>The Derivative of a Regular Expression?</h1>\n\n<p></p>\n\n<div class=\"SIntrapara\">The derivative of a regular expression <span class=\"RktSym\">re</span> with respect to a character (or string) <span class=\"RktSym\">c</span> is another regular expression which matches strings that,\nwhen appended to <span class=\"RktSym\">c</span>, are matches of <span class=\"RktSym\">re</span>. Here are a few examples:\n</div>\n\n<div class=\"SIntrapara\">\n <ul>\n  <li>\n   <p>The derivative of <span class=\"RktVal\">#rx\"abc\"</span> with respect to <span class=\"RktVal\">#\\a</span> is <span class=\"RktVal\">#rx\"bc\"</span></p></li>\n  <li>\n   <p>The derivative of <span class=\"RktVal\">#rx\"(ab)|(xy)\"</span> with respect to <span class=\"RktVal\">#\\a</span> is <span class=\"RktVal\">#rx\"b\"</span>. The second alternative is eliminated</p></li>\n  <li>\n   <p>The derivative of <span class=\"RktVal\">#rx\"(abc)*\"</span> with respect to <span class=\"RktVal\">#\\a</span> is <span class=\"RktVal\">#rx\"bc(abc)*\"</span></p></li>\n  <li>\n   <p>The derivative of <span class=\"RktVal\">#rx\"b\"</span> with respect to <span class=\"RktVal\">#\\a</span> is a regular expression that has no matches ever.</p></li></ul></div>\n\n<p>We take the derivative of a regular expression with respect to a string by repeatedly taking the derivative of the regular expression with respect to each character.</p>\n\n<p>That&rsquo;s the idea. If the derivative of the regular expression with respect to the target string is a regular expression which matches the empty string, we have a match.</p>\n\n<p>We will represent regular expressions with racket datums:</p>\n\n<p></p>\n\n<table cellpadding=\"0\" cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td align=\"right\" valign=\"baseline\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktVar\">rx</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"center\" valign=\"baseline\">=</td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"RktSym\">character</span></td></tr>\n  <tr>\n   <td align=\"right\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"center\" valign=\"baseline\">|</td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"RktVal\">'</span><span class=\"RktVal\">empty</span></td></tr>\n  <tr>\n   <td align=\"right\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"center\" valign=\"baseline\">|</td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span></td></tr>\n  <tr>\n   <td align=\"right\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"center\" valign=\"baseline\">|</td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">or</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktVar\">rx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVar\">rx</span><span class=\"RktPn\">)</span></td></tr>\n  <tr>\n   <td align=\"right\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"center\" valign=\"baseline\">|</td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">and</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktVar\">rx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVar\">rx</span><span class=\"RktPn\">)</span></td></tr>\n  <tr>\n   <td align=\"right\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"center\" valign=\"baseline\">|</td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">not</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktVar\">rx</span><span class=\"RktPn\">)</span></td></tr>\n  <tr>\n   <td align=\"right\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"center\" valign=\"baseline\">|</td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktVar\">rx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVar\">rx</span><span class=\"RktPn\">)</span></td></tr>\n  <tr>\n   <td align=\"right\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"center\" valign=\"baseline\">|</td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktVar\">rx</span><span class=\"RktPn\">)</span></td></tr></tbody></table>\n\n<ul>\n <li>\n  <p><span class=\"RktSym\">character</span> matches the character <span class=\"RktSym\">character</span></p></li>\n <li>\n  <p><span class=\"RktVal\">'</span><span class=\"RktVal\">empty</span> matches the empty string</p></li>\n <li>\n  <p><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span> doesn&rsquo;t match any strings</p></li>\n <li>\n  <p><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktVal\">'</span><span class=\"RktVal\">or</span><span class=\"stt\"> </span><span class=\"RktSym\">a</span><span class=\"stt\"> </span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span> matches strings that match <span class=\"RktSym\">a</span> or <span class=\"RktSym\">b</span></p></li>\n <li>\n  <p><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktVal\">'</span><span class=\"RktVal\">and</span><span class=\"stt\"> </span><span class=\"RktSym\">a</span><span class=\"stt\"> </span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span> matches strings that match <span class=\"RktSym\">a</span> and <span class=\"RktSym\">b</span>. This is a feature that most regular expression implementations do not support.</p></li>\n <li>\n  <p><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktVal\">'</span><span class=\"RktVal\">not</span><span class=\"stt\"> </span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span> matches strings that do not match <span class=\"RktSym\">a</span>. This is a feature that most regular expression implementations do not support.</p></li>\n <li>\n  <p><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktVal\">'</span><span class=\"RktVal\">seq</span><span class=\"stt\"> </span><span class=\"RktSym\">a</span><span class=\"stt\"> </span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span> matches strings that can be partitioned into a substring that matches <span class=\"RktSym\">a</span> followed by a substring that matches <span class=\"RktSym\">b</span>.\nThis is the concatenation of two regular expressions.</p></li>\n <li>\n  <p><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktVal\">'</span><span class=\"RktVal\">*</span><span class=\"stt\"> </span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span> matches strings that match zero or more concatenations of <span class=\"RktSym\">a</span> with itself</p></li></ul>\n\n<p>First, we must define a helper function that determines whether a regular expression matches the empty string. If it does, we return <span class=\"RktVal\">'</span><span class=\"RktVal\">empty</span>. Otherwise, we return <span class=\"RktVal\">'</span><span class=\"RktVal\">null</span>.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">'</span><span class=\"RktVal\">empty</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">empty</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/characters.html#%28def._%28%28quote._~23~25kernel%29._char~3f%29%29\">char?</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">empty</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">and</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">seq</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._equal~3f%29%29\">equal?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">or</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._equal~3f%29%29\">equal?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">empty</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">empty</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">not</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._equal~3f%29%29\">equal?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">empty</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">empty</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'empty</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'null</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'null</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">and</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">empty</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'null</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">or</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">empty</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'empty</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'empty</span></p></td></tr></tbody></table></div>\n\n<p>Now, we&rsquo;re ready to implement the derivative:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/characters.html#%28def._%28%28quote._~23~25kernel%29._char~3f%29%29\">char?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c^</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c^</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">empty</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">empty</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">b</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">or</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">b</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">and</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">b</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">and</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">or</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">b</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">or</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">not</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">not</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'empty</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'null</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(or (seq empty #\\b) (seq null null))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\z</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(or (seq null #\\b) (seq null null))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">or</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\c</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(or (or (seq empty #\\b) (seq null null)) (or (seq empty #\\c) (seq null null)))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">or</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\c</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\z</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(or (or (seq null #\\b) (seq null null)) (or (seq null #\\c) (seq null null)))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">and</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\c</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\">'(and (or (seq empty #\\b) (seq null null))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(or (seq empty #\\c) (seq null null)))</span></p></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">and</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\c</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\z</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(and (or (seq null #\\b) (seq null null)) (or (seq null #\\c) (seq null null)))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(seq empty (* #\\a))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(seq (or (seq empty #\\b) (seq null null)) (* (seq #\\a #\\b)))</span></p></td></tr></tbody></table></div>\n\n<p>For the character case, we check if the target character matches the regular expression character. If it does, then the only thing that can follow the target character in a string\nis the empty string, so that&rsquo;s the derivative. If it doesn&rsquo;t, there are no strings that can follow the character, so we return null. Remember, the result of a derivative is a regular expression\nthat matches strings that, when appended after the target character, match the original regular expression. If the derivative is <span class=\"RktVal\">'</span><span class=\"RktVal\">null</span>, then the match failed because there are\nno strings that can follow the character and produce a match. In other words, the target character is not the first character of any matches of the regular expression.</p>\n\n<p>For the <span class=\"RktVal\">'</span><span class=\"RktVal\">empty</span> expression, we return <span class=\"RktVal\">'</span><span class=\"RktVal\">null</span> because the empty expression does not match a character. The empty expression only matches the empty string.</p>\n\n<p>For the <span class=\"RktVal\">'</span><span class=\"RktVal\">null</span> expression, we return <span class=\"RktVal\">'</span><span class=\"RktVal\">null</span> because the null expression does not match any strings.</p>\n\n<p>For star expressions, we concatenate the sub-expression&rsquo;s derivative with the star expression. Concatenating the original star expression gives us the repetition behavior.</p>\n\n<p>For sequences, there are two cases. The intuitive case is the first one, <span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"stt\"> </span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"stt\"> </span><span class=\"RktSym\">a</span><span class=\"stt\"> </span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktRdr\">,</span><span class=\"RktSym\">b</span><span class=\"RktVal\">)</span>. This is the derivative of the first regular expression concatenated with the second expression.\nHowever, if the first regular expression matches the empty string, the derivative of the sequence could also be <span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"stt\"> </span><span class=\"RktSym\">b</span><span class=\"stt\"> </span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span>. We implement this using our <span class=\"RktSym\">v</span> helper and properties of regular expressions.</p>\n\n<p>If <span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"stt\"> </span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span> returns <span class=\"RktVal\">'</span><span class=\"RktVal\">empty</span>, the second case becomes <span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"stt\"> </span><span class=\"RktVal\">empty</span><span class=\"stt\"> </span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"stt\"> </span><span class=\"RktSym\">b</span><span class=\"stt\"> </span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span>, which is equivalent to <span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"stt\"> </span><span class=\"RktSym\">b</span><span class=\"stt\"> </span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span>.\nIf <span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"stt\"> </span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span> is <span class=\"RktVal\">'</span><span class=\"RktVal\">null</span>, we get <span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"stt\"> </span><span class=\"RktVal\">null</span><span class=\"stt\"> </span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"stt\"> </span><span class=\"RktSym\">b</span><span class=\"stt\"> </span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span>, which is equivalent to <span class=\"RktVal\">'</span><span class=\"RktVal\">null</span>. So we only ever \"try\" the derivative of <span class=\"RktSym\">b</span>\nwhen <span class=\"RktSym\">a</span> matches the empty string.</p>\n\n<p>We want the derivative to match all strings matched by either of these two cases, so we use <span class=\"RktVal\">'</span><span class=\"RktVal\">or</span>.</p>\n\n<p>The other cases are just straightforward recursive cases, threading the derivative through the sub-expressions.</p>\n\n<p>The  first two examples show the simple character cases. The following examples seem complicated, but if we use the properties of regular expressions, we can simplify the results.\nFor example, <span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"stt\"> </span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"stt\"> </span><span class=\"RktVal\">#\\a</span><span class=\"stt\"> </span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktPn\">)</span> evaluates to <span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">or</span><span class=\"stt\"> </span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"stt\"> </span><span class=\"RktVal\">empty</span><span class=\"stt\"> </span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"stt\"> </span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"stt\"> </span><span class=\"RktVal\">null</span><span class=\"stt\"> </span><span class=\"RktVal\">null</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span>, which is equivalent to <span class=\"RktVal\">#\\b</span>. Try to simplify the other outputs and make sure the results are what you expect.</p>\n\n<h2>1.1\n <tt>&nbsp;</tt><a name=\"(part._.Detour__.A_.Simplifier)\"></a>Detour: A Simplifier</h2>\n\n<p>If you simplified those by hand, you&rsquo;d probably agree that this is a computer&rsquo;s job. So let&rsquo;s make a function to do it for us!\nThis will make it easier to analyze our derivatives and it&rsquo;s a fun exercise.</p>\n\n<p>We&rsquo;ll start by writing the rewrite rules:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify-step</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">empty</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/characters.html#%28def._%28%28quote._~23~25kernel%29._char~3f%29%29\">char?</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">null</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">empty</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">empty</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">empty</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">null</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">null</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">empty</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">empty</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">and</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">null</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">and</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">null</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">and</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/characters.html#%28def._%28%28quote._~23~25kernel%29._char~3f%29%29\">char?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/characters.html#%28def._%28%28quote._~23~25kernel%29._char~3f%29%29\">char?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">and</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">or</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">null</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">or</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">null</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">or</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">not</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">not</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>These are some simple rewrite rules for simplifying regular expressions. For example, the rule <span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">and</span><span class=\"stt\"> </span><span class=\"RktVal\">null</span><span class=\"stt\"> </span><span class=\"RktRdr\">,</span><span class=\"RktSym\">b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktSym\">~&gt;</span><span class=\"stt\"> </span><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span> makes sense because a string has to match both <span class=\"RktVal\">'</span><span class=\"RktVal\">null</span> and some regular expression <span class=\"RktSym\">b</span>\nto match <span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">and</span><span class=\"stt\"> </span><span class=\"RktVal\">null</span><span class=\"stt\"> </span><span class=\"RktRdr\">,</span><span class=\"RktSym\">b</span><span class=\"RktVal\">)</span>, but it won&rsquo;t match <span class=\"RktVal\">'</span><span class=\"RktVal\">null</span>, so the whole thing is equivalent to <span class=\"RktVal\">'</span><span class=\"RktVal\">null</span>. Make sure all of the rules make sense to you.</p>\n\n<p>Now we&rsquo;ll implement the recursive part:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify-step*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">re^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify-step</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._equal~3f%29%29\">equal?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re^</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">re^</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify-step*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re^</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">empty</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/characters.html#%28def._%28%28quote._~23~25kernel%29._char~3f%29%29\">char?</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify-step*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify-step*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">and</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify-step*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">and</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">or</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify-step*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">or</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">not</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify-step*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">not</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p><span class=\"RktSym\">simplify-step*</span> repeatedly applies <span class=\"RktSym\">simplify-step</span> until the result is unchanged.\nThis is guaranteed to terminate because our rewrite rules either produce a sub-expression, an atomic expression,\nor the unchanged input expression. Atomic expressions are returned unchanged, so eventually, we&rsquo;ll either produce\nan expression with no rewrite rule (gets returned unchanged) or an atomic and then terminate.</p>\n\n<p><span class=\"RktSym\">simplify</span> simplifies the expression bottom-up, simplifying sub-expressions first and then repeatedly\napplying our rewrite rules on the input expression with simplified children.</p>\n\n<p>This is by no means an exhaustive, rigorous simplifier, but it gets the job done for our purposes.</p>\n\n<p>Finally, we can simplify those derivatives:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'empty</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'null</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#\\b</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\z</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'null</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">or</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\c</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(or #\\b #\\c)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">or</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\c</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\z</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'null</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">and</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\c</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'null</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">and</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\c</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\z</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'null</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(* #\\a)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(seq #\\b (* (seq #\\a #\\b)))</span></p></td></tr></tbody></table></div>\n\n<p>Beautiful!</p>\n\n<h1>2\n <tt>&nbsp;</tt><a name=\"(part._.Putting_it_.All_.Together)\"></a>Putting it All Together</h1>\n\n<p>Now that we can differentiate a regular expression with respect to a character, we can differentiate with respect to a string by\nsequencing character derivatives.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/ds</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Ffold%29%29\">for/fold</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">re</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">c</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-string%29%29\">in-string</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/dc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/ds</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"ab\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'empty</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/ds</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\c</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"ab\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#\\c</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/ds</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(* #\\a)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/ds</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"a\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(* #\\a)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/ds</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"aaaaa\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(* #\\a)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/ds</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(* (seq #\\a #\\b))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/ds</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"a\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(seq #\\b (* (seq #\\a #\\b)))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/ds</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"ab\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(* (seq #\\a #\\b))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">simplify</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/ds</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"ababababa\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(seq #\\b (* (seq #\\a #\\b)))</span></p></td></tr></tbody></table></div>\n\n<p>With this, we can finally determine if a string matches a regular expression:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">our-regexp-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">d/ds</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">'</span><span class=\"RktVal\">empty</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#t</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">'</span><span class=\"RktVal\">null</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">our-regexp-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"a\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">our-regexp-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"b\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">our-regexp-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"ab\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">our-regexp-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"az\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">our-regexp-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"abc\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">our-regexp-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">or</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\c</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"ab\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">our-regexp-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">or</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\c</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"ac\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">our-regexp-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">or</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\c</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"az\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">our-regexp-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">our-regexp-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"a\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">our-regexp-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"aaaaaaaaaa\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">our-regexp-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">our-regexp-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"a\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">our-regexp-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"ab\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">our-regexp-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"aba\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">our-regexp-match</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#\\b</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"abab\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr></tbody></table></div>\n\n<p>This method is cool and simple, but does not generalize well to features like capture groups. Regardless,\nI think it is a very interesting idea and a fun exercise.</p>")) ((? . 7) f post (u . "Understanding and Implementing Automatic Differentiation") (? . 7) 1744126109 (p+ #"/home/runner/work/blog/blog/repo/2022/12/understanding-and-implementing-automatic-differentiation.html" . unix) (u . "/blog/2022/12/understanding-and-implementing-automatic-differentiation.html") (u . "2022-12-04T16:17:10") (? . 6) (? . 3) (c (u . "racket") c (u . "math") c (u . "machine-learning") c (u . "projects") c (u . "tutorials") c (u . "understand-and-implement")) (u . "\n<p>\\[\n\\DeclareMathOperator{\\expt}{expt}\n\\DeclareMathOperator{\\mul}{mul}\n\\DeclareMathOperator{\\add}{add}\n\\DeclareMathOperator{\\derivative}{derivative}\n\\]</p>\n\n<p>Automatic differentiation is a technique that allows programs to compute the derivatives of functions. It is vital\nfor deep learning and useful for optimization in general.\nFor me, it&rsquo;s always been dark magic, but I recently thought of a nice way to implement it and made a little library. This\nblog post takes you along the journey of discovering that implementation. Specifically, we will be implementing forward mode\nautomatic differentiation for scalar numbers.</p>\n\n<p>This post requires some knowledge of differential calculus. You&rsquo;ll need to know basic derivative rules, the chain rule,\nand it&rsquo;d help to know partial derivatives. If you&rsquo;ve taken an introductory calculus course, you should be fine.</p>\n\n<p>The code is in Racket. If you don&rsquo;t know Racket, you should still be able to follow along. I&rsquo;ll explain the Racket-y stuff.\nDon&rsquo;t let the parentheses scare you away!</p>") #t (u . "\n<p>\\[\n\\DeclareMathOperator{\\expt}{expt}\n\\DeclareMathOperator{\\mul}{mul}\n\\DeclareMathOperator{\\add}{add}\n\\DeclareMathOperator{\\derivative}{derivative}\n\\]</p>\n\n<p>Automatic differentiation is a technique that allows programs to compute the derivatives of functions. It is vital\nfor deep learning and useful for optimization in general.\nFor me, it&rsquo;s always been dark magic, but I recently thought of a nice way to implement it and made a little library. This\nblog post takes you along the journey of discovering that implementation. Specifically, we will be implementing forward mode\nautomatic differentiation for scalar numbers.</p>\n\n<p>This post requires some knowledge of differential calculus. You&rsquo;ll need to know basic derivative rules, the chain rule,\nand it&rsquo;d help to know partial derivatives. If you&rsquo;ve taken an introductory calculus course, you should be fine.</p>\n\n<p>The code is in Racket. If you don&rsquo;t know Racket, you should still be able to follow along. I&rsquo;ll explain the Racket-y stuff.\nDon&rsquo;t let the parentheses scare you away!</p>\n<!--more-->\n\n<table cellpadding=\"0\" cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.Introduction%29\">1<span class=\"hspace\">&nbsp;</span>Introduction</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\"></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.How_%29\">2<span class=\"hspace\">&nbsp;</span>How?</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toclink\" data-pltdoc=\"x\" href=\"#%28part._.The_.Math%29\">2.1<span class=\"hspace\">&nbsp;</span>The Math</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toclink\" data-pltdoc=\"x\" href=\"#%28part._.The_.Implementation%29\">2.2<span class=\"hspace\">&nbsp;</span>The Implementation</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toclink\" data-pltdoc=\"x\" href=\"#%28part._.A_.Data_.Representation%29\">2.2.1<span class=\"hspace\">&nbsp;</span>A Data Representation</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toclink\" data-pltdoc=\"x\" href=\"#%28part._.The_.Derivative_%29\">2.2.2<span class=\"hspace\">&nbsp;</span>The Derivative!</a></p></td></tr></tbody></table>\n\n<h1>1\n <tt>&nbsp;</tt><a name=\"(part._.Introduction)\"></a>Introduction</h1>\n\n<p>Gradient descent is an optimization technique that involves derivatives. You have some quantity you want to optimize,\nlet&rsquo;s say \\(y\\), and you have some variable \\(x\\) that you can adjust that affects \\(y\\). What value of \\(x\\) maximizes \\(y\\)?\nUsing gradient descent, if we take the derivative of \\(y\\) with respect to \\(x\\), \\(\\frac{dy}{dx}\\), that tells us how changing \\(x\\)\naffects \\(y\\). If the derivative is positive, increasing \\(x\\) increases \\(y\\). If it is negative, increasing \\(x\\) decreases \\(y\\).\nIf it is positive and large, increasing \\(x\\) increases \\(y\\) a lot. So, if we&rsquo;re trying to maximize \\(y\\), we&rsquo;d change \\(x\\) in the same\ndirection as the derivative. If it&rsquo;s positive, we increase \\(x\\) to make \\(y\\) greater. If it&rsquo;s negative, we decrease \\(x\\) to make \\(y\\)\ngreater. This will end up maximizing \\(y\\) (at least, reaching a local maximum). This is a very useful technique and it is fundamental to\ndeep learning with neural networks. Awesome! But how do you compute the derivative of a function with respect to its input?</p>\n\n<p>Naively, you might try something like this:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">h</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2F%29%29\">/</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._-%29%29\"><span class=\"nobreak\">-</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">h</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">h</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">square</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">square</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0.01</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">10.009999999999764</span></p></td></tr></tbody></table></div>\n\n<p>For those not familiar with Racket, it has prefix arithmetic. This means that instead of writing \\(a + b\\), we write <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"stt\"> </span><span class=\"RktSym\">a</span><span class=\"stt\"> </span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span>.\nIt also has a lot of parentheses, which can be tricky to read. You can mostly ignore them and just read based on indentation.</p>\n\n<p>Here, we define a function called <span class=\"RktSym\">derivative</span> which takes in 3 arguments: a <span class=\"RktSym\">Number</span><span class=\"stt\"> </span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"stt\"> </span><span class=\"RktSym\">Number</span> function <span class=\"RktSym\">f</span>, a number <span class=\"RktSym\">x</span> representing the input, and\na number <span class=\"RktSym\">h</span> representing the step size of the derivative. The body of <span class=\"RktSym\">derivative</span> has a lot of parentheses and prefix arithmetic that is hard to read. Here is what this looks like in normal math notation:</p>\n\n<p>\\[\\derivative(f,x,h) = \\frac{f(x+h) - f(x)}{h}\\]</p>\n\n<p>This is reminiscent of the limit definition of a derivative that you learn about in an introductory calculus course.</p>\n\n<p>\\[\\frac{df}{dx} = \\lim_{h \\to 0} \\frac{f(x + h) - f(x)}{h}\\]</p>\n\n<p>This can work well enough as an approximation, but you need a small <span class=\"RktSym\">h</span> and there will always be rounding error, as we saw in the square example. Another issue is that\nif we have a multi-argument function, we&rsquo;d have to run the function many times to get the partial derivatives.\nThis is not ideal. What we&rsquo;d like is to be able to run the function once, inspect several derivatives after, and get exact derivatives. This is the goal of\nautomatic differentiation.</p>\n\n<p>Here is a sneak peek of what we will implement:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">number-diff</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">*o</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">number-&gt;dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">number-&gt;dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-&gt;number</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">15</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-&gt;number</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">3</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-&gt;number</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">5</span></p></td></tr></tbody></table></div>\n\n<p><span class=\"RktSym\">*o</span> is just my version of multiplication that supports derivatives.</p>\n\n<p>We&rsquo;ll even get higher order derivatives!</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-&gt;number</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">5</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">*o</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-&gt;number</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">25</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-&gt;number</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">10</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-&gt;number</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-&gt;number</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:order</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr></tbody></table></div>\n\n<h1>2\n <tt>&nbsp;</tt><a name=\"(part._.How_)\"></a>How?</h1>\n\n<h2>2.1\n <tt>&nbsp;</tt><a name=\"(part._.The_.Math)\"></a>The Math</h2>\n\n<p>I first encountered automatic differentiation when I was learning about neural networks in college.\nIn the popular neural networks libraries, you define your neural network, and this constructs a computation\ngraph. A computation graph stores the operations, inputs, and outputs of a computation. Here is an example\nfrom PyTorch documentation:</p>\n\n<p><img src=\"/blog/img/posts/2022-11-26-autodiff/computation-graph.png\" alt=\"computation graph\" height=\"1079\" width=\"1262\" /></p>\n\n<p><a href=\"https://pytorch.org/blog/computational-graphs-constructed-in-pytorch/\">image source</a></p>\n\n<p>This represents the computation \\(\\log (x_1 x_2) \\sin (x_2)\\). Intermediate results like \\(x_1 x_2\\) get their own nodes (\\(a\\)).</p>\n\n<p>The green part of the image shows how the derivatives are calculated. Each operator, like multiplication, logarithm, etc., knows\nhow to compute the derivatives of its result with respect to its inputs. The rest is just applying the chain rule and adding up\npartial derivatives as appropriate.</p>\n\n<p>There is a lot going on here, so don&rsquo;t worry about fully understanding this picture yet. We will get there. The key idea is that\na computation can be expressed as a graph, where inputs are like leaves, and operations are like nodes. And each node is a tiny computation\nwhich is easy to compute the derivatives for.</p>\n\n<p>Let&rsquo;s start by thinking about some core operators and their derivatives:</p>\n\n<p>\\[\n\\mul(a,b) = ab\n\\]</p>\n\n<p>What are the derivatives?</p>\n\n<p>\\[\n\\frac{\\partial \\mul}{\\partial a} = b\n\\]</p>\n\n<p>\\[\n\\frac{\\partial \\mul}{\\partial b} = a\n\\]</p>\n\n<p>This comes from the rule for multiplying a constant:</p>\n\n<p>\\[\n\\frac{d}{dx} cx = c\n\\]</p>\n\n<p>Remember, taking the partial derivative means treating the other arguments as constants.</p>\n\n<p>Ok, what about addition?</p>\n\n<p>\\[\n\\add(a,b) = a + b\n\\]</p>\n\n<p>\\[\n\\frac{\\partial \\add}{\\partial a} = 1\n\\]</p>\n\n<p>The derivative is 1 because \\(\\frac{da}{da} = 1\\) and \\(\\frac{da}{db} = 0\\). Using the sum rule, we get \\(1+0=1\\).</p>\n\n<p>\\[\n\\frac{\\partial \\add}{\\partial b} = 1\n\\]</p>\n\n<p>This is 1 for the same reason.</p>\n\n<p>What about Exponentiation?</p>\n\n<p>\\[\n\\expt(a,b) = a^b\n\\]</p>\n\n<p>\\[\n\\frac{\\partial \\expt}{\\partial a} = ba^{b-1}\n\\]</p>\n\n<p>This derivative treats \\(b\\) as a constant, which makes this the derivative of a polynomial. So we use the power rule.</p>\n\n<p>\\[\n\\frac{\\partial \\expt}{\\partial b} = a^b \\ln(a)\n\\]</p>\n\n<p>This derivative treats \\(a\\) as a constant, which makes this the derivative of an exponential. So we use the exponential rule.</p>\n\n<p>What if things get more complicated? How would you compute this derivative?</p>\n\n<p>\\[\ny = (3x + 1)^2\n\\]</p>\n\n<p>\\[\n\\frac{dy}{dx} = ?\n\\]</p>\n\n<p>You use the chain rule!</p>\n\n<p>\\[\n\\frac{dy}{dx} = \\frac{dy}{du} \\frac{du}{dx}\n\\]</p>\n\n<p>Let \\(u_1 = 3x+1\\).</p>\n\n<p>\\[y = u_1^2\\]</p>\n\n<p>Now we can use the power rule:</p>\n\n<p>\\[\n\\frac{dy}{du_1} = 2u_1\n\\]</p>\n\n<p>We can easily tell that \\(\\frac{du_1}{dx} = 3\\), but let&rsquo;s do this mechanically to get an idea of how we might automate it:</p>\n\n<p>Let \\(u_2 = 3x\\)</p>\n\n<p>\\[u_1 = u_2 + 1\\]</p>\n\n<p>Now we can use the derivative of \\(\\add\\):</p>\n\n<p>\\[\n\\frac{du_1}{du_2} = 1\n\\]</p>\n\n<p>Finally, we use the constant factor rule:</p>\n\n<p>\\[\\frac{du_2}{dx} = 3\\]</p>\n\n<p>Now, we can go back up the chain:</p>\n\n<p>\\[\\frac{du_1}{dx} = \\frac{du_1}{du_2}\\frac{du_2}{dx} = 1 \\cdot 3 = 3\\]</p>\n\n<p>\\[\\frac{dy}{dx} = \\frac{dy}{du_1}\\frac{du_1}{dx} = 2u_1 \\cdot 3 = 6u_1 = 6(3x+1)\\]</p>\n\n<p>We did it!</p>\n\n<p>Now we can almost see a recursive algorithm for computing derivatives. If a computation is just a bunch of nested simple operations like addition and multiplication,\nwe can compute the derivative by applying the chain rule and using the partial derivatives of our operators at each step.\nThere&rsquo;s just one tricky bit: What if \\(x\\) shows up twice?</p>\n\n<p>In other words, if we have \\(f(a,b)\\) and we know \\(\\frac{\\partial f}{\\partial a}\\) and \\(\\frac{\\partial f}{\\partial b}\\), how do we\ncompute \\(\\frac{df(x,x)}{dx}\\)?</p>\n\n<p>One way of thinking about a derivative is asking \"if we adjust this input a little bit, how does the output change?\". So if \\(x\\) shows up in multiple places, we\nare making several inputs change the same way and seeing how the output is affected. If we know how each input changes the output,\nwe just add up all of those little changes to get the big, total change. Concretely, this means we just add the partial derivatives together.</p>\n\n<p>Here is an example:</p>\n\n<p>\\[\\frac{d \\add(x,x)}{dx} = 1 + 1 = 2\\]</p>\n\n<p>The partial derivative of \\(\\add\\) with respect to each input is 1. So we get \\(1+1=2\\). This makes sense because \\(x+x=2x\\) and \\(\\frac{d2x}{dx} = 2\\).</p>\n\n<p>One more example:</p>\n\n<p>\\[\\frac{d \\mul(x,x)}{dx} = x + x = 2x\\]</p>\n\n<p>The partial derivative of \\(\\mul\\) with respect to each input is the other input. So we get \\(x + x = 2x\\). This makes sense because \\(x \\cdot x = x^2\\) and \\(\\frac{dx^2}{dx} = 2x\\).</p>\n\n<p>In general, for computing \\(\\frac{\\partial f(a,b)}{\\partial x}\\), \\(a\\) and \\(b\\) might be \\(x\\), might depend on \\(x\\), or might not depend on \\(x\\) at all.\nTo account for this, we use the chain rule and this \"partial derivative sum rule\" (the technical term for this is the total derivative):</p>\n\n<p>\\[\\frac{d f(a,b)}{d x} = \\frac{\\partial f(a,b)}{\\partial a}\\frac{d a}{d x} + \\frac{\\partial f(a,b)}{\\partial b}\\frac{d b}{d x}\\]</p>\n\n<p>If \\(a = x\\), \\(\\frac{d a}{d x} = 1\\). If \\(a\\) depends on \\(x\\), \\(\\frac{d a}{d x}\\) be some value. If it does not depend on \\(x\\), it will be 0.</p>\n\n<p>For example, let&rsquo;s compute \\(\\frac{d}{dx} (5x)^2\\):</p>\n\n<p>\\[\\frac{d \\expt(5x,2)}{dx} = \\frac{d \\expt(5x,2)}{d5x}\\frac{d5x}{dx} + \\frac{d \\expt(5x,2)}{d2}\\frac{d2}{dx}\\]\n\\[\\frac{d \\expt(5x,2)}{dx} = 2 \\cdot 5x \\cdot 5 + \\frac{d \\expt(5x,2)}{d2} \\cdot 0\\]\n\\[\\frac{d \\expt(5x,2)}{dx} = 50x\\]</p>\n\n<p>Notice that, since 2 does not depend on \\(x\\), its derivative was 0, and that term did not contribute to the overall derivative.</p>\n\n<p>Normally, you don&rsquo;t think of something like \\((5x)^2\\) as a sum of two partial derivatives like this. You don&rsquo;t bother taking the\nderivative of the 2. You normally don&rsquo;t have to worry about it since it just ends up adding 0. But since we&rsquo;re trying to automate this, we need to be general and\naccount for the possibility that \\(x\\) might show up in the base <span class=\"emph\">and</span> the exponent when differentiating an exponential, or generally, multiple times in any function. In fact, we should&rsquo;ve\ndone the same thing for \\(\\frac{d5x}{dx}\\) and added up \\(\\frac{d\\mul(5,x)}{dx}\\frac{dx}{dx} and \\frac{d\\mul(5,x)}{d5}\\frac{d5}{dx}\\) to get \\(5 \\cdot 1 + x \\cdot 0 = 5\\).</p>\n\n<p>Side note: You may have been wondering, \"where&rsquo;s the product rule?\" In fact, the product rule is not fundamental! It can be derived from the constant factor rule,\nthe chain rule, and this \"partial derivative sum rule\":</p>\n\n<p>\\[\\frac{d}{dx}f(x)g(x) = \\frac{d}{dx}\\mul(f(x),g(x)) = \\frac{\\partial \\mul(f(x),g(x))}{\\partial f(x)}\\frac{df}{dx} + \\frac{\\partial \\mul(f(x),g(x))}{\\partial g(x)}\\frac{dg}{dx}\\]\n\\[= g\\frac{df}{dx} + f\\frac{dg}{dx}\\]</p>\n\n<p>Nice!</p>\n\n<p>Now, we&rsquo;re ready for the recursive algorithm to compute (partial) derivatives.</p>\n\n<p>\\[\\derivative(x,x) = 1\\]\n\\[\\derivative(c,x) = 0\\]\nwhere \\(c\\) is a constant and not \\(x\\).\n\\[\\derivative(f(u_1,u_2, \\cdots , u_n), x) = \\sum_{i=0}^{n} \\frac{\\partial f(u_1,u_2, \\cdots , u_n)}{\\partial u_i} \\cdot \\derivative(u_i, x)\\]</p>\n\n<p>The base cases are the constant rule and the fact that \\(\\frac{dx}{dx} = 1\\).\nThe recursive case is the interesting bit. For each input to the computation, we apply the chain rule, which involves a special partial derivative and a recursive call.\nAnd we add up those applications of the chain rule for each input.</p>\n\n<p>Why don&rsquo;t we need a recursive call for \\(\\frac{\\partial f(u_1,u_2, \\cdots , u_n)}{\\partial u_i}\\)? We don&rsquo;t need one because \\(f(u_1,u_2, \\cdots , u_n)\\) is some simple operation\nlike \\(\\mul\\) or \\(\\add\\) or \\(\\expt\\) for which we know how to compute the partial derivatives. Since we are differentiating with respect to an immediate input, \\(u_i\\),\nthis knowledge is all we need and we don&rsquo;t need to apply the chain rule or make a recursive call.</p>\n\n<p>This is all very hand-wavy, but it&rsquo;ll become more concrete soon, I promise!</p>\n\n<p>At this point, that computation graph picture from earlier should start to make some sense. In particular, the green part.\nEach operator knows how to compute the derivatives of its result with respect to its inputs. That&rsquo;s the \"backward\" stuff.\nAnd it says \"Grads from different paths are added together\" (grad=gradient=derivative for our purposes) because of that \"partial derivative sum rule\". In their example,\n\\(x_2\\) shows up twice in the computation, so we need to account for that by adding multiple partial derivatives together.</p>\n\n<h2>2.2\n <tt>&nbsp;</tt><a name=\"(part._.The_.Implementation)\"></a>The Implementation</h2>\n\n<p>We have a (somewhat hand-wavy) algorithm for computing derivatives. Now, we have to actually implement it.</p>\n\n<h3>2.2.1\n <tt>&nbsp;</tt><a name=\"(part._.A_.Data_.Representation)\"></a>A Data Representation</h3>\n\n<p>Let&rsquo;s think about the pieces we&rsquo;ll need:</p>\n\n<p>We&rsquo;ll need operators which can compute partial derivatives of their result with respect to their input(s).\nWe&rsquo;ll also need constants to pass to these operators. It is unclear how \"variables\" will be represented, so let&rsquo;s not think about that for now.\nIn order to compute the derivative of a result with respect to some input after the computation is complete, we&rsquo;ll need to remember what inputs\nwere involved in a computation.</p>\n\n<p>So a computation will need to store the value of its result and its inputs, at a bare minimum. Its inputs may be results of other computations too.\nThis means there will be a tree structure where a computation has a node that stores its result and has children for its inputs. At the leaves of this\ntree will be constants. We can think of a constant as a computation with no inputs that has itself as a result. Let&rsquo;s write a data definition for this tree:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">computation</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">inputs</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">A Computation is a</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">(computation Number (listof Computation))</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">It represents the result of a numerical computation</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Examples:</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">computation</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">computation</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">prod23</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">computation</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>In Racket, <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span> creates a structure type. It&rsquo;s like a struct in C, or a data class in Python or Java. It only has fields, no methods.\n<span class=\"RktPn\">#:transparent</span> automatically implements conversion to a string for our structure type so we can print it, and semicolon creates a line comment.\nThe <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span> function creates lists, so <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span> creates the empty list.</p>\n\n<p>This is on the right track, but it&rsquo;s not enough information to compute derivatives. We have no way to compute the derivative\nof the result with respect to an input. What else do we need in the tree?</p>\n\n<p>Let&rsquo;s take another look at the recursive case of our algorithm. The recursive step involves computing the partial derivatives of the result with respect\nto one of its direct inputs, \\(\\frac{\\partial f(u_1,u_2, \\cdots , u_n)}{\\partial u_i}\\). This is the missing piece. We just have to figure out how to represent\nthis information in our tree.</p>\n\n<p>One option would be to do what PyTorch seems to do: Store some information about the operation in a node. In our <span class=\"RktSym\">prod23</span> example,\nwe&rsquo;d store something representing multiplication in the tree. In the PyTorch, we see that the computation graph stores something for <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span> and something called\n<span class=\"RktSym\">MultBackward</span>. <span class=\"RktSym\">MultBackward</span> is something that knows how to compute the derivative of a product with respect to its input factors. With this design,\nwe could store a function in the tree that can be used to compute the derivative of the result with respect to each input. Each operator would be responsible for\ncomputing its result and creating a node containing that result, a function for computing derivatives, and the inputs.</p>\n\n<p>Another option is to pre-compute these derivatives and store the value of each derivative in the tree with its corresponding input.\nWith this design, each operator would be responsible for\ncomputing its result,\ncomputing the derivative of the result with respect to each input,\nand creating a node containing the result, the inputs, and the derivatives of the result with respect to each input.\nThis is the design I chose for my implementation, and the one we&rsquo;ll implement together.</p>\n\n<p>Both options have pros and cons. This is just the design I came up with.\nOne good thing about this design is that it generalizes nicely to higher order derivatives, which was a goal of my implementation.</p>\n\n<p>Let&rsquo;s think about an example to make this more concrete. Let&rsquo;s say we have some operator <span class=\"RktSym\">f</span> and some inputs <span class=\"RktSym\">a</span> and <span class=\"RktSym\">b</span>.\nThe computation is <span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"stt\"> </span><span class=\"RktSym\">a</span><span class=\"stt\"> </span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span> (that&rsquo;s how we write \\(f(a,b)\\) in Racket).\nLet&rsquo;s call the result <span class=\"RktSym\">y</span>. Keep in mind that <span class=\"RktSym\">a</span>, <span class=\"RktSym\">b</span>, and <span class=\"RktSym\">y</span> are not plain numbers.\nThey are trees. In this case, <span class=\"RktSym\">a</span> and <span class=\"RktSym\">b</span> will be direct children of <span class=\"RktSym\">y</span> since they are inputs to the computation that produced <span class=\"RktSym\">y</span>.</p>\n\n<p><img src=\"/blog/img/posts/2022-11-26-autodiff/pict.png\" alt=\"image\" height=\"48.0\" style=\"vertical-align: -2.830078125px; margin: -3px -3px -3px -3px;\" width=\"27.0\" /></p>\n\n<p>The tree for <span class=\"RktSym\">y</span> will store the numerical value of the result of the computation, and for its children, it will have <span class=\"RktSym\">a</span> and <span class=\"RktSym\">b</span>. It will also\nstore the numerical value of \\(\\frac{\\partial y}{\\partial a}\\) and the numerical value of \\(\\frac{\\partial y}{\\partial b}\\).</p>\n\n<p><img src=\"/blog/img/posts/2022-11-26-autodiff/pict_2.png\" alt=\"image\" height=\"48.0\" style=\"vertical-align: -2.830078125px; margin: -3px -3px -3px -3px;\" width=\"132.0\" /></p>\n\n<p><span class=\"RktSym\">a</span> and <span class=\"RktSym\">b</span> may have children of their own, but we exclude them from these diagrams. <span class=\"RktSym\">dyda</span> and <span class=\"RktSym\">dydb</span> are plain numbers, not trees.</p>\n\n<p>If we&rsquo;re trying to compute <span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"stt\"> </span><span class=\"RktSym\">y</span><span class=\"stt\"> </span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span>, where <span class=\"RktSym\">x</span> may be some input to the computation that produced <span class=\"RktSym\">a</span>,\nthe first thing we&rsquo;ll encounter is the node <span class=\"RktSym\">y</span>, which came from <span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"stt\"> </span><span class=\"RktSym\">a</span><span class=\"stt\"> </span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span>, and we&rsquo;ll do the recursive step.\nAccording to our algorithm, we need to compute</p>\n\n<p>\\[\\frac{\\partial y}{\\partial a} \\cdot \\derivative(a,x) + \\frac{\\partial y}{\\partial b} \\cdot \\derivative(b,x)\\]</p>\n\n<p>Those partial derivatives are what we have in our tree. The rest is just making recursive calls and applying the chain rule. Now we have enough information\nto compute derivatives! Let&rsquo;s write a data definition:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">inputs</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">a DNumber (\"differentiable number\") is a</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">(dnumber Number (listof DChild) )</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">It represents the result of a differentiable computation.</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">&lsquo;</span><span class=\"RktCmt\">value</span><span class=\"RktCmt\">&lsquo;</span><span class=\"RktCmt\"> is the numerical value of the result of this computation</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">&lsquo;</span><span class=\"RktCmt\">inputs</span><span class=\"RktCmt\">&lsquo;</span><span class=\"RktCmt\"> associates each input to this computation with the numerical value of its partial derivative</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">input</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">derivative</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">A DChild is a</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">(dchild DNumber Number)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">It represents an input to a differential computation.</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">&lsquo;</span><span class=\"RktCmt\">input</span><span class=\"RktCmt\">&lsquo;</span><span class=\"RktCmt\"> is the DNumber that was supplied as an input to the parent computation</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">&lsquo;</span><span class=\"RktCmt\">derivative</span><span class=\"RktCmt\">&lsquo;</span><span class=\"RktCmt\"> is the numerical value of the partial derivative of the parent result with respect to this input.</span></td></tr></tbody></table></div>\n\n<p>A <span class=\"RktSym\">DNumber</span> stores the value of its result as a plain number and, for each input, the input&rsquo;s <span class=\"RktSym\">DNumber</span> and the partial derivative of\nthe result with respect to that input as a plain number.</p>\n\n<p>Let&rsquo;s look at \\(2 \\cdot 3\\) as an example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">prod23</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>We create <span class=\"RktSym\">dnumber</span>s for the constants 2 and 3. Since these are constants, they have no children (<span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span> creates an empty list).</p>\n\n<p>We then construct a node for the multiplication which stores the value of the result (6) and each input paired with its derivative.</p>\n\n<p>The result of \\(2 \\cdot 3\\) is 6. The inputs are 2 and 3. Recall the derivatives of the \\(\\mul\\) multiplication operator:</p>\n\n<p>\\[\\frac{\\partial \\mul(a,b)}{\\partial a} = b\\]\n\\[\\frac{\\partial \\mul(a,b)}{\\partial b} = a\\]</p>\n\n<p>The derivative of the product with respect to one of its factors is the other factor.\nSo the derivative of <span class=\"RktSym\">prod23</span> with respect to <span class=\"RktSym\">const2</span> is the plain number 3.</p>\n\n<p>We are pre-computing that \\(\\frac{\\partial f(u_1,u_2, \\cdots, u_n)}{\\partial u_i}\\) from our algorithm\nand storing it directly in our tree as the <span class=\"RktSym\">derivative</span> field (the second argument of the constructor) of a <span class=\"RktSym\">dchild</span>.\nEach <span class=\"RktSym\">dchild</span> contains the tree for that input \\(u_i\\) and the value of \\(\\frac{\\partial f(u_1,u_2, \\cdots, u_n)}{\\partial u_i}\\).\nThis is exactly what we need for the recursive case.</p>\n\n<p>Let&rsquo;s implement our multiplication operator:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber 6 (list (dchild (dnumber 2 '()) 3) (dchild (dnumber 3 '()) 2)))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">prod23</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber 6 (list (dchild (dnumber 2 '()) 3) (dchild (dnumber 3 '()) 2)))</span></p></td></tr></tbody></table></div>\n\n<p>In the output, we see <span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span> instead of <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span>. That&rsquo;s just another way of writing it.</p>\n\n<p>The function <span class=\"RktSym\">dnumber-value</span> is a field-accessor function that is automatically generated from the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span> declaration. This field contains the numerical result of the computation.\nSince Racket&rsquo;s <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span> function expects plain numbers, we have to get the numerical values of the inputs with <span class=\"RktSym\">dnumber-value</span>\nbefore passing them to <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span>.</p>\n\n<p>We also have to do this when creating the <span class=\"RktSym\">dchild</span>ren.\nThis is because the <span class=\"RktSym\">derivative</span> field of a <span class=\"RktSym\">dchild</span> must be a plain number.\nHowever, the <span class=\"RktSym\">input</span> field must be a <span class=\"RktSym\">DNumber</span>,\nso we pass the input itself in as the first argument to the <span class=\"RktSym\">dchild</span> constructor and the numerical value of the other input as the second argument.</p>\n\n<p>Let&rsquo;s do another example, this time \\(4 + 5\\):</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">sum45</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">9</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>Recall the derivatives of the \\(\\add\\) addition operator:</p>\n\n<p>\\[\\frac{\\partial \\add(a,b)}{\\partial a} = 1\\]\n\\[\\frac{\\partial \\add(a,b)}{\\partial b} = 1\\]</p>\n\n<p>Now let&rsquo;s implement it:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">add</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">add</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const5</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber 9 (list (dchild (dnumber 4 '()) 1) (dchild (dnumber 5 '()) 1)))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">sum45</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber 9 (list (dchild (dnumber 4 '()) 1) (dchild (dnumber 5 '()) 1)))</span></p></td></tr></tbody></table></div>\n\n<p>Great! Now we have a few differentiable operators. Adding more operators will be just like this. We extract the values from the arguments,\ncompute the result using the inputs&rsquo; values and built-in arithmetic operators from Racket,\nand then create a list of <span class=\"RktSym\">dchild</span>ren mapping each input to the value of the derivative\nof the result with respect to that input.</p>\n\n<p>Now we&rsquo;re finally ready to start implementing the <span class=\"RktSym\">derivative</span> function!</p>\n\n<h3>2.2.2\n <tt>&nbsp;</tt><a name=\"(part._.The_.Derivative_)\"></a>The Derivative!</h3>\n\n<p>Before we actually implement the derivative, there are a few things we have to address.</p>\n\n<p>Here is a problem:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">sum44</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">8</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>What should <span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"stt\"> </span><span class=\"RktSym\">sum44</span><span class=\"stt\"> </span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span> be? If we apply the \"partial derivative sum rule\", it should be\n\\(1 + 1 = 2\\). This makes sense because \\(x + x = 2x\\) and \\(\\frac{d}{dx} 2x = 2\\).</p>\n\n<p>Let&rsquo;s look at another example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const-four</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">sum4-four</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">8</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const-four</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>Should <span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"stt\"> </span><span class=\"RktSym\">sum4-four</span><span class=\"stt\"> </span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span> also be 2?\n<span class=\"RktSym\">const4</span> and <span class=\"RktSym\">const-four</span> are both constant computations\nthat have the result <span class=\"RktVal\">4</span> and no inputs. But should they be treated as the same? What does it mean to be\nthe same?</p>\n\n<p>Let&rsquo;s take a step back and think about a real example where this matters:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">add-4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">add</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>Here, \\(f(x) = x + 4\\). \\(\\frac{df}{dx} = 1\\). If we consider <span class=\"RktSym\">const4</span> and any other constant 4 to be the same,\nthe derivative of <span class=\"RktSym\">f</span> with respect to <span class=\"RktSym\">x</span> would be 1 for all inputs except for any constant 4, in which case it is 2.\nThis doesn&rsquo;t make sense. But <span class=\"RktSym\">const4</span> is obviously the same as <span class=\"RktSym\">const4</span>, so how can we tell these two 4 constants apart?</p>\n\n<p>Racket has a few different equality functions. The one we want is <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span>. By convention, when a function returns a boolean, the name\nends in a question mark, pronounced \"huh\". So <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span> is pronounced \"eek-huh\". Anyway, here&rsquo;s how it works:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nums</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nums</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nums</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">numbers</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nums</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">numbers</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nums-alias</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nums</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nums</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nums-alias</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr></tbody></table></div>\n\n<p>In racket, <span class=\"RktVal\">#t</span> means true and <span class=\"RktVal\">#f</span> means false.</p>\n\n<p><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span> returns <span class=\"RktVal\">#t</span> when both objects are aliases of each other. If both objects were\ncreated from different constructor calls, they will not be <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span> to each other.\nIf you know Java, it behaves just like ==. This is often called reference equality or identity equality.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const-four</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const-four</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const-four</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4-alias</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4-alias</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr></tbody></table></div>\n\n<p>This is exactly what we want! We consider two <span class=\"RktSym\">dnumber</span>s the same if they are <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span> to each other.\nThis is a little confusing, but it&rsquo;s necessary to distinguish between different computations that coincidentally have the same tree data, but\naren&rsquo;t associated with each other.\nThis is exactly the behavior that we need for variables, like our \\(x + 4\\) example earlier.</p>\n\n<p>What if <span class=\"RktSym\">const4</span> shows up twice as an input in a computation like in <span class=\"RktSym\">sum44</span>? In that case, our tree isn&rsquo;t actually a tree.\nIt&rsquo;s a directed acyclic graph. DAG for short. This is like a tree, except a node can be a child of multiple nodes. However, there cannot be cycles.\nIn other words, a node cannot be an input to itself, or an indirect input to itself. This is why it&rsquo;s called a computation graph and not a computation\ntree.</p>\n\n<p>Now we&rsquo;re finally ready to implement the <span class=\"RktSym\">derivative</span> function!</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">(DNumber DNumber -&gt; Number)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Compute the partial derivative of y with respect to x.</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">1</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">inputs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-inputs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Fsum%29%29\">for/sum</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">input</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">inputs</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">u</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild-input</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">input</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">dydu</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild-derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">input</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">dydu</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">u</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>First, let&rsquo;s cover some Racket stuff.</p>\n\n<p><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"stt\"> </span><span class=\"RktSym\">cond-expr</span><span class=\"stt\"> </span><span class=\"RktSym\">then-expr</span><span class=\"stt\"> </span><span class=\"RktSym\">else-expr</span><span class=\"RktPn\">)</span> is like\nan <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span> statement in most languages, except it&rsquo;s just an expression that evaluates to one of its branch expressions. If <span class=\"RktSym\">cond-expr</span>\nevaluates to anything other than <span class=\"RktVal\">#f</span>, the result is <span class=\"RktSym\">then-expr</span>. Otherwise, the result is <span class=\"RktSym\">else-expr</span>.</p>\n\n<p><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">var</span><span class=\"stt\"> </span><span class=\"RktSym\">val-expr</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktSym\">body-expr</span><span class=\"RktPn\">)</span> is a local variable definition expression. It binds <span class=\"RktSym\">var</span> to the result of <span class=\"RktSym\">val-expr</span>\nand <span class=\"RktSym\">var</span> is in scope in <span class=\"RktSym\">body-expr</span>. The whole expression evaluates to the result of <span class=\"RktSym\">body-expr</span>. You can also\nbind multiple variables like <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">x</span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"RktPn\">]</span><span class=\"stt\"> </span><span class=\"RktPn\">[</span><span class=\"RktSym\">y</span><span class=\"stt\"> </span><span class=\"RktVal\">2</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"stt\"> </span><span class=\"RktSym\">x</span><span class=\"stt\"> </span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span>.</p>\n\n<p><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Fsum%29%29\">for/sum</a></span> is like a for-loop, but it is an expression and calculates the sum of the results from each iteration.</p>\n\n<p>For example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"My\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"name\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"is\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"Mike\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Fsum%29%29\">for/sum</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">word</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string-length%29%29\">string-length</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">word</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">12</span></p></td></tr></tbody></table></div>\n\n<p>Again, <span class=\"RktSym\">dnumber-inputs</span>, <span class=\"RktSym\">dchild-input</span>, and <span class=\"RktSym\">dchild-derivative</span> are field accessor functions. In the inner let,\nwe bind the input <span class=\"RktSym\">DNumber</span> to the variable <span class=\"RktSym\">u</span> and the (partial) derivative of <span class=\"RktSym\">y</span> with respect to <span class=\"RktSym\">u</span> to the variable <span class=\"RktSym\">dydu</span>. Remember,\nwe store this derivative directly in the computation graph.</p>\n\n<p>Now let&rsquo;s think about what&rsquo;s going on. If <span class=\"RktSym\">y</span> and <span class=\"RktSym\">x</span> are the same, then the derivative is 1.\nThat&rsquo;s the first branch of the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span>.</p>\n\n<p>That&rsquo;s also the first case of the algorithm:</p>\n\n<p>\\[\\derivative(x,x) = 1\\]</p>\n\n<p>Otherwise, we apply the \"partial derivative sum rule\" and the chain rule. That&rsquo;s the recursive case of our algorithm.</p>\n\n<p>\\[\\derivative(f(u_1,u_2, \\cdots , u_n), x) = \\sum_{i=0}^{n} \\frac{\\partial f(u_1,u_2, \\cdots , u_n)}{\\partial u_i} \\cdot \\derivative(u_i, x)\\]</p>\n\n<p>What about this case?</p>\n\n<p>\\[\\derivative(c,x) = 0\\]\nwhere \\(c\\) is a constant and not \\(x\\).</p>\n\n<p>It&rsquo;s actually hidden in the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Fsum%29%29\">for/sum</a></span> part. If <span class=\"RktSym\">y</span> is a constant (no inputs) and it is not <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span> to <span class=\"RktSym\">x</span>,\nthe <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Fsum%29%29\">for/sum</a></span> will loop over an empty list of inputs. The sum of nothing is 0, so we return 0.</p>\n\n<p>If <span class=\"RktSym\">x</span> does not show up in\n<span class=\"RktSym\">y</span>&rsquo;s computation graph, we&rsquo;ll never get the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span> case. The only base case we&rsquo;ll hit is the implicit unequal constant base case, which returns 0.\nSince each base case returns 0, each recursive call will involve multiplying <span class=\"RktSym\">dydu</span> by 0, which will produce 0. And since we&rsquo;re just adding those together\nfor each input, we&rsquo;ll be adding up a bunch of zeros, which will produce 0. By induction, we&rsquo;ll get 0 for the whole derivative if <span class=\"RktSym\">x</span> does not appear in <span class=\"RktSym\">y</span>.</p>\n\n<p>Let&rsquo;s test out our implementation:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">0</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const-four</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">0</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">sum44</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">sum44</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const-four</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">0</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">add-4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">add-4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">double</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">add</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">double</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">double</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">0</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">square</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">square</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">8</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">square</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">6</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">3</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">4</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">square</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">add</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">84</span></p></td></tr></tbody></table></div>\n\n<p>We did it! Now, if you add some more differentiable operators, you can do all sorts of things. You can do gradient descent, you can do analysis, you can implement neural networks,\nand anything else involving derivatives.</p>\n\n<p>Let&rsquo;s implement some more operators:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">e^x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._exp%29%29\">exp</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">result</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">result</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">e^x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(dnumber 54.598150033144236 (list (dchild (dnumber 4 '()) 54.598150033144236)))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">derivative</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">e^x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">const4</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">54.598150033144236</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">sub</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">add</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\"><span class=\"nobreak\">-1</span></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">reciprocal</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2F%29%29\">/</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dchild</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2F%29%29\">/</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\"><span class=\"nobreak\">-1</span></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">dnumber-value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">div</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">mul</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">reciprocal</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p><span class=\"RktSym\">sub</span> and <span class=\"RktSym\">div</span> are interesting. They don&rsquo;t directly construct the resulting <span class=\"RktSym\">DNumber</span>. They just use other operators! If we implement a sufficient core library of mathematical\noperators, it&rsquo;s easy to define more complicated differentiable functions in terms of those core functions without having to think about derivatives at all.</p>\n\n<p>Automatic differentiation is useful, but if I&rsquo;m being honest, the real reason I wrote this blog post was because of how much I love that recursive case. Once I wrote that, I wanted to show everybody.\nYou can see the chain rule so clearly!</p>\n\n<p>Our implementation of <span class=\"RktSym\">derivative</span> shows the essence of automatic differentiation. The derivative of something with respect to itself is 1, and the derivative of some function call\nwith respect to a possibly indirect input is the sum over the chain rule applied to each input. Beautiful!</p>\n\n<p>What about higher order derivatives? To achieve this, can we just apply <span class=\"RktSym\">derivative</span> twice? Unfortunately, no. The signature doesn&rsquo;t line up.\n<span class=\"RktSym\">derivative</span> returns a plain number, so we can&rsquo;t pass that as <span class=\"RktSym\">y</span> to another call to <span class=\"RktSym\">derivative</span>. But what if we returned a <span class=\"RktSym\">DNumber</span> instead?\nThat <span class=\"RktSym\">DNumber</span> would have to represent the computation that produced the derivative itself. Is this even possible?</p>\n\n<p>Yes! But it&rsquo;s not trivial. Think about how this might work and what problems you would run into with a function like \\(\\expt(a,b) = a^b\\).</p>\n\n<p>This post is already pretty long and a lot to digest, so I wont get into higher order derivatives here. But I will in part 2!</p>")) ((? . 8) f post (u . "Understanding and Implementing Algebraic Effects") (? . 8) 1744126109 (p+ #"/home/runner/work/blog/blog/repo/2024/04/understanding-and-implementing-algebraic-effects.html" . unix) (u . "/blog/2024/04/understanding-and-implementing-algebraic-effects.html") (u . "2024-04-01T20:21:35") (? . 9) (? . 2) (c (u . "racket") c (u . "continuations") c (u . "tutorials") c (u . "programming-languages") c (u . "understand-and-implement")) (u . "\n<p>Algebraic effects are kind of like exceptions that you can resume from. They can be used to express computational effects like non-determinism, generators, multi-threading, and of course, exceptions. They are a slightly less confusing alternative to using raw continuations via operators like <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span> and have other benefits like dynamic interpretation.</p>\n\n<p>In this post, we will discover and implement algebraic effects using continuations in Racket. I will assume you are familiar with Racket and continuations. If you&rsquo;re not, I have <a href=\"/blog/2023/09/continuations.html\">the perfect post for you</a>!</p>") #t (u . "\n<p>Algebraic effects are kind of like exceptions that you can resume from. They can be used to express computational effects like non-determinism, generators, multi-threading, and of course, exceptions. They are a slightly less confusing alternative to using raw continuations via operators like <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span> and have other benefits like dynamic interpretation.</p>\n\n<p>In this post, we will discover and implement algebraic effects using continuations in Racket. I will assume you are familiar with Racket and continuations. If you&rsquo;re not, I have <a href=\"/blog/2023/09/continuations.html\">the perfect post for you</a>!</p>\n<!--more-->\n\n<p>Let&rsquo;s start out with generators. In case you&rsquo;re not familiar, here&rsquo;s an example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">racket/generator</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._range%29%29\">range</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">start</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">stop</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28form._%28%28lib._racket%2Fgenerator..rkt%29._generator%29%29\">generator</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">start</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._unless%29%29\">unless</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3e~3d%29%29\">&gt;=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">stop</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"yielding!\"</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">g</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._range%29%29\">range</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktOut\">yielding!</span></p></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktOut\">yielding!</span></p></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktOut\">yielding!</span></p></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">3</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktOut\">yielding!</span></p></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">4</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>The function <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._range%29%29\">range</a></span> creates a generator that yields integers between <span class=\"RktSym\">start</span> and <span class=\"RktSym\">stop</span>, excluding stop, like <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-range%29%29\">in-range</a></span>.</p>\n\n<p>The interesting thing about generators is that when we <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span> a value, the body of the generator actually stops running! If this was normal code, the moment we created the generator, we&rsquo;d see <span class=\"RktVal\">\"yielding!\"</span> printed 4 times. But as we can see from the order of events, it only resumed the body of the generator when we asked for the next element. The control flow exits the body every time we <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span> and it resumes when we fetch the next element. This is, of course, powered by continuations.</p>\n\n<p>Essentially, we surround the generator body in a <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> when we yield, with some extra book-keeping and indirection to wire it all up the right way.</p>\n\n<p>But instead of <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>, we will use <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span> and <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._fcontrol%29%29\">fcontrol</a></span>. Here is an example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">racket/control</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2F%29%29\">/</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._fcontrol%29%29\">fcontrol</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(2/5 3/5)</span></p></td></tr></tbody></table></div>\n\n<p><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span> and <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._fcontrol%29%29\">fcontrol</a></span> are like <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> respectively. <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span> establishes a handler procedure so that when <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._fcontrol%29%29\">fcontrol</a></span> is called, it is handled by that handler procedure. With <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>, <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> doesn&rsquo;t really do much and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> is where the action happens. It&rsquo;s the opposite with <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span> and <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._fcontrol%29%29\">fcontrol</a></span>. <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._fcontrol%29%29\">fcontrol</a></span> doesn&rsquo;t even get access to the continuation, it just bubbles some value up to the nearest <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span> handler and that handler controls what happens next. This is very reminiscent of exception handling, except instead of just getting the exception, the handler also gets a continuation which it can use to resume from where the exception was thrown! This is the essence of algebraic effects.</p>\n\n<p>Now let&rsquo;s implement generators. Our generator is going to look slightly different. We&rsquo;re going to build a lazy stream of values instead of a generator to make things simpler.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-generator</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">handler</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream-cons%29%29\">stream-cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-generator</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29\">void</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/begin.html#%28form._%28%28quote._~23~25kernel%29._begin%29%29\">begin</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28def._%28%28lib._racket%2Fstream..rkt%29._empty-stream%29%29\">empty-stream</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">handler</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-yield</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._fcontrol%29%29\">fcontrol</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-range</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">start</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">stop</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-generator</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">start</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._when%29%29\">when</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c%29%29\">&lt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">stop</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"yielding\"</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-yield</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29\">for</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-range</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">yielding</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">1</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">yielding</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">2</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">yielding</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">3</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">yielding</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">4</span></p></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>One strange thing is that in the handler, we must recursively call <span class=\"RktSym\">my-generator</span>. This is because <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span> establishes what is called a shallow hanndler. This means once an effect is performed and the body resumes from someone calling <span class=\"RktSym\">k</span>, the handler is no longer active and needs to be re-established. So when we use <span class=\"RktSym\">k</span>, we must recur to re-establish the handler.</p>\n\n<p>Like raising an exception, the code that \"performs\" an effect like yielding doesn&rsquo;t need to know how it is going to be handled. The handling can be dynamically configured:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eager-generator</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/begin.html#%28form._%28%28quote._~23~25kernel%29._begin%29%29\">begin</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eager-generator</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29\">void</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eager-range</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">start</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">stop</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eager-generator</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">start</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._when%29%29\">when</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c%29%29\">&lt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">stop</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"yielding\"</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-yield</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29\">for</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eager-range</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">yielding</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">yielding</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">yielding</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">yielding</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">1</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">2</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">3</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">4</span></p></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>By changing the handler, the behavior of the generator can be changed. Even though we&rsquo;re using the exact same generator body with the same <span class=\"RktSym\">my-yield</span>, the behavior is different because of the different handler. It&rsquo;s a lot like how the same function can run under different exception handlers.</p>\n\n<p>In fact, we could&rsquo;ve put the generator body in a function:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield-integers</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">start</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">stop</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">start</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._when%29%29\">when</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c%29%29\">&lt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">stop</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"yielding\"</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-yield</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-range</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">start</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">stop</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-generator</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield-integers</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">start</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">stop</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eager-range</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">start</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">stop</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eager-generator</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield-integers</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">start</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">stop</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29\">for</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-range</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">yielding</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">1</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">yielding</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">2</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">yielding</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">3</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">yielding</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">4</span></p></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29\">for</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eager-range</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">yielding</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">yielding</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">yielding</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">yielding</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">1</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">2</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">3</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">4</span></p></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p><span class=\"RktSym\">yield-integers</span> doesn&rsquo;t care how its <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span>s will be handled.</p>\n\n<p>As another example, let&rsquo;s implement non-determinism. Non-determinism allows us to \"fork\" the program to try different things without having to explicitly loop. It is useful for searches.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">nondet</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">results-rev</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">handler</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">choices</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29\">for</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">choice</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">choices</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">choice</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">handler</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">results-rev</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">results-rev</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">handler</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Flist..rkt%29._reverse%29%29\">reverse</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">results-rev</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choose</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vs</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._fcontrol%29%29\">fcontrol</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vs</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">fail</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choose</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">assert</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">good?</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._unless%29%29\">unless</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">good?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">nondet</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choose</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">7</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">8</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">9</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">11</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">12</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choose</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">7</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">8</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">9</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">11</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">12</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">assert</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c~3d%29%29\">&lt;=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choose</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">7</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">8</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">9</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">11</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">12</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">assert</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c~3d%29%29\">&lt;=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">assert</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3d%29%29\">=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28lib._racket%2Fmath..rkt%29._sqr%29%29\">sqr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28lib._racket%2Fmath..rkt%29._sqr%29%29\">sqr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28lib._racket%2Fmath..rkt%29._sqr%29%29\">sqr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'((3 4 5) (6 8 10))</span></p></td></tr></tbody></table></div>\n\n<p>In the body of the <span class=\"RktSym\">nondet</span>, we can call <span class=\"RktSym\">choose</span> to make a non-deterministic choice between a list of items. This \"forks\" the search, running it against all choices. Even though the code will try all possible combinations, the code looks flat! We can terminate the current branch of the search by choosing between an empty list of choices. If the body reaches its end, that means we found what we were looking for, so we push it onto the results list. In the end, the entire <span class=\"RktSym\">nondet</span> returns the list of all search matches.</p>\n\n<p>The magic of the implementation is in the handler. <span class=\"RktSym\">k</span> is a function that resumes the body, filling in the hole of the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._fcontrol%29%29\">fcontrol</a></span> with its argument. Since we want to try every possible choice, we loop through the choices and call <span class=\"RktSym\">k</span> with each choice! The rest is just book-keeping to collect all the search matches and making sure the handler stays active.</p>\n\n<p>You might be wondering why choosing between an empty list of choices terminates the search branch. What will happen in the handler? We&rsquo;ll loop through an empty list of choices, so we&rsquo;ll never call <span class=\"RktSym\">k</span>. This means we&rsquo;ll never resume in the body!</p>\n\n<p>In our implementation of generators, to make sure we have deep effect handling (as opposed to the default shallow handling that <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span> and <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._fcontrol%29%29\">fcontrol</a></span> provides), we recurred in the handler. Our implementation of non-determinism doesn&rsquo;t lend itself to that kind of recursion, so instead, we call <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span> in the handler to re-establish only the effect handling, and not the book-keeping. There is still some recursion though, since the handler passes itself to <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span>.</p>\n\n<p>Alright, let&rsquo;s make some abstractions!</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">perform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._fcontrol%29%29\">fcontrol</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-effect-handler/proc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">their-handler</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">handler</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">k^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">handler</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">their-handler</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k^</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">handler</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-effect-handler</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">their-handler</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-effect-handler/proc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">their-handler</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p><span class=\"RktSym\">perform</span> is just <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._fcontrol%29%29\">fcontrol</a></span>. <span class=\"RktSym\">with-effect-handler</span> is like <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span>, but has deep effect handling instead of shallow effect handling. The way we achieved deep effect handling is slightly different here than what we did for non-determinism. Instead of using <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span> in the handler directly, we provide the handler with a wrapped continuation <span class=\"RktSym\">k^</span> which uses <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span> when called. This has a few benefits: if the user-supplied handler performs an effect during handling, it won&rsquo;t be handled by the handler that they&rsquo;re writing, it&rsquo;ll bubble out to whatever handler is outside of the whole <span class=\"RktSym\">with-effect-handler</span>. Another benefit of this is that if the <span class=\"RktSym\">k^</span> ends up being used outside of the dynamic extent of the <span class=\"RktSym\">with-effect-handlers</span>, it&rsquo;ll re-establish effect handling as expected.</p>\n\n<p>Let&rsquo;s re-implement <span class=\"RktSym\">nondet</span> using these abstractions just to get a feel for them:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">nondet</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">results-rev</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">handler</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">choices</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29\">for</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">choice</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">choices</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">choice</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-effect-handler</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">handler</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">results-rev</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">results-rev</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Flist..rkt%29._reverse%29%29\">reverse</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">results-rev</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choose</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vs</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">perform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vs</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">fail</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choose</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">assert</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">good?</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._unless%29%29\">unless</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">good?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">nondet</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choose</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">7</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">8</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">9</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">11</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">12</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choose</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">7</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">8</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">9</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">11</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">12</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">assert</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c~3d%29%29\">&lt;=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choose</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">7</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">8</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">9</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">11</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">12</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">assert</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c~3d%29%29\">&lt;=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">assert</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3d%29%29\">=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28lib._racket%2Fmath..rkt%29._sqr%29%29\">sqr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28lib._racket%2Fmath..rkt%29._sqr%29%29\">sqr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28lib._racket%2Fmath..rkt%29._sqr%29%29\">sqr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'((3 4 5) (6 8 10))</span></p></td></tr></tbody></table></div>\n\n<p>We no longer have to worry about re-establishing the handler since with-effect-handler takes care of that for us.</p>\n\n<p>Nice! But there is one big problem with this implementation: you can&rsquo;t use two effects at the same time. If we want to use non-determinism inside of a generator, it won&rsquo;t work because if we <span class=\"RktSym\">my-yield</span> inside of a <span class=\"RktSym\">non-det</span>, the effect will be handled like a <span class=\"RktSym\">choose</span> effect, not a yield. How do we get around this?</p>\n\n<p>One idea is to make structs for our effects and only handle effects that match a certain predicate, like what racket does for exceptions. This would work, but a much simpler way is to use continuation prompt tags. These essentially allow us to have independent delimited continuations that don&rsquo;t interfere with each other in the ways we&rsquo;re worried about. We&rsquo;d just make a continuation prompt for generators and our generator handlers/operators would use that prompt tag, and the same story for other effects.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">perform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/creatingunits.html#%28form._%28%28lib._racket%2Funit..rkt%29._tag%29%29\">tag</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._default-continuation-prompt-tag%29%29\">default-continuation-prompt-tag</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._fcontrol%29%29\">fcontrol</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:tag</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/creatingunits.html#%28form._%28%28lib._racket%2Funit..rkt%29._tag%29%29\">tag</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-effect-handler/proc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">their-handler</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">thnk</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/creatingunits.html#%28form._%28%28lib._racket%2Funit..rkt%29._tag%29%29\">tag</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._default-continuation-prompt-tag%29%29\">default-continuation-prompt-tag</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">handler</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">k^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">handler</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:tag</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/creatingunits.html#%28form._%28%28lib._racket%2Funit..rkt%29._tag%29%29\">tag</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">their-handler</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k^</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._~25%29%29\">%</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">thnk</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">handler</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">#:tag</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/creatingunits.html#%28form._%28%28lib._racket%2Funit..rkt%29._tag%29%29\">tag</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-effect-handler</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/creatingunits.html#%28form._%28%28lib._racket%2Funit..rkt%29._tag%29%29\">tag</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">their-handler</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-effect-handler/proc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">their-handler</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/creatingunits.html#%28form._%28%28lib._racket%2Funit..rkt%29._tag%29%29\">tag</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">generator-tag</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._make-continuation-prompt-tag%29%29\">make-continuation-prompt-tag</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">generator</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-generator</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-effect-handler</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">generator-tag</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream-cons%29%29\">stream-cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29\">void</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28def._%28%28lib._racket%2Fstream..rkt%29._empty-stream%29%29\">empty-stream</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-yield</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">perform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">generator-tag</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28def._%28%28lib._racket%2Fstream..rkt%29._stream-~3elist%29%29\">stream-&gt;list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-generator</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-yield</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-yield</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(1 2)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nondet-tag</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._make-continuation-prompt-tag%29%29\">make-continuation-prompt-tag</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">nondet</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">nondet</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">results-rev</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-effect-handler</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nondet-tag</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choices</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29\">for</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">choice</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">choices</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">choice</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">results-rev</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">results-rev</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Flist..rkt%29._reverse%29%29\">reverse</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">results-rev</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choose</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vs</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">perform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nondet-tag</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">fail</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choose</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">assert</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">good?</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._unless%29%29\">unless</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">good?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">nondet</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choose</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">7</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">8</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">9</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">11</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">12</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choose</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">7</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">8</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">9</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">11</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">12</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">assert</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c~3d%29%29\">&lt;=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choose</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">7</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">8</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">9</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">11</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">12</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">assert</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c~3d%29%29\">&lt;=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">assert</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3d%29%29\">=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28lib._racket%2Fmath..rkt%29._sqr%29%29\">sqr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28lib._racket%2Fmath..rkt%29._sqr%29%29\">sqr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28lib._racket%2Fmath..rkt%29._sqr%29%29\">sqr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'((3 4 5) (6 8 10))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28def._%28%28lib._racket%2Fstream..rkt%29._stream-~3elist%29%29\">stream-&gt;list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-generator</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">nondet</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-yield</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choose</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choose</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'((1 a) (1 b) (1 c) (2 a) (2 b) (2 c) (3 a) (3 b) (3 c))</span></p></td></tr></tbody></table></div>\n\n<p>Now we can use effects together!</p>\n\n<p>Before we go, I want to show you one more cool example of algebraic effects: A compiler!</p>\n\n<p>Let&rsquo;s say we&rsquo;re writing a compiler targeting some assembly language. Our language is very simple, only containing addition, multiplication, numbers, variables, and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span>. Let&rsquo;s say we&rsquo;re trying to compile <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"stt\"> </span><span class=\"RktVal\">2</span><span class=\"stt\"> </span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"stt\"> </span><span class=\"RktVal\">4</span><span class=\"stt\"> </span><span class=\"RktVal\">5</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span>. In assembly, we can&rsquo;t perform deep calculations like this, all we can do is add the contents of two registers or multiply the contents of two registers. In other words, we can only perform operations on two immediately available numbers, no sub-computations, so we need to fully simplify the two arguments to <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span> before we can add them. But those two arguments could be the results of big computations too! Ideally, our program would only ever add two immediately available values. An equivalent, easier-to-compile program would look like this:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>In this program, the only arguments to <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span> and <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span> are numbers or variables (variables are ok, just not complex sub-computations). Fortunately, we don&rsquo;t have to force the users of our language to write this way, we can just translate their program into an equivalent, nicer one like this. This is called A-normal form, or ANF for short. The idea is, if we are performing an operation and the argument is a complex expression, create a temporary variable to evaluate the argument first and replace the expression with that variable instead. And we do this recursively, so each addition and multiplication only ever has variables or constant arguments and variables are bound before use, of course. Let&rsquo;s write a translator:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-anf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28quote._~23~25kernel%29._define-values%29%29\">define-values</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">expr^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bindings</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-anf/help</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Flist..rkt%29._foldr%29%29\">foldr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">binding</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">let</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">[</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._car%29%29\">car</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">binding</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cdr%29%29\">cdr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">binding</span><span class=\"RktPn\">)</span><span class=\"RktVal\">]</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">expr</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">expr^</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">bindings</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-anf/help</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/number-types.html#%28def._%28%28quote._~23~25kernel%29._number~3f%29%29\">number?</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._symbol~3f%29%29\">symbol?</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/values.html#%28def._%28%28quote._~23~25kernel%29._values%29%29\">values</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">op</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">*</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">b-expr</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28quote._~23~25kernel%29._define-values%29%29\">define-values</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">a-immediate</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a-bindings</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-immediate</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a-expr</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28quote._~23~25kernel%29._define-values%29%29\">define-values</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">b-immediate</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b-bindings</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-immediate</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b-expr</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/values.html#%28def._%28%28quote._~23~25kernel%29._values%29%29\">values</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">op</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a-immediate</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">b-immediate</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a-bindings</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b-bindings</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">let</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">[</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">rhs</span><span class=\"RktVal\">]</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28quote._~23~25kernel%29._define-values%29%29\">define-values</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">rhs^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">rhs-bindings</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-anf/help</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">rhs</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28quote._~23~25kernel%29._define-values%29%29\">define-values</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">body^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body-bindings</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-anf/help</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/values.html#%28def._%28%28quote._~23~25kernel%29._values%29%29\">values</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">rhs-bindings</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">rhs^</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">body-bindings</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-immediate</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/number-types.html#%28def._%28%28quote._~23~25kernel%29._number~3f%29%29\">number?</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._symbol~3f%29%29\">symbol?</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/values.html#%28def._%28%28quote._~23~25kernel%29._values%29%29\">values</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28quote._~23~25kernel%29._define-values%29%29\">define-values</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">expr^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bindings</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-anf/help</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">anf</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/values.html#%28def._%28%28quote._~23~25kernel%29._values%29%29\">values</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bindings</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr^</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-anf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(let ((anf22765 (* 2 3))) (let ((anf22766 (* 4 5))) (+ anf22765 anf22766)))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">let</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">[</span><span class=\"RktVal\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">]</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">7</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">8</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">9</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-anf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\">'(let ((anf22767 (* 2 3)))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(let ((anf22768 (* 4 5)))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(let ((a (+ anf22767 anf22768)))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(let ((anf22769 (* a 6)))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(let ((anf22770 (+ anf22769 7)))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(let ((anf22771 (+ 8 9))) (+ anf22770 anf22771)))))))</span></p></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/eval.html#%28def._%28%28quote._~23~25kernel%29._eval%29%29\">eval</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">180</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/eval.html#%28def._%28%28quote._~23~25kernel%29._eval%29%29\">eval</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-anf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">180</span></p></td></tr></tbody></table></div>\n\n<p>Our translator helpers return an expression and the bindings that are necessary for it. We build up our list of bindings, carefully maintaining its order such that variables are definitely bound before use and we maintain the desired order of evaluation. Every time we encounter a complex expression that needs simplification, we replace some of that expression with variables and bind those variables outside of the expression we&rsquo;re building.</p>\n\n<p>This is very awkward and doesn&rsquo;t lend itself to nice structural recursion. We can&rsquo;t recursively transform each sub-expression to ANF and then easily combine those two results since we need the bindings from both to combine, which involves putting part of one expression inside of another, but not the whole thing. Instead of trying to do that, we accumulate the list of bindings that will eventually surround the whole expression and at the very end, add all the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span>s around it.</p>\n\n<p>Here&rsquo;s another way to think about what&rsquo;s going on here: We&rsquo;re recursively diving into this expression to simplify it. The innermost parts of the expression will create the outermost bindings since the results of the inner expression are needed first. The innermost part of the input corresonds to the outermost part of the output, unlike typical structural recursion where the innermost part of the input corresponds to the innermost part of the output. Typical recursion doesn&rsquo;t combine in the way that we want, so we have to make our own little system where we keep track of bindings throughout our computation. Haskellers among you might smell a monad in the air. This is a special type of computation, like non-determinism and generators, where we could benefit from an alternative control flow using continuations.</p>\n\n<p>Here is the same translation implemented using algebraic effects:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">anf-tag</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._make-continuation-prompt-tag%29%29\">make-continuation-prompt-tag</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">anf</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">anf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-effect-handler</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">anf-tag</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">bind!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">expr</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._symbol~3f%29%29\">symbol?</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/number-types.html#%28def._%28%28quote._~23~25kernel%29._number~3f%29%29\">number?</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">anf</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">let</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">[</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">expr</span><span class=\"RktVal\">]</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lift!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">expr</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">let</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">[</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">expr</span><span class=\"RktVal\">]</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29\">void</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bind!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">perform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">bind!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">expr</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">anf-tag</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">lift!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">perform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lift!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">expr</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">anf-tag</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-anf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">anf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-anf/help</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-anf/help</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._symbol~3f%29%29\">symbol?</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/number-types.html#%28def._%28%28quote._~23~25kernel%29._number~3f%29%29\">number?</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">op</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">*</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">a-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">b-expr</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">op</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-immediate</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a-expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-immediate</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b-expr</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">let</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">[</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">rhs-expr</span><span class=\"RktVal\">]</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body-expr</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">rhs-expr^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-anf/help</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">rhs-expr</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">lift!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">rhs-expr</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-anf/help</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body-expr</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-immediate</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bind!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-anf/help</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-anf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(let ((anf22792 (* 2 3))) (let ((anf22793 (* 4 5))) (+ anf22792 anf22793)))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">let</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">[</span><span class=\"RktVal\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">]</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">7</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">8</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">9</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-anf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\">'(let ((anf22794 (* 2 3)))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(let ((anf22795 (* 4 5)))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(let ((a (+ (* 2 3) (* 4 5))))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(let ((anf22796 (* a 6)))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(let ((anf22797 (+ anf22796 7)))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(let ((anf22798 (+ 8 9))) (+ anf22797 anf22798)))))))</span></p></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/eval.html#%28def._%28%28quote._~23~25kernel%29._eval%29%29\">eval</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">180</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/eval.html#%28def._%28%28quote._~23~25kernel%29._eval%29%29\">eval</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">to-anf</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">180</span></p></td></tr></tbody></table></div>\n\n<p>We created a new effect, <span class=\"RktSym\">bind!</span>, which binds an expression to a variable by wrapping the result of the rest of the computation in a <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span> and returns the variable. If the expression is an immediate, it is returned as-is. Let&rsquo;s think about why this works: The leftmost innermost expression is the one which should get evaluated, and thus bound, first, which means it should be bound in the outermost let. Since the structure of our recursion matches the desired order of evaluation, the first call to <span class=\"RktSym\">bind!</span> will correspond to the expression that will be evaluated first. So we&rsquo;ll wrap the whole rest of the computation in that first <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span>. Remember, the \"computation\" here is the translation itself. The rest of the computation includes subsequent calls to <span class=\"RktSym\">bind!</span>, which will create <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span> bindings inside of this outer one, as they should. The result is a lot of nested <span class=\"RktSym\">lets</span> with an ANF expression at the center for the final result of the supplied program.</p>\n\n<p>We also have an effect <span class=\"RktSym\">lift!</span> which is like <span class=\"RktSym\">bind!</span>, but we supply the variable instead of generating a fresh one. This allows us to lift a user-specified <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span> binding into the big nesting that we&rsquo;re building.</p>\n\n<p>This is confusing, but it allows our code to be so much more concise. We don&rsquo;t have to track bindings and combine them everywhere. We don&rsquo;t even have to worry about bindings at all except for calling <span class=\"RktSym\">bind!</span> and <span class=\"RktSym\">lift!</span>. The rest of the code can just be structurally recursive as if there was nothing weird going on.</p>\n\n<p>This idea of the effects not \"polluting\" or \"infecting\" the code around it is very special. If you&rsquo;ve used JavaScript&rsquo;s promises or Haskell&rsquo;s monads, you&rsquo;ve felt the pain of what is sometimes called colored code. If you need to use the result of a promise, your whole function needs to be async, which means everything that uses that function needs to be async too, and so on. This \"colors\" your code. JavaScript code is either async or not, and async code infects non-async code. In Haskell, monads can be similarly infectious and color your code. There is some syntactic sugar, like JavaScript&rsquo;s <span class=\"RktSym\">async</span><span class=\"RktMeta\"></span> and <span class=\"RktSym\">await</span><span class=\"RktMeta\"></span> and Haskell&rsquo;s <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._do%29%29\">do</a></span><span class=\"RktMeta\"></span> notation, but your code is still colored. If some part of your computation deep down needs to be async, the whole thing needs to be async.</p>\n\n<p>In an ideal world, when calling a function, you shouldn&rsquo;t have to care if something async happens. Any effects in sub-computations should be abstracted away and not require code-changes in the caller. Algebraic effects allow us to do exactly this. They can model promises, monads, and more without coloring your code.</p>\n\n<p>So should every language use algebraic effects? No, probably not. They are confusing, they make code reasoning non-local since you&rsquo;re jumping all over the place, they are hard to statically type, and multi-shot continuations like with non-determinism are not performant. In order for a language to support algebraic effects, it pretty much has to transform to CPS, which isn&rsquo;t right for every language. For now, it will be one of those cool features of niche languages like Racket.</p>\n\n<p>Algebraic effects give us the power of continuations, wrapped up in an abstraction that lends itself to clearer code compared to raw use of <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span>, <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>, <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>, etc. Now you know what they are, how to use them, and how to implement them yourself.</p>")) ((? . 9) f post (u . "Understanding and Implementing a Macro System") (? . 9) 1744126109 (p+ #"/home/runner/work/blog/blog/repo/2023/12/understanding-and-implementing-a-macro-system.html" . unix) (u . "/blog/2023/12/understanding-and-implementing-a-macro-system.html") (u . "2023-12-01T03:11:00") (? . 1) (? . 8) (c (u . "racket") c (u . "tutorials") c (u . "programming-languages") c (u . "understand-and-implement") c (u . "macros")) (u . "\n<p>Macros are a powerful tool that allow programmers to extend the syntax of a language. In a language with macros, features like for-loops, while-loops, and pattern matching can be implemented as a library by users of the langauge! In this post, we&rsquo;ll discover what macros are, how and why to use them, and how to implement a tiny language with a simple macro system.</p>\n\n<p>For this post, you&rsquo;ll need some familiarity with Racket, but no familiarity with macros is required. If you don&rsquo;t know what something is, click on the variable name in the code and you&rsquo;ll be taken to its documentation.</p>") #t (u . "\n<p>Macros are a powerful tool that allow programmers to extend the syntax of a language. In a language with macros, features like for-loops, while-loops, and pattern matching can be implemented as a library by users of the langauge! In this post, we&rsquo;ll discover what macros are, how and why to use them, and how to implement a tiny language with a simple macro system.</p>\n\n<p>For this post, you&rsquo;ll need some familiarity with Racket, but no familiarity with macros is required. If you don&rsquo;t know what something is, click on the variable name in the code and you&rsquo;ll be taken to its documentation.</p>\n<!--more-->\n\n<p>Let&rsquo;s say you want to swap two variables, <span class=\"RktSym\">x</span> and <span class=\"RktSym\">y</span>. This is how we&rsquo;d do it normally:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">tmp</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">tmp</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">tmp</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">x</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">y</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr></tbody></table></div>\n\n<p>If we did this often, it&rsquo;d get pretty annoying to have to do the same thing every time. We should try to abstract it! Let&rsquo;s write a function, <span class=\"RktSym\">swap!</span>, to do it for us:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">swap!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">tmp</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">tmp</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">tmp</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">swap!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">x</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">y</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr></tbody></table></div>\n\n<p>It didn&rsquo;t work! This is because when you mutate an argument to a function, it doesn&rsquo;t affect the variable you passed in. If we passed in some mutable structure like a <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/boxes.html#%28def._%28%28quote._~23~25kernel%29._box%29%29\">box</a></span>, we could mutate the box, but that&rsquo;s not we want. We want to mutate variables. Is there a way to pass in a variable itself? Sort of, but not with regular old functions like this.</p>\n\n<p>If you like to make abstractions to avoid repeating yourself, you&rsquo;ve likely hit this sort of wall before. You want to make some abstraction, but functions aren&rsquo;t enough for what you need.</p>\n\n<p>One way to solve this problem is to dynamically generate code. For example, we could make a special pre-processor that detects usages of <span class=\"RktSym\">swap!</span> and replaces them with the code that swaps the two variables.</p>\n\n<p>That would work, but it sounds very messy. We&rsquo;d need to make a parser for Racket programs, we&rsquo;d have to carefully detect usages of things like <span class=\"RktSym\">swap!</span>, and we&rsquo;d have to implement all of the rewrite rules we want in the pre-processor. But what if this pre-processor was integrated into the language itself? After all, Racket already has a parser for Racket programs!</p>\n\n<p>This is basically what a macro system is. Macros are like rewrite rules that rewrite the code before it runs. Racket, of course, already has macros:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">swap!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">tmp</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">tmp</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">tmp</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">swap!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">x</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">y</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr></tbody></table></div>\n\n<p>We define macros with something like <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span> and we use them with the same syntax as function calls.</p>\n\n<p>Macros are great for little rewrite rules like this, but they are also good for more complicated syntactic abstractions. For example, let&rsquo;s pretend Racket doesn&rsquo;t have any looping mechanisms. How would we implement while loops?</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">iterations</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">while</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c%29%29\">&lt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">iterations</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">iterations</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">iterations</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"loop\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>One easy way to do this would be recursion:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">iterations</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">go</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._when%29%29\">when</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c%29%29\">&lt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">iterations</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">iterations</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">iterations</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"loop\"</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">go</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">go</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">loop</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">loop</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">loop</span></p></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>When you do a while loop like <span class=\"RktPn\">(</span><span class=\"RktSym\">while</span><span class=\"stt\"> </span><span class=\"RktSym\">condition</span><span class=\"stt\"> </span><span class=\"RktSym\">body</span><span class=\"stt\"> </span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span> using recursion, it will generally look like this:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">go</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._when%29%29\">when</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">condition</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">body</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">go</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">go</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>If the condition is truthy, we run the body and then recur to loop again. If it&rsquo;s not, we&rsquo;ll just stop looping and return nothing. And we need to kick the whole thing off with a call to <span class=\"RktSym\">go</span>.</p>\n\n<p>The actual implementation of the macro looks exactly like what we wrote:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">while</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">condition</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">go</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._when%29%29\">when</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">condition</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">body</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">go</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">go</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">iterations</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">while</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c%29%29\">&lt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">iterations</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">iterations</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">iterations</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"loop\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">loop</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">loop</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">loop</span></p></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>The <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span> is just a little trick to allow us to use <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span> and multiple expressions in the result of our macro.</p>\n\n<p>This is pretty cool, and a little more complicated than our <span class=\"RktSym\">swap!</span> macro, but it&rsquo;s still just scratching the surface of what macros are capable of. We can implement entire domain specific languages with macros like <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/createclass.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._class%29%29\">class</a></span>, and we can even embed entire programming languages like <a href=\"http://minikanren.org/\">mini kanren</a>.</p>\n\n<p>Now that we know what macros are, let&rsquo;s implement them! To do this, we&rsquo;re going to make a little programming language that has a macro system. It won&rsquo;t be as nice as Racket&rsquo;s macro system, but it&rsquo;ll give a sense of how macros work.</p>\n\n<p>Before we start doing anything fancy with macros, let&rsquo;s build a regular old interpreter for the lambda calculus.</p>\n\n<p>We are, of course, going to be using s-expressions as syntax. For those unfamiliar, an s-expression is either an atom, like a variable name or a number, or a parentheses-enclosed list of s-expressions. This simple representation makes syntax very easy to manipulate as data, which is exactly what our macros will end up doing.</p>\n\n<p>For example, the expression <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span> is represented as <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktVal\">'</span><span class=\"RktVal\">add1</span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span>. The first element of the list is a symbol, <span class=\"RktVal\">'</span><span class=\"RktVal\">add1</span>, which represents a variable name. The second element is the number <span class=\"RktVal\">1</span>. Numbers just represent themselves.</p>\n\n<p>To create s-expressions, we can use <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">quote</a></span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktKw\">quote</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(add1 1)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(add1 1)</span></p></td></tr></tbody></table></div>\n\n<p><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">quote</a></span> is so important, there is special syntax for it:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktVal\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(add1 1)</span></p></td></tr></tbody></table></div>\n\n<p><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">quote</a></span> takes in an expression and returns the expression itself as data instead of evaluating it.</p>\n\n<p>Another useful tool for building s-expressions is <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quasiquote.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._quasiquote%29%29\">quasiquote</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quasiquote.html#%28form._%28%28quote._~23~25kernel%29._unquote%29%29\">unquote</a></span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(add1 3)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(add1 3)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktKw\">quasiquote</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktKw\">unquote</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(add1 3)</span></p></td></tr></tbody></table></div>\n\n<p><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quasiquote.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._quasiquote%29%29\">quasiquote</a></span> is like <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">quote</a></span>, but we can escape the quotation with <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quasiquote.html#%28form._%28%28quote._~23~25kernel%29._unquote%29%29\">unquote</a></span> to actually evaluate an expression instead of just putting it right in the output as-is. This is sort of like format strings in Python or template literal strings in JavaScript, but for making s-expressions instead of strings.</p>\n\n<p>Of course, this has a shorthand too:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(add1 3)</span></p></td></tr></tbody></table></div>\n\n<p>In our little language, macros will be functions that take in an expression and return an s-expression. We&rsquo;ll call these functions transformers. Like in Racket, macro usages will look just like function calls. But when a function call expression is a macro usage, instead of evaluating the function and arguments and passing them to the function, we&rsquo;ll pass the whole macro usage expression to the transformer function.</p>\n\n<p>For example, here&rsquo;s what <span class=\"RktSym\">swap!</span> will look like:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">let-macro</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">swap!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">tmp</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">tmp</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">let</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">[</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">tmp</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._second%29%29\">second</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"RktVal\">]</span><span class=\"RktVal\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">begin</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">set!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">tmp</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._second%29%29\">second</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">set!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._second%29%29\">second</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">third-expr</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">set!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">third-expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">tmp</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/begin.html#%28form._%28%28quote._~23~25kernel%29._begin%29%29\">begin</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">swap!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>The transformer takes in the expression <span class=\"RktPn\">(</span><span class=\"RktSym\">swap!</span><span class=\"stt\"> </span><span class=\"RktSym\">x</span><span class=\"stt\"> </span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span>, which is a list of three elements. The second and third are <span class=\"RktSym\">x</span> and <span class=\"RktSym\">y</span> respectively. The first is just <span class=\"RktSym\">swap!</span>. These types of macros are very annoying to write, which is one of the reasons why we have tools like <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span>.</p>\n\n<p>For now, we&rsquo;ll start out by making an interpreter for a language with just <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span> expressions, function applications, variables, and constants like numbers. I&rsquo;ll assume you&rsquo;re somewhat familiar with lambda calculus interpreters so I won&rsquo;t explain it in depth:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">racket/hash</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._symbol~3f%29%29\">symbol?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/hashtables.html#%28def._%28%28quote._~23~25kernel%29._hash-ref%29%29\">hash-ref</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"unbound variable ~a\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">argnames</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">args</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._unless%29%29\">unless</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3d%29%29\">=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._length%29%29\">length</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">argnames</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._length%29%29\">length</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">args</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"arity error\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg-env</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Fhasheq%29%29\">for/hasheq</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">argname</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">argnames</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">arg</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">args</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/values.html#%28def._%28%28quote._~23~25kernel%29._values%29%29\">values</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">argname</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/hashtables.html#%28def._%28%28lib._racket%2Fhash..rkt%29._hash-union%29%29\">hash-union</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg-env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">fun-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg-exprs</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._apply%29%29\">apply</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">fun-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Flist%29%29\">for/list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">arg-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg-exprs</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">atom</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">atom</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-top</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/hashtables.html#%28def._%28%28quote._~23~25kernel%29._hasheq%29%29\">hasheq</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-top</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-top</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr></tbody></table></div>\n\n<p><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span> has <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quasiquote.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._quasiquote%29%29\">quasiquote</a></span> patterns, which match quoted forms as their s-expressions and unquoted forms as patterns. So the pattern <span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"stt\"> </span><span class=\"RktRdr\">,</span><span class=\"RktSym\">argnames</span><span class=\"stt\"> </span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body</span><span class=\"RktVal\">)</span> is equivalent to the pattern <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktVal\">'</span><span class=\"RktVal\">lambda</span><span class=\"stt\"> </span><span class=\"RktSym\">argnames</span><span class=\"stt\"> </span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span>.</p>\n\n<p>We&rsquo;re using a <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/hashtables.html#%28def._%28%28quote._~23~25kernel%29._hasheq%29%29\">hasheq</a></span> to represent our runtime environment mapping variables to values. We&rsquo;re also using Racket functions to represent our functions, which is kind of cheating. But we&rsquo;re not interested in writing a lambda calculus interpreter, we&rsquo;re interested in writing a macro system! So we&rsquo;ll leverage as much of Racket&rsquo;s interpreter as we can.</p>\n\n<p>Let&rsquo;s also add some built-in functions and special forms:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">built-ins</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/hashtables.html#%28def._%28%28quote._~23~25kernel%29._hasheq%29%29\">hasheq</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">list</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">cons</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">equal?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._equal~3f%29%29\">equal?</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">first</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._first%29%29\">first</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">second</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._second%29%29\">second</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">third</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._third%29%29\">third</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">gensym</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">displayln</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._symbol~3f%29%29\">symbol?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/hashtables.html#%28def._%28%28quote._~23~25kernel%29._hash-ref%29%29\">hash-ref</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"unbound variable ~a\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">argnames</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">args</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._unless%29%29\">unless</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3d%29%29\">=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._length%29%29\">length</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">argnames</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._length%29%29\">length</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">args</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"arity error\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg-env</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Fhasheq%29%29\">for/hasheq</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">argname</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">argnames</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">arg</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">args</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/values.html#%28def._%28%28quote._~23~25kernel%29._values%29%29\">values</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">argname</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/hashtables.html#%28def._%28%28lib._racket%2Fhash..rkt%29._hash-union%29%29\">hash-union</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg-env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">if</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">condition-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">then-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">else-expr</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">condition-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">then-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">else-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">let</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">[</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">rhs</span><span class=\"RktVal\">]</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/hashtables.html#%28def._%28%28quote._~23~25kernel%29._hash-set%29%29\">hash-set</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">rhs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">begin</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">exprs</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._last%29%29\">last</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29\">void</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Flist%29%29\">for/list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">exprs</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">quote</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">fun-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg-exprs</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._apply%29%29\">apply</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">fun-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Flist%29%29\">for/list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">arg-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg-exprs</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">atom</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">atom</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-top</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">built-ins</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-top</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">if</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">42</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">3</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-top</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">let</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">[</span><span class=\"RktVal\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktVal\">)</span><span class=\"RktVal\">]</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">list</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(3 3)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-top</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">list</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(1 (add1 x))</span></p></td></tr></tbody></table></div>\n\n<p>Since we&rsquo;re representing functions as Racket functions, we can just put Racket functions into our initial environment to add built-ins.</p>\n\n<p><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span>, <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span>, and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/begin.html#%28form._%28%28quote._~23~25kernel%29._begin%29%29\">begin</a></span> are unsurprising. For <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">quote</a></span>, we just return <span class=\"RktSym\">expr</span> without evaluating it. Also, we used a list pattern for it, but we could&rsquo;ve used <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quasiquote.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._quasiquote%29%29\">`</a></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">quote</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quasiquote.html#%28form._%28%28quote._~23~25kernel%29._unquote%29%29\">,</a></span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span> or even <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quasiquote.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._quasiquote%29%29\">`</a></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quasiquote.html#%28form._%28%28quote._~23~25kernel%29._unquote%29%29\">,</a></span><span class=\"RktSym\">expr</span><span class=\"RktMeta\"></span>. I just decided to use a list pattern to avoid confusion, but these three patterns are equivalent.</p>\n\n<p>You might be wondering how we can use the apostrophe shorthand in our language like in the last example. The racket parser (technically, the reader) translates <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktSym\">expr</span><span class=\"RktMeta\"></span> into <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">quote</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span> before macros expand or code runs (macro expansion refers to macro usages being re-written). So in the last example, our interpreter actually ends up getting the s-expression <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktVal\">'</span><span class=\"RktVal\">list</span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktVal\">'</span><span class=\"RktVal\">quote</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktVal\">'</span><span class=\"RktVal\">add1</span><span class=\"stt\"> </span><span class=\"RktVal\">'</span><span class=\"RktVal\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span>.</p>\n\n<p>Now let&rsquo;s implement <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quasiquote.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._quasiquote%29%29\">quasiquote</a></span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._symbol~3f%29%29\">symbol?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/hashtables.html#%28def._%28%28quote._~23~25kernel%29._hash-ref%29%29\">hash-ref</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"unbound variable ~a\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">argnames</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">args</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._unless%29%29\">unless</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3d%29%29\">=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._length%29%29\">length</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">argnames</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._length%29%29\">length</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">args</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"arity error\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg-env</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Fhasheq%29%29\">for/hasheq</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">argname</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">argnames</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">arg</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">args</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/values.html#%28def._%28%28quote._~23~25kernel%29._values%29%29\">values</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">argname</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/hashtables.html#%28def._%28%28lib._racket%2Fhash..rkt%29._hash-union%29%29\">hash-union</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg-env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">if</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">condition-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">then-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">else-expr</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">condition-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">then-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">else-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">let</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">[</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">rhs</span><span class=\"RktVal\">]</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/hashtables.html#%28def._%28%28quote._~23~25kernel%29._hash-set%29%29\">hash-set</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">rhs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">begin</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">exprs</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._last%29%29\">last</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29\">void</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Flist%29%29\">for/list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">exprs</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">quote</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">quasiquote</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-quasiquote</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">fun-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg-exprs</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._apply%29%29\">apply</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">fun-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Flist%29%29\">for/list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">arg-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg-exprs</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">atom</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">atom</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-quasiquote</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">unquote</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list~3f%29%29\">list?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">exprs</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Flist%29%29\">for/list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">exprs</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-quasiquote</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-top</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">,</span><span class=\"RktVal\">(</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(+ 1 3)</span></p></td></tr></tbody></table></div>\n\n<p>We recursively go through the expression&rsquo;s children searching for <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quasiquote.html#%28form._%28%28quote._~23~25kernel%29._unquote%29%29\">unquote</a></span> and evaluating those expressions when we find them. Without <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quasiquote.html#%28form._%28%28quote._~23~25kernel%29._unquote%29%29\">unquote</a></span>s, we end up reproducing the original expression like <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">quote</a></span>. This is a much simpler, less powerful version of Racket&rsquo;s <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quasiquote.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._quasiquote%29%29\">quasiquote</a></span>, but it&rsquo;ll suffice for us.</p>\n\n<p>Now, we&rsquo;re ready to implement macros!</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">transformer</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">fun</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._symbol~3f%29%29\">symbol?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/hashtables.html#%28def._%28%28quote._~23~25kernel%29._hash-ref%29%29\">hash-ref</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"unbound variable ~a\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">argnames</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">args</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._unless%29%29\">unless</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3d%29%29\">=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._length%29%29\">length</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">argnames</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._length%29%29\">length</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">args</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"arity error\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg-env</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Fhasheq%29%29\">for/hasheq</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">argname</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">argnames</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">arg</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">args</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/values.html#%28def._%28%28quote._~23~25kernel%29._values%29%29\">values</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">argname</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/hashtables.html#%28def._%28%28lib._racket%2Fhash..rkt%29._hash-union%29%29\">hash-union</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg-env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">if</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">condition-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">then-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">else-expr</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">condition-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">then-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">else-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">let</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">[</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">rhs</span><span class=\"RktVal\">]</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/hashtables.html#%28def._%28%28quote._~23~25kernel%29._hash-set%29%29\">hash-set</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">rhs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">begin</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">exprs</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._last%29%29\">last</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29\">void</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Flist%29%29\">for/list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">exprs</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">quote</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">quasiquote</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-quasiquote</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">let-macro</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">[</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">transformer-expr</span><span class=\"RktVal\">]</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/hashtables.html#%28def._%28%28quote._~23~25kernel%29._hash-set%29%29\">hash-set</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">transformer</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">transformer-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">fun-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg-exprs</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">fun</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">fun-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">transformer?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">fun</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">transformer-fun</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">fun</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._apply%29%29\">apply</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">fun</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Flist%29%29\">for/list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">arg-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg-exprs</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">arg-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">env</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">atom</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">atom</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-top</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">let-macro</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">[</span><span class=\"RktVal\">one</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">expr</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktVal\">)</span><span class=\"RktVal\">]</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">one</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval-top</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">let-macro</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">[</span><span class=\"RktVal\">describe</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">expr</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">list</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">,</span><span class=\"RktVal\">(</span><span class=\"RktVal\">second</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">expr</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktVal\">,</span><span class=\"RktVal\">(</span><span class=\"RktVal\">second</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">expr</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">]</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">describe</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'((+ 1 2) 3)</span></p></td></tr></tbody></table></div>\n\n<p>First, we made a struct for our transformers so we can distinguish between regular functions and macros. And to create macros, we have a different version of <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span> called <span class=\"RktSym\">let-macro</span> that turns the value into a transformer before binding it to the variable. Then, all we had to do was modify the application case to check if the function is a transformer or not. If it is a transformer, we apply it to the entire expression, which produces another expression. Finally, we evaluate the resulting expression. That&rsquo;s it! Now we have macros.</p>\n\n<p>The transformer stuff is really all there is to macros in our system. We only bothered doing <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quasiquote.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._quasiquote%29%29\">quasiquote</a></span> and all those other things so it would be easier for users of our language to write macros.</p>\n\n<p>Racket&rsquo;s macro system is much more sophisticated than the one we implemented here, of course. Unlike our language, Racket expands all macros away before any of the code runs. Another nice thing Racket&rsquo;s macro system does is handle variable collisions for you. Remember how we made a <span class=\"RktSym\">tmp</span> variable in our <span class=\"RktSym\">swap!</span> macro? What if we did <span class=\"RktPn\">(</span><span class=\"RktSym\">swap!</span><span class=\"stt\"> </span><span class=\"RktSym\">tmp</span><span class=\"stt\"> </span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span>? It&rsquo;d break, right? Actually, no:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">tmp</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">swap!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">tmp</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">tmp</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">y</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr></tbody></table></div>\n\n<p>Racket&rsquo;s macro system has a concept of macro hygiene, which makes it so you don&rsquo;t have to worry about these kinds of variable collisions. It just takes care of it for you. How it works is really cool and worth its own post, so I won&rsquo;t explain it here. But in our language, to avoid this problem, when writing macros, we have to use <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span> to avoid user-supplied variables colliding with macro-introduced variables or vice-versa. <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span> creates a unique symbol, so we don&rsquo;t have to worry about collisions.</p>\n\n<p>Speaking of <span class=\"RktSym\">swap!</span>, unfortunately, the language we made doesn&rsquo;t have mutable variables, so we can&rsquo;t implement it. But if we had mutable variables, the code we wrote a while ago for it would work in our language. I chose not to implement mutable variables in this post because it complicates the interpreter and I wanted to keep it simple so we could focus on the macro system.</p>\n\n<p>One interesting thing about our language is that macros are defined and expanded dynamically, rather than before the program runs like in Racket. Transformers are also evaluated against the current environment, which means they have access to local variables. In a language where expansion happens before the code runs, you wouldn&rsquo;t be able to use local variables in the transformer directly.</p>\n\n<p>Macros are very cool, and there has been a lot of work on developing powerful, easy-to-use macro systems over the years. This post just scratches the surface of what&rsquo;s possible, but hopefully it gave some understanding of how a macro system works and why they&rsquo;re so useful.</p>")) ((? . 10) f post (u . "Solving Polynomials with Recursion") (? . 10) 1744126109 (p+ #"/home/runner/work/blog/blog/repo/2023/09/solving-polynomials-with-recursion.html" . unix) (u . "/blog/2023/09/solving-polynomials-with-recursion.html") (u . "2023-09-25T12:29:02") (? . 11) (? . 12) (c (u . "math") c (u . "JavaScript") c (u . "tutorials")) (u . "\n<p>In this post, we explore a simple and elegant algorithm to find the (real) zeros of a polynomial using recursion and derivatives.</p>") #t (u . "\n<p>In this post, we explore a simple and elegant algorithm to find the (real) zeros of a polynomial using recursion and derivatives.</p>\n<!-- more-->\n\n<p>This post implements the algorithm described in <a href=\"https://www.researchgate.net/publication/320864673_A_simple_recursive_algorithm_to_find_all_real_roots_of_a_polynomial\">Carvalho, Osvaldo. (2017). A simple recursive algorithm to find all real zeros of a polynomial</a>.</p>\n\n<p>Finding the zeros of a polynomial is an important problem in math. For some polynomials, we can use techniques like factoring to find zeros, and for polynomials up to degree 4, we have formulas that find the zeros directly. But for higher degree polynomials, these techniques are impractical or impossible. There are many numerical methods for finding the zeros of polynomials. The one we explore in this post uses derivatives and recursion in an elegant way, and is relatively simple.</p>\n\n<p>For this post, you&rsquo;ll to know a bit of math and coding. For the math, you&rsquo;ll pretty much just need to be familiar with polynomials and some basic calculus. For the coding, a basic understanding of JavaScript and some familiarity with algorithms should suffice.</p>\n\n<h1 id=\"the-math\">The Math</h1>\n\n<p>If we know that there is exactly one zero between two \\(x\\)-values, then we can use an algorithm like binary search to find it. However, if there are potentially multiple zeros in between, then we can only find one of them with a binary search, so we&rsquo;ll miss some zeros. The tricky part of solving polynomials is finding these intervals with exactly one zero in them, and that&rsquo;s where this algorithm comes in.</p>\n\n<p>The key observation behind this algorithm is that the only points where a polynomial can change direction is when its derivative is zero. If a polynomial is increasing, its derivative is positive. The only way for it to start decreasing is for its derivative to become negative, and it must become zero at some point in between. Conversely, this means that between the zeros of a polynomial&rsquo;s derivative, the polynomial does not change direction. So if one of the zeros of the derivative is positive in the polynomial and an adjacent one is negative, there must be exactly one zero in betwen. And if they both have the same sign, we can be sure that there is not a zero in between. The only other place we can find a zero of the polynomial is beyond the leftmost or rightmost zeros of the derivative.</p>\n\n<p>Let&rsquo;s look at an example:</p>\n\n<iframe src=\"https://www.desmos.com/calculator/0wvhj6rha8?embed\" width=\"500\" height=\"500\" style=\"border: 1px solid #ccc\" frameborder=\"0\"></iframe>\n<!-- https://www.desmos.com/calculator/0wvhj6rha8-->\n\n<p>In this graph, we see that the polynomial has 3 zeros. Zeros of the derivative are marked with blue dots. Visually, we can see that a zero of the derivative looks like the graph getting horizontal for a moment. The first zero of the graph is in the same place as one of the zeros of the derivative. The second zero is between the second and third zeros of the derivative. And the third zero of the graph is between the third zero of the derivative and positive infinity.</p>\n\n<p>There is no zero between the first and second zero of the derivative. Zeros only occur between derivative zeros when the polynomial is positive at one zero and negative at the other.</p>\n\n<p>Zeros can only occur on zeros of the derivative, between derivative zeros of opposite sign, between negative infinity and the minimum zero of the derivative, and between the maximum zero of the derivative and positive infinity. And since the graph can only change direction at a zero of the derivative, between two zeros, there can only be at most a single zero. So if we have the zeros of the derivative, we can easily find well-behaved intervals to search for the zeros. Within those intervals, we can just binary search to find the zero.</p>\n\n<p>That&rsquo;s nice, but how do we find the zeros of the derivative? Well, the derivative of a polynomial is another polynomial. And we know how to find the zeros of a polynomial! Since the derivative of a polynomial is a smaller polynomial, this recursive algorithm will terminate. And the base case will be first degree polynomials, which we can easily solve directly with a formula:</p>\n\n<p>$$ ax + b = 0 $$</p>\n\n<p>$$ x = -\\frac{b}{a} $$</p>\n\n<p>For degree zero polynomials, we&rsquo;ll just treat them as if they have no zeros. After all, the two possibilities are having no zeros and having infinite zeros, and we can&rsquo;t return a list containing all real numbers!</p>\n\n<h1 id=\"the-code\">The Code</h1>\n\n<p>To start off, let&rsquo;s figure out how we&rsquo;re going to represent a polynomial. Remember, a polynomial looks like this:</p>\n\n<p>$$ p(x) = 4x^2 + 3x &ndash; 2 $$</p>\n\n<p>A polynomial is a sum of scaled integer exponents of its input \\(x\\). We can specify a polynomial by its coefficients. In this example, the degree 0 coefficient is \\(-2\\), the degree 1 coefficient is 3, and the degree 2 coefficient is 4. All other coefficients are 0. Remember, the degree of a term is the exponent that \\(x\\) is raised to, and the degree of an entire polynomial is the degree of its highest degree term with a non-zero coefficient.</p>\n\n<p>To represent a polynomial, we will just use a list of its coefficients:</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"c1\">// The coefficient of degree i of polynomial p is p[i]</span>\n<span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"nx\">Polynomial</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">[]</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>We store its coefficients in order from lowest degree to highest. For example, our \\(p(x)\\) would look like this:</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">4</span><span class=\"p\">]</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This is nice because the degree 0 coefficient is just <code>p[0]</code>.</p>\n\n<p>Our solver will return a list of numbers representing the \\(x\\)-values where \\(p(x) = 0\\).</p>\n\n<p>Here is the high-level algorithm:</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"c1\">// find all zeros of the polynomial, sorted.</span>\n<span class=\"c1\">// for p = 0, return no zeros</span>\n<span class=\"k\">export</span><span class=\"w\"> </span><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">zeros</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Polynomial</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">degree</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">degree</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">p</span>\n<span class=\"w\">        </span><span class=\"c1\">// 0 = ax + b</span>\n<span class=\"w\">        </span><span class=\"c1\">// x = -b/a</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"nx\">b</span><span class=\"o\">/</span><span class=\"nx\">a</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">dpdx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">derivative</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">derivativeZeros</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">zeros</span><span class=\"p\">(</span><span class=\"nx\">dpdx</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">            </span><span class=\"p\">...</span><span class=\"nx\">betweenZeros</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">derivativeZeros</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"p\">...</span><span class=\"nx\">endZeros</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"nx\">derivativeZeros</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">].</span><span class=\"nx\">sort</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>We see our two bases cases, a degree 0 and a degree 1 polynomial, which we solve directly.</p>\n\n<p>In the recursive case, we compute the derivative, <code>dpdx</code>, which is just another polynomial, find its zeros, and then use them to find the zeros of <code>p</code>.</p>\n\n<p>That <code>...</code> stuff in the returned list just concatenates those two lists into one. Those helper functions <code>betweenZeros</code> and <code>endZeros</code> return lists of numbers, so we concatenate them. We also sort the list.</p>\n\n<p>We&rsquo;ll build out our implementation top down like this, calling helper functions and then implementing them later.</p>\n\n<p>First, let&rsquo;s write <code>degree</code>, a helper that computes the degree of a polynomial:</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"c1\">// the degree of the highest-degree term with non-zero coefficient</span>\n<span class=\"k\">export</span><span class=\"w\"> </span><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">degree</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Polynomial</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">degree</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">n</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">[</span><span class=\"nx\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">!==</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nx\">degree</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">n</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">degree</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>We iterate through the coefficients in order from lowest degree to highest, updating the highest degree when we encounter a term with a non-zero coefficient.</p>\n\n<p>Now, let&rsquo;s implement <code>derivative</code>, which computes the derivative of a polynomial.</p>\n\n<p>Remember, the derivative of a polynomial term, also called a monomial, looks like this:</p>\n\n<p>$$ \\frac{d}{dx} ax^n = anx^{n&ndash;1} $$</p>\n\n<p>And since a polynomial is the sum of monomials, we can just do this to each term and sum the results.</p>\n\n<p>Since we represent a polynomial by a list of its coefficients of ascending degree, we can just multiply each coefficient by its degree and shift the list to the left!</p>\n\n<p>For example:</p>\n\n<p>$$ p(x) = 4x^2 + 3x &ndash; 2 $$ $$ p&rsquo;(x) = 8x + 3 $$</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">4</span><span class=\"p\">]</span>\n<span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">dpdx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mf\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">8</span><span class=\"p\">]</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>We multiplied 3 by 1 and 4 by 2, and shifted to the left, decreasing the degree of each term by one. The constant term <code>-2</code> vanished because its derivative is zero.</p>\n\n<p>Here it is in code:</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"c1\">// the derivative of the polynomial, as another polynomial</span>\n<span class=\"k\">export</span><span class=\"w\"> </span><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">derivative</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Polynomial</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Polynomial</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">coefficient</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">degree</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"nx\">coefficient</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">degree</span><span class=\"p\">).</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mf\">1</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Since the degree of a term is its index in the list, we use an indexed <code>map</code>. For those unfamiliar, the array method <code>map</code> in JavaScript returns a new list resulting from applying a function to every element in the list. For example:</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">[</span><span class=\"mf\">1</span><span class=\"p\">,</span><span class=\"mf\">2</span><span class=\"p\">,</span><span class=\"mf\">3</span><span class=\"p\">,</span><span class=\"mf\">4</span><span class=\"p\">].</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// [2,4,6,8]</span>\n<span class=\"p\">[</span><span class=\"mf\">10</span><span class=\"p\">,</span><span class=\"mf\">24</span><span class=\"p\">,</span><span class=\"mf\">54</span><span class=\"p\">,</span><span class=\"mf\">77</span><span class=\"p\">].</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">x</span><span class=\"p\">,</span><span class=\"nx\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// [0,1,2,3]</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>When the function we supply to <code>map</code> takes in two arguments, the second argument is the index of the element in the list.</p>\n\n<p>The <code>slice</code> method can be used to &ldquo;chop off&rdquo; the beginning of a list.</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">[</span><span class=\"mf\">46</span><span class=\"p\">,</span><span class=\"mf\">55</span><span class=\"p\">,</span><span class=\"mf\">93</span><span class=\"p\">,</span><span class=\"mf\">28</span><span class=\"p\">].</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mf\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// [55,93,28]</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>When you pass just one argument to slice, it will give you a list starting at that index of the original list. Since we want to shift the list to the left, we just chop off the first element. This has the effect of decreasing the degree of each term by one, which is exactly what the derivative does.</p>\n\n<p>Now, let&rsquo;s implement one of the interesting bits, <code>betweenZeros</code>. This function finds the zeros on and between the zeros of the derivative:</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"c1\">// Find zeros between derivative zeros of opposite sign and on derivative zeros</span>\n<span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">betweenZeros</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Polynomial</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">derivativeZeros</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">[])</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">zeros</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"nx\">derivativeZeros</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">left</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">derivativeZeros</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span>\n<span class=\"w\">        </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">right</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">derivativeZeros</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"o\">+</span><span class=\"mf\">1</span><span class=\"p\">]</span>\n<span class=\"w\">        </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">isSignChange</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">evalPolynomial</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">left</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">evalPolynomial</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">right</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">isZero</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">left</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nx\">zeros</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">left</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">isZero</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">right</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nx\">zeros</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">right</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"c1\">// skip the next pair of zeros to avoid duplicates</span>\n<span class=\"w\">            </span><span class=\"nx\">i</span><span class=\"o\">++</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isZero</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">left</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"nx\">isZero</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">right</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nx\">isSignChange</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"c1\">// sign change, there is a zero in between</span>\n<span class=\"w\">            </span><span class=\"nx\">zeros</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">findZeroBetween</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">left</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">right</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">zeros</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Let&rsquo;s go step by step.</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">    </span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"nx\">derivativeZeros</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">left</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">derivativeZeros</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span>\n<span class=\"w\">        </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">right</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">derivativeZeros</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"o\">+</span><span class=\"mf\">1</span><span class=\"p\">]</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>First, we want to iterate over adjacent pairs of zeros so we can look in between them. This takes advantage of the assumption that the list of zeros is sorted. <code>left</code> is the \\(x\\)-value of the zero of the derivative on the left of the pair, and <code>right</code> is the one on the right. Between these two \\(x\\) values, there might be a zero.</p>\n\n<p>To visualize this, let&rsquo;s bring back our graph:</p>\n\n<iframe src=\"https://www.desmos.com/calculator/0wvhj6rha8?embed\" width=\"500\" height=\"500\" style=\"border: 1px solid #ccc\" frameborder=\"0\"></iframe>\n\n<p>Remember, the blue dots are the zeros of the derivative. We can see that there is no zero of the polynomial between the first and second blue dot, but the blue dot itself is a zero. And between the second and third dot, there is a zero. In general, if and only if one of the elements of our pair is positive and the other is negative, there is a zero in between them.</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">        </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">isSignChange</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">evalPolynomial</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">left</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">evalPolynomial</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">right</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p><code>evalPolynomial</code> is a helper that we&rsquo;ll write later. It evaluates the polynomial at some \\(x\\)-value.</p>\n\n<p>Whether there is a zero between <code>left</code> and <code>right</code> can be determined by whether there is a sign change. For example, if the polynomial is negative on the left and positive on the right like between the second and third blue dots, there must be a zero in between! Conversely, if there isn&rsquo;t a sign change and both values are positive, both are negative, or one is zero like the first blue dot, then there is definitely not a zero between them. We handle the zero cases and the sign change cases, and ignore the case of both positive or both negative.</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">isZero</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">left</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nx\">zeros</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">left</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>If <code>left</code> is a zero, then we add it to the list This will happen on the first iteration in our graphed example since the first derivative zero is a zero of the polynomial. However,</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">isZero</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">right</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nx\">zeros</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">right</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"c1\">// skip the next pair of zeros to avoid duplicates</span>\n<span class=\"w\">            </span><span class=\"nx\">i</span><span class=\"o\">++</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>If <code>right</code> is a zero, we also add it to the list, but we also increment <code>i</code> to skip the next iteration of the loop. After all, <code>right</code> will become <code>left</code> next iteration, and we don&rsquo;t want to add it as a zero again. And the in-between case won&rsquo;t happen because <code>right</code> is a zero, so it&rsquo;s safe to skip. Now for the in between case:</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isZero</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">left</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"nx\">isZero</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">right</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nx\">isSignChange</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"c1\">// sign change, there is a zero in between</span>\n<span class=\"w\">            </span><span class=\"nx\">zeros</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">findZeroBetween</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">left</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">right</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>If neither <code>left</code> nor <code>right</code> was a zero and there is a sign change like the second and third blue dots, we search in between <code>left</code> and <code>right</code> for a zero.</p>\n\n<p>Since that&rsquo;s the most interesting helper, let&rsquo;s implement it next:</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"c1\">// find a zero of p between the two x values</span>\n<span class=\"c1\">// left doesn&#39;t actually have to be less than right</span>\n<span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">findZeroBetween</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Polynomial</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">left</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">right</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// binary search</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">evalPolynomial</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">left</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">evalPolynomial</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">right</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">throw</span><span class=\"w\"> </span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"ne\">Error</span><span class=\"p\">(</span><span class=\"s2\">\"no sign change\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">middle</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">left</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">right</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mf\">2</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">isZero</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">middle</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">middle</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">evalPolynomial</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">left</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">evalPolynomial</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">middle</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// sign change between left and middle</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">findZeroBetween</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">left</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">middle</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// must be sign change between middle and right</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">findZeroBetween</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">middle</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">right</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>We binary search between <code>left</code> and <code>right</code> for a zero. We assert that there is a sign change between <code>left</code> and <code>right</code> because otherwise, there is no zero between them and we will search forever. We use sign changes to detect which half of the interval to recur on. The interval that has a sign change is the one that contains the zero.</p>\n\n<p>Now, to tie up loose ends, let&rsquo;s implement <code>isZero</code> and <code>evalPolynomial</code>:</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">TOLERANCE</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.001</span>\n<span class=\"c1\">// Is it pretty much a zero?</span>\n<span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">isZero</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Polynomial</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">boolean</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">abs</span><span class=\"p\">(</span><span class=\"nx\">evalPolynomial</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"nx\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"nx\">TOLERANCE</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// evaluate p(x)</span>\n<span class=\"k\">export</span><span class=\"w\"> </span><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">evalPolynomial</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Polynomial</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">answer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"nx\">degree</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"nx\">n</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nx\">answer</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"nx\">p</span><span class=\"p\">[</span><span class=\"nx\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">pow</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">n</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">answer</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>There is nothing too crazy going on here. <code>isZero</code> just evaluates the polynomial and checks whether it&rsquo;s very close to zero. We don&rsquo;t expect it to be exactly zero because of rounding errors, but you can certainly make the tolerance lower than what we have here. <code>evalPolynomial</code> computes the sum of the terms, and each term is its coefficient multiplied by the input to the power of the degree of that term, <code>n</code>.</p>\n\n<p>Now, for the last big piece, <code>endZeros</code>. Let&rsquo;s look at that graph again:</p>\n\n<iframe src=\"https://www.desmos.com/calculator/0wvhj6rha8?embed\" width=\"500\" height=\"500\" style=\"border: 1px solid #ccc\" frameborder=\"0\"></iframe>\n\n<p>We handled zeros on and between the zeros of the derivative. Now, we have to check for zeros outside of the zeros of the derivative. One can occur between the negative infinity and the minimum or leftmost zero (to the left of the first blue dot), and one can occur between the maximum or rightmost zero and positive infinity (to the right of the last blue dot). We can detect whether there will be a zero by examining the values of the polynomial at these derivative zeros and the polynomial&rsquo;s end behavior, which is whether it approaches positive or negative infinity as we go off to the left or right.</p>\n\n<p>In our graph, the last dot is negative and the polynomial increases to the right. Since there are no more zeros of the derivative to the right, the polynomial can&rsquo;t change direction, so it must continue increasing forever, which means it will eventually reach zero if we continue to the right. However, on the left side, the leftmost blue dot is at zero and the polynomial increases to the left. The graph will just go away from zero forever to the left of the first dot. This means there are no zeros to the left of the blue dots. In general, if and only if the polynomial is heading towards zero beyond the zeros of the derivative, there will be a zero.</p>\n\n<p>Now let&rsquo;s implement this:</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"c1\">// find zeros outside of the derivative zeros</span>\n<span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">endZeros</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Polynomial</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">derivativeZeros</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">[])</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">derivativeZeros</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">zeros</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">        </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">minZero</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">derivativeZeros</span><span class=\"p\">[</span><span class=\"mf\">0</span><span class=\"p\">]</span>\n<span class=\"w\">        </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">changeToLeft</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">evalPolynomial</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">minZero</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">evalPolynomial</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">minZero</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">hasLeftZero</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">changeToLeft</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">evalPolynomial</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">minZero</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">hasLeftZero</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nx\">zeros</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">findEndZero</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">minZero</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">1</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">maxZero</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">derivativeZeros</span><span class=\"p\">[</span><span class=\"nx\">derivativeZeros</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">]</span>\n<span class=\"w\">        </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">changeToRight</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">evalPolynomial</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">maxZero</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">evalPolynomial</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">maxZero</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">hasRightZero</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">changeToRight</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">evalPolynomial</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">maxZero</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">hasRightZero</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nx\">zeros</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">findEndZero</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">maxZero</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">zeros</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Since outside of the zeros of the derivative, the polynomial can&rsquo;t change direction, we just need to step a little bit past the zero to see which direction the polynomial will head in. That&rsquo;s what <code>changeToLeft</code> and <code>changeToRight</code> measure. To determine whether there is a zero, we compare the direction the polynomial is heading in (increasing vs decreasing) to the value of the polynomial to determine whether the polynomial is heading towards zero. In our example graph, if we&rsquo;re looking at the rightmost blue dot, the value of the polynomial is negative, and the <code>changeToRight</code> is positive. Since the polynomial is negative, it&rsquo;s increasing to the right, and it can&rsquo;t change direction, it must eventually hit zero! This is obvious from our graph because we can literally see it hit zero, but it is also true in general. To compute this, we multiply the value by the change and check whether that&rsquo;s negative.</p>\n\n<p>On the left side of our graph, the polynomial has value zero and our change to the left is positive, so the product will be zero, which is not negative, indicating that there is no zero to the left. Nice!</p>\n\n<p>When we determine that there is a zero beyond the zeros of the derivative, we use <code>findEndZero</code>, which takes in an \\(x\\)-value to start at and a direction to look in (negative for the left and positive for the right), and finds a zero in that direction.</p>\n\n<p>We will implement this by taking steps of exponentially increasing size in the given direction until we see a sign change and then doing our binary search operation on the resulting interval:</p>\n\n<div class=\"brush: ts\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"c1\">// find a zero beyond x in the given direction</span>\n<span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">findEndZero</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Polynomial</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">direction</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">otherX</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">findSignChange</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">direction</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">findZeroBetween</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">otherX</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// find an x-value in the given direction such that there is a sign change between x and that value</span>\n<span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">findSignChange</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Polynomial</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">direction</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">step</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">direction</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">px</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">evalPolynomial</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">otherX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">isSignChange</span>\n<span class=\"w\">    </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nx\">otherX</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">step</span>\n<span class=\"w\">        </span><span class=\"nx\">isSignChange</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">px</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">evalPolynomial</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">otherX</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0</span>\n<span class=\"w\">        </span><span class=\"nx\">step</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"mf\">2</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isSignChange</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">otherX</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>And there we have it! We have implemented a nice little algorithm for finding the zeros of a polynomial.</p>\n\n<p>I love how elegant the core idea is here. It&rsquo;s so nicely recursive, it involves derivatives, which I love, and it fits in under 150 lines of code. Beautiful!</p>\n\n<p>The full source code can be found <a href=\"https://github.com/quasarbright/recursive-polynomial-solver-for-blog/blob/master/src/index.ts\">here</a>.</p>\n<!-- TODO say array instead of list-->")) ((? . 12) f post (u . "Pi Calculus: Understanding and Implementing Concurrency") (? . 12) 1744126109 (p+ #"/home/runner/work/blog/blog/repo/2023/10/pi-calculus-understanding-and-implementing-concurrency.html" . unix) (u . "/blog/2023/10/pi-calculus-understanding-and-implementing-concurrency.html") (u . "2023-10-13T05:44:53") (? . 10) (? . 0) (c (u . "racket") c (u . "programming-languages") c (u . "tutorials") c (u . "understand-and-implement")) (u . "\n<p>You may have heard of the lamdba calculus. It is a model of computation where everything is either a function, a variable, or a function call. It is the essence of functional programming and the theoretical foundation for modern functional programming languages. Even though it is very simple, it is just as powerful as any programming language since it is Turing-complete.</p>\n\n<p>The pi calculus is a similar idea, but instead of functional programming, it is the essence of concurrent programming. For our purposes, it will serve as a simple example of a programming language with concurrency. In this post, we will explore and implement the pi calculus in Racket. This will give an idea of how modern programming languages implement concurrency.</p>\n\n<p>This post requires some familiarity with Racket or any Lisp-like language. If you have read some of my Racket posts which explain Racket stuff, you should be fine. If you see something you don&rsquo;t understand in the code, you can click on it and the link will take you to its documentation.</p>") #t (u . "\n<p>You may have heard of the lamdba calculus. It is a model of computation where everything is either a function, a variable, or a function call. It is the essence of functional programming and the theoretical foundation for modern functional programming languages. Even though it is very simple, it is just as powerful as any programming language since it is Turing-complete.</p>\n\n<p>The pi calculus is a similar idea, but instead of functional programming, it is the essence of concurrent programming. For our purposes, it will serve as a simple example of a programming language with concurrency. In this post, we will explore and implement the pi calculus in Racket. This will give an idea of how modern programming languages implement concurrency.</p>\n\n<p>This post requires some familiarity with Racket or any Lisp-like language. If you have read some of my Racket posts which explain Racket stuff, you should be fine. If you see something you don&rsquo;t understand in the code, you can click on it and the link will take you to its documentation.</p>\n<!--more-->\n\n<p>The pi calculus is a model of concurrent computation. In the pi calculus, the core constructs are processes and channels. A process is a part of a running program and multiple processes can run concurrently. A channel is conceptually a queue of values that processes can write to and read from. Processes use channels to communicate with each other. Let&rsquo;s start by defining the different types of processes. We will embed the pi calculus within Racket, so our representation of processes will use Racket features like structs and lambdas:</p>\n\n<p><span class=\"RktPn\">(</span><span class=\"RktSym\">out</span><span class=\"stt\"> </span><span class=\"RktSym\">chan</span><span class=\"stt\"> </span><span class=\"RktSym\">val</span><span class=\"stt\"> </span><span class=\"RktSym\">proc</span><span class=\"RktPn\">)</span> is a process which writes a value <span class=\"RktSym\">val</span> to the channel <span class=\"RktSym\">chan</span> and then runs the process <span class=\"RktSym\">proc</span>. In the pure pi calculus, the only values are channels, but we will allow ourselves to use arbitrary Racket values. This is not a blocking operation.</p>\n\n<p><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"stt\"> </span><span class=\"RktSym\">chan</span><span class=\"stt\"> </span><span class=\"RktSym\">val-&gt;proc</span><span class=\"RktPn\">)</span> is a process which reads a value from the channel <span class=\"RktSym\">chan</span>, calls the function <span class=\"RktSym\">val-&gt;proc</span> with the value from the channel, which returns a process, and then runs that process. It blocks until it reads a value.</p>\n\n<p><span class=\"RktPn\">(</span><span class=\"RktSym\">with-channel</span><span class=\"stt\"> </span><span class=\"RktSym\">chan-&gt;proc</span><span class=\"RktPn\">)</span> is a process which creates a new channel, calls the function <span class=\"RktSym\">chan-&gt;proc</span> with the channel, which returns a process, and then runs that process. This is how processes get channels.</p>\n\n<p><span class=\"RktPn\">(</span><span class=\"RktSym\">branch</span><span class=\"stt\"> </span><span class=\"RktSym\">proc1</span><span class=\"stt\"> </span><span class=\"RktSym\">proc2</span><span class=\"RktPn\">)</span> runs the processes <span class=\"RktSym\">proc1</span> and <span class=\"RktSym\">proc2</span> concurrently.</p>\n\n<p><span class=\"RktPn\">(</span><span class=\"RktSym\">duplicate</span><span class=\"stt\"> </span><span class=\"RktSym\">proc</span><span class=\"RktPn\">)</span> runs infinite copies of <span class=\"RktSym\">proc</span> concurrently.</p>\n\n<p><span class=\"RktPn\">(</span><span class=\"RktSym\">noop</span><span class=\"RktPn\">)</span> does nothing.</p>\n\n<p>Processes created with <span class=\"RktSym\">out</span> and <span class=\"RktSym\">in</span> have a sequential nature to them. The child process runs after the write/read. <span class=\"RktSym\">branch</span> and <span class=\"RktSym\">duplicate</span> are where we get our concurrency.</p>\n\n<p>For example, the process</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">with-channel</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">chan</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">branch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">out</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">noop</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">noop</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>creates a channel that we call <span class=\"RktSym\">chan</span> and then concurrently writes the number <span class=\"RktVal\">2</span> to it and reads from it. We don&rsquo;t do anything with the value that we read from it though.</p>\n\n<p>That&rsquo;s pretty much it! From these few simple operations, we can express all kinds of concurrent behavior. For example, let&rsquo;s write a very simple server for an API that adds 1 to the number in its request:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">request</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">response-channel</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">duplicate</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">server-request-channel</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">request</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">out</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">request-response-channel</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">request</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">request-body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">request</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">noop</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>We read in the request through <span class=\"RktSym\">server-request-channel</span>, which our clients send requests to, compute our response, and send it through <span class=\"RktPn\">(</span><span class=\"RktSym\">request-response-channel</span><span class=\"stt\"> </span><span class=\"RktSym\">request</span><span class=\"RktPn\">)</span> to respond. For this server, we are expecting requests to have a <span class=\"RktSym\">response-channel</span> field that contains the channel to send the response to. Having just one output channel for the server wouldn&rsquo;t work because a client reading from it might get someone else&rsquo;s response since processes run in an arbitrary order.</p>\n\n<p>Side note: Passing the response channel is sort of like <a href=\"/blog/2023/09/continuations.html\">continuation-passing style</a> since the output channel sent in the request is like a continuation. Continuations are very useful!</p>\n\n<p>We wrap this process in a <span class=\"RktSym\">duplicate</span>, which causes infinite copies of it to run concurrently. This means the server will be able to handle concurrent requests and, since reading from <span class=\"RktSym\">server-request-channel</span> blocks until there is something in the channel, we will be listening for new requests forever.</p>\n\n<p>This is a very simple server where the business logic is some pure Racket function. If the server was more complex and needed some internal concurrency for its business logic, instead of a simple <span class=\"RktSym\">out</span> process, we&rsquo;d have some more complicated process which ends up sending a response through the response channel at some point.</p>\n\n<p>To complete this example, let&rsquo;s see what a client would look like:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">with-channel</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">response-channel</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">out</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">server-request-channel</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">request</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">response-channel</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">response-channel</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">response</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">...do-something-with-response...</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>We create a channel <span class=\"RktSym\">response-channel</span> that the server will send its response to, we send our request to the server over <span class=\"RktSym\">server-request-channel</span> which includes <span class=\"RktSym\">response-channel</span> and the body of our request, which is the value 2, we read from the response channel to wait for the server&rsquo;s response, and then we execute <span class=\"RktSym\">...do-something-with-response...</span>, which is a process that uses the response somehow.</p>\n\n<p>To kick this all off, we&rsquo;d have some parent process that creates <span class=\"RktSym\">server-request-channel</span> using <span class=\"RktSym\">with-channel</span> and uses <span class=\"RktSym\">branch</span> to concurrently run our server and some clients.</p>\n\n<p>Although it is pretty low-level, the pi calculus is very powerful and expressive. In fact, it is Turing-complete! To convince yourself, think about how our server example is like a function and our clients call the function by sending requests and expecting responses. Function values are represented by their input channels. With that, we have something that looks a lot like the lambda calculus. In fact, it is pretty straightforward to translate the lambda calculus to the pi calculus using this correspondence and a CPS-like transformation! And since we are using CPS, we even get <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span>! <a href=\"https://github.com/quasarbright/blog/blob/e4fc75b114a663d95ba560dc07924c1ca9a839a6/_src/posts/pi-calculus.rkt#L205\">Here is an implementation</a>.</p>\n\n<p>This is all very cool to think about, but how do we actually implement it?</p>\n\n<p>Although the pi calculus is all about concurrency, we can implement the pi calculus without using any concurrency in the host language. Instead, we&rsquo;ll do it ourselves by making a scheduler. We will keep track of a queue of processes that are running concurrently. At each step, we will pop a process from the queue, do a little bit of work like write to or read from a channel, and then push any resulting child processes onto the queue. For example, to run a step of an <span class=\"RktPn\">(</span><span class=\"RktSym\">out</span><span class=\"stt\"> </span><span class=\"RktSym\">chan</span><span class=\"stt\"> </span><span class=\"RktSym\">val</span><span class=\"stt\"> </span><span class=\"RktSym\">proc</span><span class=\"RktPn\">)</span> process, we write the <span class=\"RktSym\">val</span> to <span class=\"RktSym\">chan</span> and then we push <span class=\"RktSym\">proc</span> onto the process queue.</p>\n\n<p>To start, let&rsquo;s define data representations for our processes:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">out</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">chan</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">chan</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val-&gt;proc</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">with-channel</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">chan-&gt;proc</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">branch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">proc1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc2</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">duplicate</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">proc</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">noop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>Nothing surprising here, we&rsquo;re just making structs to represent our process types. One thing to keep in mind is that Racket evaluates eagerly, so when constructing an <span class=\"RktSym\">out</span> process, we evaluate the output value immediately, not necessarily when the process is running. We also evaluate the child process immediately. This shouldn&rsquo;t really matter, but it&rsquo;s something to keep in mind. Anyway, those examples that we wrote before can actually be constructed now!</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">simple-in-out-process</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-channel</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">chan</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">branch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">out</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">noop</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">noop</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">simple-in-out-process</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(with-channel #&lt;procedure&gt;)</span></p></td></tr></tbody></table></div>\n\n<p>These processes are just pure data right now. They won&rsquo;t run until we pass them to the interpreter that we&rsquo;re about to make.</p>\n\n<p>Let&rsquo;s also write data definitions for channels and process queues:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">A Channel is a</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">channel</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/values.html#%28def._%28%28quote._~23~25kernel%29._values%29%29\">values</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:mutable</span><span class=\"RktPn\">]</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Where values is a (listof Any) and the first element is the oldest.</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Represents a queue of values that can be read from and written to from processes.</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">A ProcessQueue is a (listof Process)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Where the first process is the oldest.</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Represents processes running concurrently.</span></td></tr></tbody></table></div>\n\n<p>We will represent our various queue types with lists. A channel has a mutable field storing the list of values from oldest to newest. We&rsquo;ll push new values onto the end of the list and pop from the beginning. Process queues are similar, but they&rsquo;re immutable. Since there is only one process queue, we&rsquo;ll use a <a class=\"techoutside Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/guide/parameterize.html#%28tech._parameter%29\"><span class=\"techinside\">parameter</span></a> for the current process queue and mutate that.</p>\n\n<p>Now before we get to that interpreter, let&rsquo;s think about blocking and deadlock: When we read from a channel with an <span class=\"RktSym\">in</span> process, what if the channel is empty? We have to wait for there to be something in the channel before we can run the process. This means the process is blocked. When the next process we want to run is blocked, we&rsquo;ll skip over it for now and come back to it later. After all, one of the other processes in the queue might end up writing to its channel and unblocking it!</p>\n\n<p>But we&rsquo;re not safe yet. What if all the processes are blocked? If we assume that nothing can write to channels other than the processes in our queue, then they&rsquo;ll stay blocked forever because there are no processes that can run to put anything in a channel that might unblock a process. This is called a deadlock and we&rsquo;ll just stop execution in this case.</p>\n\n<p>For example, let&rsquo;s create the classic deadlock scenario of two processes waiting for each other. Alice and Bob got into an argument. They have calmed down, but they&rsquo;re stubborn. They&rsquo;re ready to apologize to each other, but they won&rsquo;t apologize until the other apologizes first.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">classic-deadlock-process</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-channel</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">chan-alice</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-channel</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">chan-bob</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">branch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan-alice</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">apology-from-bob</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">out</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan-bob</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"I'm sorry too, Bob\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">noop</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan-bob</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">apology-from-alice</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">out</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan-alice</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"I'm sorry too, Alice\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">noop</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>Once one gets an apology, they&rsquo;ll apologize to the other. But since nobody goes first, neither will ever apoligize!</p>\n\n<p>An even simpler example of deadlock is a single process waiting for a message that&rsquo;ll never come:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">simple-deadlock-process</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-channel</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">chan</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">noop</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>Nobody will ever send anything to <span class=\"RktSym\">chan</span> because the <span class=\"RktSym\">in</span> process is the only one that has access to it. This poor process will wait forever, all alone.</p>\n\n<p>Now that we understand the heart-breaking nature of blocking and deadlock, we&rsquo;re ready to implement our interpreter. We&rsquo;ll write it top-down:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">current-output-channel</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/parameters.html#%28def._%28%28quote._~23~25kernel%29._make-parameter%29%29\">make-parameter</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">current-process-queue</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/parameters.html#%28def._%28%28quote._~23~25kernel%29._make-parameter%29%29\">make-parameter</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>We define a <a class=\"techoutside Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/guide/parameterize.html#%28tech._parameter%29\"><span class=\"techinside\">parameter</span></a> for a special channel that will act like standard out and another parameter for the current process queue. If we didn&rsquo;t have something like a special output channel, we&rsquo;d have no way of knowing what happened when we ran the process!</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Process -&gt; (list symbol? (listof Any))</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">run the process until it and its children all terminate or are all blocked</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">run</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">num-steps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">output-channel</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">new-channel</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/parameters.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._parameterize%29%29\">parameterize</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">current-output-channel</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">output-channel</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">current-process-queue</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">result-type</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">num-steps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">num-steps</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29\">cond</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">num-steps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/number-types.html#%28def._%28%28quote._~23~25kernel%29._zero~3f%29%29\">zero?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">num-steps</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">timeout</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._empty~3f%29%29\">empty?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">current-process-queue</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">success</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">process-queue-all-blocked?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">current-process-queue</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">deadlock</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._else%29%29\">else</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">step!</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">num-steps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._sub1%29%29\">sub1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">num-steps</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">result-type</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">channel-values</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">current-output-channel</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>This is the entry point for our interpreter. We pretty much just loop the <span class=\"RktSym\">step!</span> function until we are done or reach a deadlock. At the end, we return a symbol describing how the process ended and the contents of the output channel, which is like seeing the exit code and what got printed in the console when you run a program from the command line. We optionally accept a maximum number of steps to execute so we can test the behavior of <span class=\"RktSym\">duplicate</span>, which will always either deadlock or run forever.</p>\n\n<p>Now let&rsquo;s write <span class=\"RktSym\">step!</span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">run one step of computation.</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">do a little bit of work in the next unblocked process and push child processes</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">onto the queue.</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">assumes the program is not blocked.</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">step!</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">pop-unblocked-process!</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">noop</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29\">void</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">out</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">channel-push!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">push-process!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val-&gt;proc</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">push-process!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">val-&gt;proc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">channel-pop!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-channel</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan-&gt;proc</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">push-process!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">chan-&gt;proc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">new-channel</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">branch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc2</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">push-process!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc1</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">push-process!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">duplicate</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">push-process!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">push-process!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">duplicate</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>The first thing we do is pop the next unblocked process from the queue. Then, we run a step of that process.</p>\n\n<p>Let&rsquo;s go case by case.</p>\n\n<p><span class=\"RktSym\">noop</span> is unsurprisingly boring.</p>\n\n<p>For <span class=\"RktSym\">out</span>, we write to the channel and then push the child process onto the queue.</p>\n\n<p>For <span class=\"RktSym\">in</span>, we pop a value from the channel, which must exist because we are unblocked, pass the value to <span class=\"RktSym\">val-&gt;proc</span>, which creates a new process, and then we push that process onto the queue.</p>\n\n<p>For <span class=\"RktSym\">with-channel</span>, we create a new channel, pass it to <span class=\"RktSym\">chan-&gt;proc</span>, and push the resulting process onto the queue.</p>\n\n<p>For <span class=\"RktSym\">branch</span>, we just push both processes onto the queue.</p>\n\n<p>For <span class=\"RktSym\">duplicate</span>, we push the child process and another <span class=\"RktSym\">duplicate</span> process. This will cause another copy of <span class=\"RktSym\">proc</span> to get pushed onto the queue every time we encounter the <span class=\"RktSym\">duplicate</span> process. This strategy relies on the fact that we&rsquo;re using a queue. If we were using a stack of processes, we&rsquo;d just keep running <span class=\"RktSym\">proc</span> over and over without getting to any of the other processes, unless it&rsquo;s blocked.</p>\n\n<p></p>\n\n<div class=\"SIntrapara\"><span class=\"RktPn\">(</span><span class=\"RktSym\">duplicate</span><span class=\"stt\"> </span><span class=\"RktSym\">proc</span><span class=\"RktPn\">)</span> has the same behavior as <span class=\"RktPn\">(</span><span class=\"RktSym\">branch</span><span class=\"stt\"> </span><span class=\"RktSym\">proc</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">duplicate</span><span class=\"stt\"> </span><span class=\"RktSym\">proc</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span>, which is then the same as\n</div>\n\n<div class=\"SIntrapara\">\n <div class=\"SCodeFlow\">\n  <p><span class=\"RktPn\">(</span><span class=\"RktSym\">branch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">branch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">branch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></p></div></div>\n\n<div class=\"SIntrapara\">if we expand out that equivalence. This is another way of understanding how <span class=\"RktSym\">duplicate</span> creates infinite copies of <span class=\"RktSym\">proc</span> running concurrently.</div>\n\n<p>Now, let&rsquo;s implement those helper functions that we used, starting with those for process queues:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">{ProcessQueue} -&gt; Boolean</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">are all processes definitely blocked?</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">process-queue-all-blocked?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">pq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">current-process-queue</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Fand%29%29\">for/and</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">proc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pq</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">process-blocked?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Process -&gt; Boolean</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">is the process definitely blocked?</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">process-blocked?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">channel-empty?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">branch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc2</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">process-blocked?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">process-blocked?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">duplicate</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">process-blocked?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">-&gt; Process</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">pops the next unblocked process from the current queue in place.</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">pop-unblocked-process!</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28quote._~23~25kernel%29._define-values%29%29\">define-values</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">proc</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pq</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">pop-unblocked-process</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">current-process-queue</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">current-process-queue</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pq</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktSym\">proc</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">ProcessQueue {(listof Process)} -&gt; (values Process ProcessQueue)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">pops the next unblocked process from the queue immutably.</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">skipped-rev is an accumulator storing the blocked processes</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">at the head of the queue in reverse order.</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">pop-unblocked-process</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">skipped-rev</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29\">cond</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._null~3f%29%29\">null?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pq</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">pop-unblocked-process</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"cannot pop from empty process queue\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">process-blocked?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._first%29%29\">first</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pq</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">pop-unblocked-process</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._rest%29%29\">rest</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pq</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._first%29%29\">first</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pq</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">skipped-rev</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._else%29%29\">else</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/values.html#%28def._%28%28quote._~23~25kernel%29._values%29%29\">values</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._first%29%29\">first</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pq</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Flist..rkt%29._reverse%29%29\">reverse</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">skipped-rev</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._rest%29%29\">rest</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pq</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Process -&gt; Void</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">push a process onto the current queue</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">push-process!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">current-process-queue</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">current-process-queue</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">proc</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>We consider a process blocked if it is obvious that it is definitely blocked. For an <span class=\"RktSym\">in</span>, it is blocked if its channel is empty. Branches and duplications are blocked if their child processes are blocked. This is an optimization that will not affect the behavior of terminating, non-deadlocking programs. If we didn&rsquo;t do this, a duplicated blocked process would just run forever doing nothing instead of being recognized as a deadlock. We can&rsquo;t peek inside of the child process of <span class=\"RktSym\">with-channel</span>, which is unfortunate, but that&rsquo;s not a big deal. Since we&rsquo;re not sure whether the child process will be blocked, we consider it unblocked, since we only want to declare deadlock when we&rsquo;re totally sure. However, this means that</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">duplicate</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-channel</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">chan</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">noop</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>will loop forever, creating infinte lonely processes that will never receive the messages they&rsquo;re so patiently waiting for. Tragic.</p>\n\n<p>The implementation of <span class=\"RktSym\">pop-unblocked-process</span> is a little complicated, but the idea is simple. We find the next unblocked process from the queue, take it out of the queue, and return it.</p>\n\n<p>Remember, the queue is represented by a list where first element is the oldest. So we pop from the beginning and push onto the end.</p>\n\n<p>Now let&rsquo;s implement the functions on channels:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">-&gt; Channel</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">create an empty channel</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">new-channel</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">channel</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Channel -&gt; Boolean</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">is the channel empty?</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">channel-empty?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._empty~3f%29%29\">empty?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">channel-values</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Channel Any -&gt; Void</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">push a value into the channel</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">channel-push!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">set-channel-values!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">channel-values</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Channel -&gt; Any</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">pop the next value from the channel</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">channel-pop!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._first%29%29\">first</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">channel-values</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">set-channel-values!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._rest%29%29\">rest</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">channel-values</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>Nothing too surprising or interesting here, just simple queue operations that mutate a struct with a list field.</p>\n\n<p>And with that, we&rsquo;re done! We just implemented a concurrent programming system out of a few simple primitives and some book-keeping with queues. Let&rsquo;s run some programs:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">simple-in-out-process</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-channel</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">chan</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">branch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">out</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">noop</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">out</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">current-output-channel</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">noop</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">run</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">simple-in-out-process</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(success (2))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">request</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">response-channel</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">single-round-of-server-process</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-channel</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">server-request-channel</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">branch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">server-request-channel</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">request</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">out</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">request-response-channel</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">request</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">request-body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">request</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">noop</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-channel</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">response-channel</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">out</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">server-request-channel</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">request</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">response-channel</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">response-channel</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">response</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">out</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">current-output-channel</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">response</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">noop</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">run</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">single-round-of-server-process</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(success (3))</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">run</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">classic-deadlock-process</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(deadlock ())</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">run</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">simple-deadlock-process</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(deadlock ())</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nats-process</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-channel</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">chan</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">branch</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">out</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">noop</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">duplicate</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">out</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">current-output-channel</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">val</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">out</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">chan</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">noop</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">run</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nats-process</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">100</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(timeout (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))</span></p></td></tr></tbody></table></div>\n\n<p>There are many different directions we could take this in if we wanted to continue:</p>\n\n<ul>\n <li>\n  <p>We could use macros and/or continuations to allow us to write processes in a flat way instead of having to nest everything.</p></li>\n <li>\n  <p>We could add special channels that are hooked up to real IO like standard out, files, or the network. This would break some of the assumptions in our scheduler like the fact that only the processes in the queue can write to and read from channels, but it would enable us to write real web servers.</p></li>\n <li>\n  <p>We could make output processes block until their message is read to avoid needing to store values in channels. This would make the scheduler a little more complicated, but it would save memory.</p></li>\n <li>\n  <p>We could make a completely new language that compiles to the pi calculus. If we have more control over the language, we could perform more optimizations, like detecting if a <span class=\"RktSym\">with-channel</span>&rsquo;s child process is blocked.</p></li>\n <li>\n  <p>We could compile to the pi calculus from other concurrency systems like actors.</p></li></ul>\n\n<p>The pi calculus is pretty cool, but I am a little disappointed that there is no pi.</p>")) ((? . 13) f post (u . "How Does the Stock Market Work?") (? . 13) 1744126109 (p+ #"/home/runner/work/blog/blog/repo/2024/11/how-does-the-stock-market-work.html" . unix) (u . "/blog/2024/11/how-does-the-stock-market-work.html") (u . "2024-11-06T22:07:42") #f #f (c (u . "UNLINKED")) (u . "\n<p>We all have a general idea of how the stock market works. You can buy and sell shares of companies, and the price of shares change, so you can get money by buying low and selling high. But how does it all actually work? What is a share? What determines the price of a stock? Why does the price of a stock change?</p>\n\n<p>This post is for people who want to understand how the stock market works at the lowest level, and learn some motivation for why things work the way they do.</p>") #t (u . "\n<p>We all have a general idea of how the stock market works. You can buy and sell shares of companies, and the price of shares change, so you can get money by buying low and selling high. But how does it all actually work? What is a share? What determines the price of a stock? Why does the price of a stock change?</p>\n\n<p>This post is for people who want to understand how the stock market works at the lowest level, and learn some motivation for why things work the way they do.</p>\n<!-- more-->\n\n<p>DISCLAIMER: I am far from being an expert in the stock market. I am just somebody who finds this stuff interesting and likes explaining cool things. None of what I say here is investment advice, I am simply explaining the mechanisms of a market at a low level, and over-simplifying things. Take all of this with a grain of salt.</p>\n\n<p>tl;dr: A share is a unit of ownership of a company, the stock price you see is just whatever price the most recent trade of a share was made at, and the price of a stock/share changes based on the market&rsquo;s collective estimation of a company&rsquo;s value.</p>\n\n<h2 id=\"what-are-shares\">What are shares?</h2>\n\n<p>When a company is publicly traded on the stock exchange, it is possible to buy a &ldquo;piece&rdquo; of the company. The ownership of the company is split into some number of shares, usually at least in the millions. If you purchase half of the shares of a company, you own half of the company. It&rsquo;s good to have a large number of total shares so people can buy very tiny pieces of the company as well as larger portions. Usually, you can&rsquo;t buy just part of a share, so if there were only a 10 shares total, it would be impossible to buy just a small portion of the company.</p>\n\n<p>The terms &ldquo;stock&rdquo; and &ldquo;share&rdquo; are roughly interchangeable. &ldquo;Stock&rdquo; is technically a little more general, but I&rsquo;ll be using the terms interchangeably.</p>\n\n<p>Some companies pay shareholders (people who own shares) dividends, which come from the company&rsquo;s profits. And if you own a lot of shares, you may be selected to be on the board of directors and influence decisions in the company.</p>\n\n<p>If each share represents an equal amount of ownership in the company, then the price of each share should be the total value of the company divided by the total number of shares. But how do we figure out the value of the company? We&rsquo;ll get to that soon.</p>\n\n<h3 id=\"why-would-a-company-sell-shares\">Why would a company sell shares?</h3>\n\n<p>You might be wondering why a company would want to sell shares in the first place. Let&rsquo;s say you started your own company and need some money. You could try to take a loan from a bank, or you could look for investors. An investor will give you money if they think your company has potential, which would make them money in the future. But they won&rsquo;t just give you money for free.</p>\n\n<p>If someone is giving you money, they will want some partial ownership over your company, to receive some of the profits, and have some say in how things are run. That way they can make sure they get a return their investment. The more money an investor gives you, the more entitled they should be to those things. Some company decisions may be put up to a vote where shareholders&rsquo; votes are weighted based on what proportion of the company they own. This means if an individual owns more than half the company, they can outvote all other shareholders. So as the founder of a company, you probably want to maintain at least 51% ownership so you can be in control of major decisions.</p>\n\n<p>With an investor, you and the investor would make an agreement of how many shares of the company they&rsquo;d get for their investment. Again, this depends on the total estimated value of the company. If your company is estimated to be worth $100,000 and an investor wants to invest $1,000, they&rsquo;d be offered 1% of the company for their investment. This estimated value of the company may be negotiated between you (the founder) and the investor.</p>\n\n<p>This is not exactly the same as what goes on in the stock market though. This scenario describes a private company which is not traded on the public stock exchange. If a company wants to open the door for anyone to invest, they can make an Initial Public Offering (IPO) and start selling shares of their company on the public stock exchange. What changes here is that the value of the company is no longer agreed upon or negotiated between the company and new investors. Instead, it&rsquo;s determined solely by what prospective investors think the company is worth, and it&rsquo;s all kind of croud-sourced.</p>\n\n<p>Another big difference is that in a publicly traded company, investors can sell their shares to other investors. Some private companies might not allow their investors to do this.</p>\n\n<h2 id=\"how-do-trades-in-the-stock-market-work\">How do trades in the stock market work?</h2>\n\n<p>When a company is traded publicly, there is no negotiation between the company and the investor. The company can still sell more shares to get more money from investors, but the large majority of trades are going to be investors buying and selling shares from one another.</p>\n\n<p>Long, drawn-out negotiations of share prices might&rsquo;ve made sense when you were just talking to a few investors, but when investors are buying and selling shares all day, this is impractical. Instead, the stock market is basically a bunch of tiny auctions.</p>\n\n<p>Let&rsquo;s say Alice owns a share of a publicly traded company called BestWidgets. She thinks her share is worth $20 and wants to sell it, so she says &ldquo;I am <em>selling</em> a share of BestWidgets for <em>at least</em> $20&rdquo;. Bob, on the other hand, is looking to invest in BestWidgets, but he thinks a share is only worth $15, so he says &ldquo;I want to <em>buy</em> a share of BestWidgets, but I&rsquo;m only willing to pay <em>at most</em> $15&rdquo;. Since Alice won&rsquo;t sell for $15 and Bob won&rsquo;t buy for $20, there is no trade.</p>\n\n<p>However, if some new investor comes along and says &ldquo;I want to <em>buy</em> a share of BestWidgets, but I&rsquo;m only willing to pay <em>at most</em> $25&rdquo;, they will see Alice&rsquo;s offer and buy her share for $20. They&rsquo;re willing to pay $25, but since Alice is selling it for cheaper, of course they will buy it for $20 instead. Similarly, if instead, an existing shareholder said &ldquo;I am <em>selling</em> a share of BestWidgets for <em>at least</em> $10&rdquo;, then they would sell their share to Bob for $15.</p>\n\n<p>In the real stock market, What Alice did is called placing a sell limit order, which is when you put a stock up for sale at some minimum price and wait for someone to buy it from you for that price or higher. Bob made a buy limit order, which is when you say you want to buy a stock at some maximum price and wait for someone to sell it to you for that price or lower. This is all computerized and automated, so traders put in these orders and a trade occurs when a buy limit overlaps with a sell limit. The trade is filled based on the earlier order&rsquo;s limit, and the reasoning is the same as our examples.</p>\n\n<p>Let&rsquo;s say Alice was selling a share for $20 and Bob was selling a share for $25. If someone comes in and wants to buy a share for at most $30, they will buy Alice&rsquo;s share for $20 instead of Bob&rsquo;s share for $25 because they want the best deal.</p>\n\n<p>Here is some rough pseudocode for the process of making limit order trades:</p>\n\n<pre><code>handle-new-buy-limit-order(maximum-buying-price):\n  slo = minimum-priced pending sell limit order\n  if slo's minimum selling price &lt;= maximum-buying-price:\n    make the trade at slo's minimum selling price\n  else:\n    add the buy limit order to the list of pending buy limit orders\n      \nhandle-new-sell-limit-order(minimum-selling-price):\n  blo = maximum-priced pending buy limit order\n  if blo's maximum buying price &lt;= minimum-selling-price:\n    make the trade at blo's maximum buying price\n  else:\n    add the sell limit order to the list of pending sell limit orders</code></pre>\n\n<p>When someone says they want to buy a share, we&rsquo;d run <code>handle-new-buy-limit-order</code>.</p>\n\n<p>This simulates what would&rsquo;ve happened if the stock market was just a bunch of people holding up signs that said what price they&rsquo;d buy or sell for. When a buyer comes in to the market, they&rsquo;ll look at all the sellers and if any of them are selling at what they think is a good price, they&rsquo;ll take the best deal. If all the sellers are selling at a price that the buyer thinks is too high, the buyer will start holding up a sign with their buying price and wait until a seller comes in and takes them up on their offer. And vice versa for a new seller coming into the market.</p>\n\n<p>It&rsquo;s sort of like an auction, but instead of a bidding war, the trade happens immediately when someone comes in with the first good enough offer that passes the threshold of the buy/sell limit order.</p>\n\n<p>A limit order guarantees a certain price threshold, but of course, it&rsquo;s possible that nobody takes you up on your trade. There are other types of trades, like a market order, where you say &ldquo;I want to buy a share, give me the best deal available&rdquo;. That guarantees you a trade immediately, but since the stock price can fluctuate rapidly, you might not know exactly how much you&rsquo;re buying for.</p>\n\n<p>Speaking of which, what is the stock price and how is it calculated?</p>\n\n<h2 id=\"how-is-the-stock-price-calculated\">How is the stock price calculated?</h2>\n\n<p>For a publicly traded stock, people are making buy and sell orders according to what they think the value of a share is, and by extension, the value of the company as a whole. If I think BestWidgets is worth $20,000,000 and I have 1 share out of the 1,000,000 total shares, I would only sell my share for at least $20. Other people may disagree on how much BestWidgets is worth and they&rsquo;ll make different offers for buying and selling shares.</p>\n\n<p>When no trades are happening there are a bunch of pending sell limit orders and a bunch of pending buy limit orders. All the pending sell limit orders have prices higher than all the buy limit orders. Otherwise, a trade would be made. There is a gap between the lowest pending sell limit, called the ask price, and the highest pending buy limit, called the bid price. These are the best sell and buy offers for a prospective trader, so the gap is between the ask and bid prices. When a buy or sell order comes in at a price inside of this gap, the trade doesn&rsquo;t execute yet because nobody wants to make it. Instead, it will become the new bid or ask price depending on whether it&rsquo;s a buy or sell order respectively.</p>\n\n<p>When a buy order comes in at or above the ask price, the lowest pending sell order and the new buy order are filled, and the trade executes at the price of that lowest sell order (the ask price). Since the sell limit order that used to be the ask price is now gone, the next lowest sell limit order becomes the new ask price, so the gap widens. And vice versa for a sell order coming in below the bid price.</p>\n\n<p>If you assume everybody is buying or selling at a price that reflects their estimated value of the company, then within the ask-bid gap lies the market&rsquo;s collective estimation of a share&rsquo;s value. If the ask price is $20 and the bid price is $15, then the market generally believes the price of a share is somewhere between $15 and $20. If the market as a whole believed a share was actually worth $25, people would be buying those $20 shares and people would keep buying shares until the only pending sale orders are for more than $25. As a result, the ask price would increase, and the gap would &ldquo;move up&rdquo; in response.</p>\n\n<p>If we assume the market is full of people who want to buy something for less than it&rsquo;s worth and sell it for more than it&rsquo;s worth, the gap will always move to contain the market&rsquo;s estimated value of a share. Since each trade is always made at the &ldquo;best&rdquo; price available, the most recent trade&rsquo;s price is a good indicator of the market&rsquo;s estimation of a share&rsquo;s value.</p>\n\n<p>In fact, the number you see when you look up a stock&rsquo;s price is literally just the price of the most recent trade.</p>\n\n<p>To get a better feel for why this makes sense, let&rsquo;s think more about that example with the stock selling for $20 when it should be worth $25. If a share should actually be worth $25 but the market doesn&rsquo;t realize that yet, people will keep buying from sellers who are selling for less than $25 until nobody is selling for less than $25 anymore. Assuming there were lots of pending sell orders between $20 and $25, the last trade in that process will end up being made at just under $25, which is what the new stock price will be!</p>\n\n<p>But this is an overly idealized situation. Different people will have different estimations of a company&rsquo;s value. Some will think it&rsquo;s currently undervalued and want to buy, and others will think it&rsquo;s overvalued and want to sell. This will create lots of opposing upward and downward forces on the price. These opposing forces result in a price that reflects something like the average estimation of the company&rsquo;s value across all traders.</p>\n\n<p>Taking an average over a large crowd&rsquo;s guesses is a good way to get a pretty accurate value. If you have a big jar of jelly beans and tell people to guess how many beans are in the jar, hardly anyone will get it right. But if you take the average of everyone&rsquo;s guesses, it&rsquo;s very accurate! In the stock market, since there is money to be made and a traders rely on their ability to estimate a company&rsquo;s value, they are going to motivated to make good guesses. The company&rsquo;s value is like the true number of jellybeans in the jar and the stock price is like the average of the guesses.</p>\n\n<p>But with the jar, there is a correct answer. With a stock, there really isn&rsquo;t. The value of a company is exactly determined by the stock price because if you want to buy the company, you buy shares! There is no &ldquo;true&rdquo; correct value of a company. You can use business metrics to mathematically estimate a company&rsquo;s value, but you also have to think about the company&rsquo;s future potential, which is uncertain.</p>\n\n<p>In conclusion, if a stock&rsquo;s price misvalued by the market, traders in the market will see an opportunity for to make money. The process of making that money causes the market to shift and correct itself, resulting in the stock having a more accurate value. The most recent transaction price reflects this value.</p>\n\n<p>Wait a minute though. It makes sense that a misvalued stock creates an opportunity for good deals, but how exactly would traders make money off of that?</p>\n\n<h2 id=\"why-do-people-buy-and-sell-stocks\">Why do people buy and sell stocks?</h2>\n\n<p>TODO if a stock is misvalued or you think its value will change, you can make money by buying low and selling high. also some people just want ownership/dividends.</p>\n\n<p>Let&rsquo;s say BestWidgets is trading at $20 per share, but you think it&rsquo;s undervalued and should actually be $25. If you&rsquo;re right, then other people are going to realize this too and eventually, the market will correct itself and the price will end up at $25. That means if you buy a share now at $20 and then the price increases to $25, you can sell your share for $25 and make $5! In general, if you think the value of a stock is going to increase in the future, you can make money by buying it for a low price now and selling it for a high price later. However, if you do this and then the price actually goes down, selling it would cause you to lose money, so there is a risk.</p>\n\n<p>That&rsquo;s why investors will only invest money in a company if they believe it has potential to become more valuable in the future. If a share will become more valuable in the future, you want to invest now so you can make money selling it later. That&rsquo;s why a stock&rsquo;s price isn&rsquo;t solely determined by how much money the company is making right now. It all gets pretty meta. If the stock price reflects the current value of the company and it looks like the company will become more valuable, people will start buying the stock because they know they&rsquo;ll be able to make more money in the future by selling it high later. But that drives the price up to what the predicted future value is even though that&rsquo;s not the actual value of the company yet! It&rsquo;s this self-referential meta-gaming of traders thinking about how other traders will act and how the rest of the market will change, which changes the market. Anyway, this is why when a company announces a big new project that&rsquo;s going to make them lost of money, the stock price goes up now even though they haven&rsquo;t actually started making that money yet.</p>\n\n<p>But if you think a stock is over-valued and think the price will go down in the future, there is also a way to make money. Let&rsquo;s say you have a share of BestWidgets and you think the price will go down from $20 to $15. If you sell your share now and the price does end up at $15, you can buy a share back. But if the price actually ends up going up, then you&rsquo;ll lose money if you buy it back, so there&rsquo;s risk there too.</p>\n\n<p>If you don&rsquo;t have a share, you can still make money if the price goes down, but it&rsquo;s a little more complicated. The first step is to borrow a share from someone. They give you a share and after some agreed upon timeframe, you give them a share back. It doesn&rsquo;t have to be the same share because all shares are equivalent. This shareholder will probably charge you a small fee to borrow the share. Next, you immediately sell the share. At some point in between now and when you have to give back the share, you have to buy a share back, ideally at the lowest possible price. If you borrow a share for $0.50 when the price is at $20, sell it, then the price goes down to $15 and you buy a share, then give it back, you just made $4.50. You make a little less because of the borrowing fee. And in order to make money, the price has to go down by more than $0.50 to cover the cost of the borrowing fee. This is called short selling.</p>\n\n<p>There is a big risk in short selling. If you own a stock, bet on the price going down by selling it, and then the price goes up, you can either buy the stock at the higher price and lose some money, or just walk away with the money you made from selling it. However, when you&rsquo;re short selling, you have to give a share back to the person you borrowed it from. This means if the price goes up a lot, you will be forced to lose a lot of money. But if the stock goes down, it can only go down so much. If the stock starts at $20, the most you can make from a short sell is $20 minus the borrowing fee, but there is no theoretical limit to how much money you can lose. Be careful when short selling.</p>\n\n<p>You might be wondering why someone would want to lend out their share. It&rsquo;s kind of like a bank issuing a loan. You have some asset that someone wants to borrow. Since they want what you have, you can charge them money to borrow it. You assume some risk since it&rsquo;s possible that they won&rsquo;t be able to give back your share, like if they short sold your share and the price went up so much that they can&rsquo;t afford to buy it back, but if all goes well, you just pocket the borrowing fee and you still have a share! However, if you think the stock price is going to go down, you might want to just sell your share now and buy it back later to make some money yourself instead of lending your share out and letting someone else make that money instead!</p>\n\n<p>If a stock is undervalued or overvalued, there is money to be made by buying or selling respectively. Unfortunately, this opportunity doesn&rsquo;t last long. As people buy or sell to take advantage of this opportunity to make money, the market shifts towards the correct value, and once the market stabilizes on the correct value, there is no more money to be made. That&rsquo;s why it&rsquo;s hard to make money trading like this. You have to spot a misvalued stock before the market does, or take a gamble on an uncertain prediction and hope you end up being right. If you do end up investing/trading in the stock market, be very careful and know that there are lots of risks. But now, hopefully you understand the inner workings of the stock market and its risks on a deeper level!</p>\n<!-- TODO I think a youtube video presented narratively consisting mostly of illustrative examples is a better medium. adapt this into a script. Like start out by saying \"Let's say you have a company called BestWidgets, ...\" and take everything from there as a running example, explaining people's internal thoughts and reasoning to explain everything. That also makes it more fun because you can add jokes.-->")) ((? . 11) f post (u . "Continuations") (? . 11) 1744126109 (p+ #"/home/runner/work/blog/blog/repo/2023/09/continuations.html" . unix) (u . "/blog/2023/09/continuations.html") (u . "2023-09-24T12:37:35") (? . 3) (? . 10) (c (u . "racket") c (u . "continuations") c (u . "tutorials") c (u . "programming-languages") c (u . "understand-and-implement")) (u . "\n<p>Continuations are a powerful tool that allow you to implement control flow constructs like exceptions, generators, and multi-threading, and back tracking as libraries. That&rsquo;s right, libraries! In a programming language that gives access to continuations, these features don&rsquo;t have to be baked into the implementation of the language. In this post, we will explore what continuations are, how to use them, and how to implement them in a programming language as a pre-processing step.</p>") #t (u . "\n<p>Continuations are a powerful tool that allow you to implement control flow constructs like exceptions, generators, and multi-threading, and back tracking as libraries. That&rsquo;s right, libraries! In a programming language that gives access to continuations, these features don&rsquo;t have to be baked into the implementation of the language. In this post, we will explore what continuations are, how to use them, and how to implement them in a programming language as a pre-processing step.</p>\n<!--more-->\n\n<table cellpadding=\"0\" cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.What_is_a_.Continuation_%29\">1<span class=\"hspace\">&nbsp;</span>What is a Continuation?</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\"></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.Using_.Continuations%29\">2<span class=\"hspace\">&nbsp;</span>Using Continuations</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toclink\" data-pltdoc=\"x\" href=\"#%28part._.Early_.Return%29\">2.1<span class=\"hspace\">&nbsp;</span>Early Return</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toclink\" data-pltdoc=\"x\" href=\"#%28part._.Exceptions%29\">2.2<span class=\"hspace\">&nbsp;</span>Exceptions</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toclink\" data-pltdoc=\"x\" href=\"#%28part._.Generators%29\">2.3<span class=\"hspace\">&nbsp;</span>Generators</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toclink\" data-pltdoc=\"x\" href=\"#%28part._.Multi_.Threading%29\">2.4<span class=\"hspace\">&nbsp;</span>Multi Threading</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toclink\" data-pltdoc=\"x\" href=\"#%28part._.Back_.Tracking%29\">2.5<span class=\"hspace\">&nbsp;</span>Back Tracking</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toclink\" data-pltdoc=\"x\" href=\"#%28part._.Limitations%29\">2.6<span class=\"hspace\">&nbsp;</span>Limitations</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\"></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.How_to_.Implement_.Continuations%29\">3<span class=\"hspace\">&nbsp;</span>How to Implement Continuations</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\"></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.Delimited_continuations%29\">4<span class=\"hspace\">&nbsp;</span>Delimited continuations</a></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\"></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class=\"toptoclink\" data-pltdoc=\"x\" href=\"#%28part._.Conclusion%29\">5<span class=\"hspace\">&nbsp;</span>Conclusion</a></p></td></tr></tbody></table>\n\n<p>This post is written in Racket since it gives us access to continuations, but I&rsquo;ll explain Racket-y stuff as we go, so you don&rsquo;t need to know it.</p>\n\n<h1>1\n <tt>&nbsp;</tt><a name=\"(part._.What_is_a_.Continuation_)\"></a>What is a Continuation?</h1>\n\n<p>A continuation captures the context of evaluation of an expression. To make this concrete, let&rsquo;s start with an example borrowed from <a href=\"https://docs.racket-lang.org/guide/conts.html\">The Racket Guide</a>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">5</span></p></td></tr></tbody></table></div>\n\n<p>A brief Racket aside: Instead of writing <span class=\"RktVal\">1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">1</span><span class=\"RktMeta\"></span> in Racket, we write <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span>. There are a lot of parentheses!</p>\n\n<p>At the point where the <span class=\"RktVal\">2</span> is being evaluated, we are \"inside\" of three enclosing addition expressions. The next steps for evaluation are to evaluate the expression <span class=\"RktVal\">2</span> and then add 3 to it.</p>\n\n<p>Ok, so where do continuations come in? A continuation captures the \"and then add 3 to it\". At the point where the <span class=\"RktVal\">2</span> is being evaluated, the current continuation is something that adds 3. Evaluation has this continuation, evaluates the expression <span class=\"RktVal\">2</span> to the value 2, and then plugs in 2 to the current continuation, giving us 5.</p>\n\n<p>We can think of a continuation like a hole in the program: <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"stt\"> </span><span class=\"RktSym\">?</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span>. This is the context of evaluation at the point where we are evaluating the <span class=\"RktVal\">2</span>. The continuation captures the \"rest of the program\" after filling in the hole, and in this case, we fill in the hole with 2. The continuation is like a function that fills in the hole with some value and continues the program. In this case, it is a function that adds 3 to its input. In Racket, we can access this continuation directly:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">5</span></p></td></tr></tbody></table></div>\n\n<p>Some Racket stuff: <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span> is used for creating anonymous functions, so <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"stt\"> </span><span class=\"RktVal\">5</span><span class=\"stt\"> </span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span> is a function that multiplies its input by 5. Functions are called like <span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"stt\"> </span><span class=\"RktSym\">x</span><span class=\"stt\"> </span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span> instead of <span class=\"RktSym\">f</span><span class=\"RktPn\">(</span><span class=\"RktSym\">x</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quasiquote.html#%28form._%28%28quote._~23~25kernel%29._unquote%29%29\">,</a></span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span>. When we write <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"stt\"> </span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span>, we are calling the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span> function with two arguments. <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> is a special built-in function that I&rsquo;ll explain soon, and we&rsquo;re calling it with one argument, our lambda function. Our lambda <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"stt\"> </span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span> takes in a function, <span class=\"RktSym\">k</span>, and calls it with the argument <span class=\"RktVal\">2</span>. There are a lot of functions here, so it&rsquo;s easy to get confused. But it&rsquo;ll become more clear with some examples.</p>\n\n<p><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span>, or <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29\">call/cc</a></span> for short, is a built-in function that gives us access to the current continuation. Using it pretty much always looks like this: <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktSym\">do-something-with-k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span>, where <span class=\"RktSym\">k</span> is the current continuation. The continuation <span class=\"RktSym\">k</span> is represented as a 1-argument function, which \"fills in the hole\" with the argument (2 in this case) and continues evaluating the expression. The \"hole\" is created where we call <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> , so the entire call to <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> is what gets replaced when we call <span class=\"RktSym\">k</span> with some value.</p>\n\n<p>This is cool, but it looks like we haven&rsquo;t really gained anything. The result is the same, so why are we making this more complicated by involving continuations? The real power comes from the fact that we can do whatever we want with <span class=\"RktSym\">k</span> inside of that lambda:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">save-it!</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">save-it!</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">5</span></p></td></tr></tbody></table></div>\n\n<p>Some Racket stuff: <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span> is used to define variables and functions. <span class=\"RktVal\">#f</span> is false, and we use as an initial value for the saved continuation, <span class=\"RktSym\">saved-k</span>. We define <span class=\"RktSym\">save-it!</span> to be a 0-argument function which uses <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span>. <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span> (pronounced set bang) is a variable assignment, so this sets the value of <span class=\"RktSym\">saved-k</span> to be <span class=\"RktSym\">k</span>, which is the current continuation that we&rsquo;re capturing. There is nothing special about the exclamation point in the name, it is just a convention for functions that have side effects. When there are multiple expressions in the body of a <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span> expression, we evaluate them in order and return the last one. So this lambda assigns <span class=\"RktSym\">saved-k</span> to the current continuation and then \"fills the hole\" with <span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"stt\"> </span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span>.</p>\n\n<p>Instead of just getting the current continuation and immediately using it by \"filling in the hole\" with 2, we save it to the variable <span class=\"RktSym\">saved-k</span> first. We still get 5, but now, we have access to that saved continuation, even after the expression is done evaluating:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">5</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">9</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">13</span></p></td></tr></tbody></table></div>\n\n<p>We can continue, or \"resume\", the computation as many times as we want using the continuation we captured and saved. In other words, the continuation <span class=\"RktSym\">saved-k</span> remembers its context. Pretty cool!</p>\n\n<p>Here is another example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">save-it!</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">7</span></p></td></tr></tbody></table></div>\n\n<p>Now, instead of just adding three to what we fill in the hole with, we&rsquo;re multiplying that value by two and then adding three:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">13</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">5</span></p></td></tr></tbody></table></div>\n\n<p>One weird thing about continuations created with <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> is that they \"abort\" when you use them. For example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">13</span></p></td></tr></tbody></table></div>\n\n<p>If <span class=\"RktSym\">saved-k</span> was just a regular function that multiplies its input by 2 and adds 3, we&rsquo;d expect to get 65. However, we get the same result as if the whole expression was <span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"stt\"> </span><span class=\"RktVal\">5</span><span class=\"RktPn\">)</span>. We never compute <span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"stt\"> </span><span class=\"RktVal\">7</span><span class=\"RktPn\">)</span> or that outer multiplication. When we call a continuation created with <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> , we throw away our context. These continuations behave like a jump or a go-to. If we want to avoid this, we can use <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span> instead:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">save-it!</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">save-it!</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">17</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">13</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">5</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">65</span></p></td></tr></tbody></table></div>\n\n<p>Continuations created with <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span> can be treated like regular old functions.</p>\n\n<p>You might&rsquo;ve noticed that we got 17 for the first expression instead of 7. Why?</p>\n\n<p>Let&rsquo;s see what would&rsquo;ve happened if we didn&rsquo;t use <span class=\"RktSym\">k</span> in <span class=\"RktSym\">save-it!</span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">save-it!</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">save-it!</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">7</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">13</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">5</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">65</span></p></td></tr></tbody></table></div>\n\n<p>Now we just return <span class=\"RktVal\">2</span> directly instead of <span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"stt\"> </span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span>, and it behaves normally. When using <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span>, whatever gets returned by the lambda fills in the hole. Now, we are filling in the hole with 2 initially. Before, when we were calling <span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"stt\"> </span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span> in the lambda, we were calculating <span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"stt\"> </span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span>, which was 7, and returning that. Then, we ended up filling the hole with 7 since that&rsquo;s what the lambda returned.</p>\n\n<p>The same thing happens with <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> too:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">save-it!</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">save-it!</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">7</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">13</span></p></td></tr></tbody></table></div>\n\n<p>But in our original implementation of <span class=\"RktSym\">save-it!</span>, we called <span class=\"RktSym\">k</span> in the lambda. So why didn&rsquo;t we get 17 there too? It&rsquo;s because <span class=\"RktSym\">k</span> aborted the computation, so we never actually returned from the lambda! We just \"jumped\" into resuming the computation, losing the context of returning from the lambda. This is really subtle.</p>\n\n<p>But we didn&rsquo;t end up getting 17 because This would&rsquo;ve happened with <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> too, but since <span class=\"RktSym\">k</span> aborts, we only filled in the hole once. This is very subtle.</p>\n\n<p>With both <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> and <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span>, returning a value from the lambda fills in the hole with that value. Since continuations created with <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span> don&rsquo;t abort, calling <span class=\"RktSym\">k</span> in the lambda and returning the result ends up filling in the hole, and thus, applying the continuation, twice: Once from the call to <span class=\"RktSym\">k</span> and once from returning from the lambda. However, since continuations created by <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> abort, calling <span class=\"RktSym\">k</span> in the lambda causes the lambda to never return, and instead, the whole computation is replaced with the value of filling in the hole, so the hole only gets filled in once, and the continuation only gets applied once.</p>\n\n<p>Let&rsquo;s recap what we know so far: <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> creates a hole in an expression, a continuation given to us as the function <span class=\"RktSym\">k</span>, that, when called with an argument, gives us the result of evaluating the expression if you replaced the hole with that argument. Calling <span class=\"RktSym\">k</span> also aborts evaluation of the expression you called it in with the result of resuming the continuation, unless you use <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span>.</p>\n\n<p>If you&rsquo;re anything like me, this still doesn&rsquo;t quite make sense. What exactly does the continuation capture? What is the order of events? How does any of this even work?!</p>\n\n<p>If you play around enough, you&rsquo;ll start to get a feel for it. But once you start to think you understand how it works and how to use it, you&rsquo;ll run into a really weird example that will throw everything out the window, like <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span><span class=\"stt\"> </span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span><span class=\"RktPn\">)</span>. What does that do?! Even after implementing <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> myself, I still don&rsquo;t fully understand it. But you can still safely make use of it by avoiding weird stuff and being careful, for the most part.</p>\n\n<h1>2\n <tt>&nbsp;</tt><a name=\"(part._.Using_.Continuations)\"></a>Using Continuations</h1>\n\n<p>Now let&rsquo;s implement some control flow constructs.</p>\n\n<h2>2.1\n <tt>&nbsp;</tt><a name=\"(part._.Early_.Return)\"></a>Early Return</h2>\n\n<p>To get a taste for how we can use continuations for making our own control flow constructs, we can implement an early return operation.</p>\n\n<p>For example, let&rsquo;s write a function that computes the product of a list of numbers:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">product</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nums</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._empty~3f%29%29\">empty?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nums</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">1</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._first%29%29\">first</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nums</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">product</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._rest%29%29\">rest</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nums</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">product</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">24</span></p></td></tr></tbody></table></div>\n\n<p>Some Racket stuff: In Racket, <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span> is an expression instead of a statement. It&rsquo;s like the ternary conditional operator in popular languages. <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._empty~3f%29%29\">empty?</a></span> (pronounced empty huh) is a function that returns true when its argument is an empty list. Again, the question mark in the name isn&rsquo;t anything special, it&rsquo;s just a convention for a function that returns a boolean. In Racket, we use linked lists, where <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._first%29%29\">first</a></span><span class=\"stt\"> </span><span class=\"RktSym\">nums</span><span class=\"RktPn\">)</span> returns the first element and <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._rest%29%29\">rest</a></span><span class=\"stt\"> </span><span class=\"RktSym\">nums</span><span class=\"RktPn\">)</span> returns the rest of the list. For <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktVal\">2</span><span class=\"stt\"> </span><span class=\"RktVal\">3</span><span class=\"stt\"> </span><span class=\"RktVal\">4</span><span class=\"RktPn\">)</span>, the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._first%29%29\">first</a></span> is <span class=\"RktVal\">2</span> and the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._rest%29%29\">rest</a></span> is <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktVal\">3</span><span class=\"stt\"> </span><span class=\"RktVal\">4</span><span class=\"RktPn\">)</span>. When a list only has one element, the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._rest%29%29\">rest</a></span> is an empty list.</p>\n\n<p>This ends up producing the multiplication <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"stt\"> </span><span class=\"RktVal\">2</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"stt\"> </span><span class=\"RktVal\">3</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"stt\"> </span><span class=\"RktVal\">4</span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span>.</p>\n\n<p>Let&rsquo;s think about what happens for <span class=\"RktPn\">(</span><span class=\"RktSym\">product</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktVal\">2</span><span class=\"stt\"> </span><span class=\"RktVal\">3</span><span class=\"stt\"> </span><span class=\"RktVal\">0</span><span class=\"stt\"> </span><span class=\"RktVal\">4</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span>. We&rsquo;ll end up computing <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"stt\"> </span><span class=\"RktVal\">2</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"stt\"> </span><span class=\"RktVal\">3</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"stt\"> </span><span class=\"RktVal\">0</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"stt\"> </span><span class=\"RktVal\">4</span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span>, which will be zero. But this is a waste. We don&rsquo;t need to compute any of those multiplications because once we see a zero, the whole answer will be zero. It would be nice if we could just instantly return 0 without having to do any multiplications. We can avoid the <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"stt\"> </span><span class=\"RktVal\">0</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"stt\"> </span><span class=\"RktVal\">4</span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span> by adding a case that returns 0 if the current number is zero instead of recurring, but then we&rsquo;d still end up computing <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"stt\"> </span><span class=\"RktVal\">2</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"stt\"> </span><span class=\"RktVal\">3</span><span class=\"stt\"> </span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span>, which is a waste. What we want is to skip the pending recursive calls and immediately return 0 for the whole thing.</p>\n\n<p>We can do this using <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">product-helper</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nums</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">abort-k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._empty~3f%29%29\">empty?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nums</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">1</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._equal~3f%29%29\">equal?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._first%29%29\">first</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nums</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">abort-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._first%29%29\">first</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nums</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">product-helper</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._rest%29%29\">rest</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nums</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">abort-k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">product</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nums</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">product-helper</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">nums</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">product</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">24</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">product</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">0</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">product</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"not a number\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">0</span></p></td></tr></tbody></table></div>\n\n<p>We moved the core logic to a helper function, <span class=\"RktSym\">product-helper</span>, which takes in an additional argument, <span class=\"RktSym\">abort-k</span>, which is a continuation used for returning early. We call this continuation to immediately return 0 when we find a zero in the list. We can see that this really does avoid the multiplications from the third example with the string, since we would get an error if we multiplied a string with a number.</p>\n\n<p>Here, the continuation captured by <span class=\"RktSym\">k</span> is for the entire product computation. In the previous examples, we&rsquo;ve been in the middle of a computation (nested addition expressions) and used <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> to capture the surrounding context so we can re-use it with <span class=\"RktSym\">saved-k</span>. But here, we&rsquo;re doing the opposite: We&rsquo;re capturing the continuation of the whole product computation, and within the computation of <span class=\"RktSym\">product</span>, we&rsquo;re using the continuation to throw away the surrounding context and replace the whole computation with an immediate answer. This throws away the pending multiplications from surrounding recursive calls, saving us from computing them.</p>\n\n<h2>2.2\n <tt>&nbsp;</tt><a name=\"(part._.Exceptions)\"></a>Exceptions</h2>\n\n<p>This behavior of aborting a computation early sounds a lot like exceptions. In fact, we can implement a crude form of exceptions using this same trick!</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">throw-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-exceptions</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">throw-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-exceptions</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"all good\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">\"all good\"</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-exceptions</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">throw-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"something went wrong\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">\"something went wrong\"</span></p></td></tr></tbody></table></div>\n\n<p><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktVal\">\"all good\"</span><span class=\"RktPn\">)</span> creates a zero-argument function which returns \"all good\". We use zero-argument functions here to delay the evaluation of the body so we can wrap the continuation logic around it.</p>\n\n<p>This doesn&rsquo;t support handlers or nested <span class=\"RktSym\">with-exceptions</span> blocks, but that&rsquo;s possible with some careful book-keeping.</p>\n\n<h2>2.3\n <tt>&nbsp;</tt><a name=\"(part._.Generators)\"></a>Generators</h2>\n\n<p>Let&rsquo;s implement generators. For those unfamiliar, here is an example using Racket&rsquo;s generators:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">racket/generator</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">g</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28form._%28%28lib._racket%2Fgenerator..rkt%29._generator%29%29\">generator</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._println%29%29\">println</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"hello\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktOut\">\"hello\"</span></p></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">3</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>A generator is a type of sequence whose elements come from calls to <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span> in the body of the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28form._%28%28lib._racket%2Fgenerator..rkt%29._generator%29%29\">generator</a></span> expression. Calling <span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span> gives us the next element <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span>ed by the generator. Once there are no more elements, <span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span> returns nothing. Also notice that we only print <span class=\"RktVal\">\"hello\"</span> after the second call. This means that the body of the generator is suspended after each yield, and the elements are only produced on-demand. This allows us to create generators of infinite sequences:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">g</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28form._%28%28lib._racket%2Fgenerator..rkt%29._generator%29%29\">generator</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">3</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">4</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">5</span></p></td></tr></tbody></table></div>\n\n<p>Now let&rsquo;s implement generators:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">yield-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">resume-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28form._%28%28lib._racket%2Fgenerator..rkt%29._generator%29%29\">generator</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">resume-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">yield-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">resume-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29\">void</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">resume-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">g</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28form._%28%28lib._racket%2Fgenerator..rkt%29._generator%29%29\">generator</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>There is a lot going on here, so let&rsquo;s go through every piece:</p>\n\n<p>Firstly, unlike the previous examples, we need two saved continuations. This is because when we \"jump out\" and yield, we need to be able to jump back in. Previously, we only ever jumped out. <span class=\"RktSym\">yield-k</span> keeps track of where to \"jump out\" to, and <span class=\"RktSym\">resume-k</span> keeps track of where to \"jump back in\" to.</p>\n\n<p>Focusing on <span class=\"RktSym\">yield-k</span>, like before, we set the \"jump out\" continuation <span class=\"RktSym\">yield-k</span> in a <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> in our entry point, <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28form._%28%28lib._racket%2Fgenerator..rkt%29._generator%29%29\">generator</a></span>. And when we <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span>, we use <span class=\"RktSym\">yield-k</span> to jump out. But now, this is all happening in a lambda. In particular, it is happening in the zero-argument lambda that is returned by <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28form._%28%28lib._racket%2Fgenerator..rkt%29._generator%29%29\">generator</a></span>. So when we yield a value, it&rsquo;s like we&rsquo;re replacing that lambda body with the value we&rsquo;re yielding. And this is exactly what we want, since calling the function returned by <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28form._%28%28lib._racket%2Fgenerator..rkt%29._generator%29%29\">generator</a></span> should return the next yielded value.</p>\n\n<p>Now let&rsquo;s talk about <span class=\"RktSym\">resume-k</span>. This variable keeps track of the continuation of the last call to yield. In other words, it is the continuation that, when called, resumes the body of the generator after it got suspended when it last yielded. As such, we initialize it to just run the whole body at the start, since the body hasn&rsquo;t run yet. Then, every time we yield, we update <span class=\"RktSym\">resume-k</span> to the current continuation and we jump out with the value that was yielded. Then, next time the generator is called, we will resume using the continuation we just saved and run until we reach the end of the body or yield again. We call <span class=\"RktSym\">resume-k</span> with <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29\">void</a></span><span class=\"RktPn\">)</span> since the result of evaluating a <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span> expression in the body should be nothing.</p>\n\n<p>To make sure we understand all the moving parts, let&rsquo;s go through our example step by step. Here is the code again:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">yield-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">resume-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28form._%28%28lib._racket%2Fgenerator..rkt%29._generator%29%29\">generator</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">resume-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">yield-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">resume-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29\">void</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">resume-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">yield-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">g</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28form._%28%28lib._racket%2Fgenerator..rkt%29._generator%29%29\">generator</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>Both continuations start out as <span class=\"RktVal\">#f</span>. Then, we make the generator <span class=\"RktSym\">g</span>. This sets <span class=\"RktSym\">resume-k</span> to a function that just runs the body. It&rsquo;s not really a continuation, but that&rsquo;s ok. We then return the generator, which is that zero-argument lambda.</p>\n\n<p>Then, we call the generator function. This sets <span class=\"RktSym\">yield-k</span> to the current continuation, which will replace the entire expression <span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span>, and resumes the body, which will just start the body. Then, the body yields 1, which sets <span class=\"RktSym\">resume-k</span> to the current continuation in the body, which is a function that will end up calling <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span><span class=\"stt\"> </span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span>, and then we jump out by calling <span class=\"RktPn\">(</span><span class=\"RktSym\">yield-k</span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span>, which replaces the <span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span> with 1.</p>\n\n<p>Now, we call <span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span> again. This again sets <span class=\"RktSym\">yield-k</span> to the current continuation, which will replace the entire expression <span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span>, and resumes the body, which will resume after the first yield. Then, the body yields 2, which sets <span class=\"RktSym\">resume-k</span> to the current continuation in the body, which is a function that will end up doing nothing since the body is finished, and then we jump out by calling <span class=\"RktPn\">(</span><span class=\"RktSym\">yield-k</span><span class=\"stt\"> </span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span>, which replaces the <span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span> with 2.</p>\n\n<p>Now, we call <span class=\"RktPn\">(</span><span class=\"RktSym\">g</span><span class=\"RktPn\">)</span> one more time. The same thing happens to <span class=\"RktSym\">yield-k</span> as before, and we resume the body, which immediately returns void because the body is done.</p>\n\n<p>The final call does the same thing.</p>\n\n<p>The reality is a little more complicated when you start to think about the fact that these continuations are aborting and about how much context they&rsquo;re actually capturing, but that&rsquo;s not important for our purposes.</p>\n\n<h2>2.4\n <tt>&nbsp;</tt><a name=\"(part._.Multi_.Threading)\"></a>Multi Threading</h2>\n\n<p>For multi threading, we&rsquo;ll support the following operations:</p>\n\n<p><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._spawn%29%29\">spawn</a></span><span class=\"stt\"> </span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span> puts a thread with continuation <span class=\"RktSym\">k</span> into the thread queue.</p>\n\n<p><span class=\"RktPn\">(</span><span class=\"RktSym\">quit</span><span class=\"RktPn\">)</span> kills the current thread and removes it from the thread queue.</p>\n\n<p><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span><span class=\"RktPn\">)</span> hands control from the current thread to another thread.</p>\n\n<p><span class=\"RktPn\">(</span><span class=\"RktSym\">start-threads</span><span class=\"RktPn\">)</span> starts executing threads in the thread queue.</p>\n\n<p><span class=\"RktPn\">(</span><span class=\"RktSym\">halt</span><span class=\"RktPn\">)</span> exits all threads.</p>\n\n<p>This is inspired by <a href=\"https://matt.might.net/articles/programming-with-continuations--exceptions-backtracking-search-threads-generators-coroutines/\">continuations by example</a>.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">list of continuations that resume their thread</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">threads</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">continuation to escape to the scheduler. aborts the computation.</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">quit-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">kicks off the thread scheduler and blocks until threads are completed.</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">start-threads</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">quit-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">scheduler</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._unless%29%29\">unless</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._empty~3f%29%29\">empty?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">threads</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">next-thread</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._first%29%29\">first</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">threads</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">threads</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._rest%29%29\">rest</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">threads</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">next-thread</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29\">void</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">add a thread to the end of the queue</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">push-thread!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">threads</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">threads</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">puts a thread for body in the thread queue</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._spawn%29%29\">spawn</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">push-thread!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">quit</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">kills the current thread and removes it from the queue</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">quit</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">quit-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29\">void</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">hand control from the current thread to another thread</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">push-thread!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">quit</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">kill all threads</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">halt</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">threads</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">quit</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._spawn%29%29\">spawn</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._spawn%29%29\">spawn</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">start-threads</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">vs</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(1 3 2 4)</span></p></td></tr></tbody></table></div>\n\n<p>We represent the thread queue with a list of threads, where the next thread in the queue is the first in the list. When we push a thread onto the queue, we add it to the end of the list.</p>\n\n<p>Like with generators, we keep track of one continuation for jumping out, <span class=\"RktSym\">quit-k</span>, which is analogous to <span class=\"RktSym\">yield-k</span> from generators. But instead of just one <span class=\"RktSym\">resume-k</span> like with generators, we keep track of a collection of body continuations to resume to, <span class=\"RktSym\">threads</span>.</p>\n\n<p>As far as continuation stuff goes, it&rsquo;s very similar to how we did generators, but with multiple continuations to resume to and slightly different organization.</p>\n\n<h2>2.5\n <tt>&nbsp;</tt><a name=\"(part._.Back_.Tracking)\"></a>Back Tracking</h2>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">queue of zero-argument functions that invoke continuations.</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">search-branches</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">forks for each value.</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">tries the next search branch in the queue.</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Not necessarily one of the branches introduced by this call</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choice</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vals</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">search-branches</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">search-branches</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Flist%29%29\">for/list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vals</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._when%29%29\">when</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._empty~3f%29%29\">empty?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">search-branches</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"search failed\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">next</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._first%29%29\">first</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">search-branches</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">search-branches</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._rest%29%29\">rest</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">search-branches</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">next</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">assert</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">condition</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">condition</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29\">void</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">(choice (list)) kills this search branch</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choice</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">find-pythag</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choice</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">7</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">8</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">9</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">11</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">12</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">13</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choice</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">7</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">8</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">9</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">11</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">12</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">13</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choice</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">7</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">8</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">9</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">11</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">12</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">13</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">assert</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._equal~3f%29%29\">equal?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">assert</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c~3d%29%29\">&lt;=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">find-pythag</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(3 4 5)</span></p></td></tr></tbody></table></div>\n\n<p><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Flist%29%29\">for/list</a></span> is like a list comprehension in python. We loop through <span class=\"RktSym\">vals</span> and create a bunch of lambdas that call the continuation <span class=\"RktSym\">k</span> with each value. <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._when%29%29\">when</a></span> is like an if statement in most languages. The body only runs when the condition is true.</p>\n\n<p>This is pretty similar to multi threading, but we store zero-argument functions instead of continuations since we need those functions to resume with a particular value, namely <span class=\"RktSym\">val</span>. We also don&rsquo;t store a quit continuation.</p>\n\n<p>This example is a little weird. We have <span class=\"RktSym\">find-pythag</span>, which we think of as encapsulating this search operation. But really, it&rsquo;s as if the whole program is a search. In a sense, we&rsquo;re still in the search right now!</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._length%29%29\">length</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">search-branches</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1815</span></p></td></tr></tbody></table></div>\n\n<p>There are still many search branches pending, and we theoretically could jump into them if we wanted to and continue the search. It may look like the search is over, but if we made another assertion, we would backtrack:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/begin.html#%28form._%28%28quote._~23~25kernel%29._begin%29%29\">begin</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">search-branches</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">triple</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">find-pythag</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._println%29%29\">println</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">triple</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">assert</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3e%29%29\">&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._first%29%29\">first</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">triple</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._println%29%29\">println</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">triple</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">'(3 4 5)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">'(5 12 13)</span></p></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>There is no mutation going on here. It&rsquo;s just that when we first looked at <span class=\"RktSym\">triple</span>, we were in a branch where <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktVal\">3</span><span class=\"stt\"> </span><span class=\"RktVal\">4</span><span class=\"stt\"> </span><span class=\"RktVal\">5</span><span class=\"RktPn\">)</span> was the candidate. But then, we made a new assertion which caused us to backtrack, so now it&rsquo;s like we&rsquo;re in a different timeline where <span class=\"RktSym\">triple</span> was <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktVal\">5</span><span class=\"stt\"> </span><span class=\"RktVal\">12</span><span class=\"stt\"> </span><span class=\"RktVal\">13</span><span class=\"RktPn\">)</span> all along. But then you&rsquo;d expect us to get three prints: One for the 3 4 5 and two for the 5 12 13. I honestly can&rsquo;t figure out why we only get one print for the 5 12 13. Like I said, once you think you understand continuations, you&rsquo;ll run into some weird stuff that throws that out the window.</p>\n\n<p>To limit the scope of what gets captured by these continuations and contain this weirdness, we can use delimited continuations. We will briefly explore them at the end.</p>\n\n<h2>2.6\n <tt>&nbsp;</tt><a name=\"(part._.Limitations)\"></a>Limitations</h2>\n\n<p>It&rsquo;s really cool that we can do this, but there are some problems with the way we&rsquo;ve implemented these features. One is that they&rsquo;re too global. For example, since we only have one variable for the yield and resume continuations in the generator, we can only have one generator active at a time. Otherwise, they&rsquo;ll overwrite each other&rsquo;s saved continuations and it&rsquo;ll be a mess. For similar reasons, weird things happen when we try to use multithreading in two ways at once, or our backtracking search. And our back tracking search leaks into the rest of the program, as we saw. We want these things to be local, re-usable and contained. Some of this could be alleviated with clever book-keeping to avoid problems like overwriting saved continuations. But Problems like the back tracking search leaking into the rest of the program are trickier to solve. To control the scope of our \"effects\", we can use delimited continuations, which I&rsquo;ll explain at the end.</p>\n\n<p>Even without these problems, continuations are still very confusing. They break local reasoning in your code since they can change the control flow and jump around, and the semantics are difficult to reason about in general. Continuations are best used to implement higher level features like generators, which are simple enough to use and reason about. Using continuations directly in your code is a recipe for confusion and weirdness.</p>\n\n<h1>3\n <tt>&nbsp;</tt><a name=\"(part._.How_to_.Implement_.Continuations)\"></a>How to Implement Continuations</h1>\n\n<p>One way to add support for continuations in your programming language is to translate the source program to continuation-passing style, or CPS. Here is an example of something close to CPS:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">factorial</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._equal~3f%29%29\">equal?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">factorial</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._-%29%29\"><span class=\"nobreak\">-</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">fac</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">fac</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">factorial-plus-one</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">factorial</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">fac</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">fac</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">factorial-plus-one</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">7</span></p></td></tr></tbody></table></div>\n\n<p>In CPS, every function takes in an extra parameter, <span class=\"RktSym\">k</span>, representing what you want to do with the answer. As you may have guessed, this <span class=\"RktSym\">k</span> represents a continuation. The expectation is that the function will call <span class=\"RktSym\">k</span> with the value that it would normally just return. For factorial, in our base case, we return <span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span>. But in the recursive case, instead of wrapping the recursive call in a multiplication, we wrap the continuation that we pass to the recursive call in a multiplication. This is a common pattern in CPS. When we want to do something to the result of a function call, we instead do it in the continuation that we pass to the function. After all, that <span class=\"RktSym\">k</span> is \"what we want to do with the answer\". Similarly, in <span class=\"RktSym\">factorial-plus-one</span>, we do the adding one in the continuation that we pass to the factorial function. And finally, when we actually want to get the value at top-level, we pass the identity function as continuation because we just want the answer. This is how we \"leave CPS land\".</p>\n\n<p>There are a few interesting things about CPS. One of them is that everything is a tail call. In true CPS, even operations like addition and multiplication would take in a continuation, so we&rsquo;d have <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"stt\"> </span><span class=\"RktSym\">n</span><span class=\"stt\"> </span><span class=\"RktSym\">fac</span><span class=\"stt\"> </span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span>, which would actually be a tail call. In fact, even constant expressions like <span class=\"RktVal\">1</span> would take in a continuation! We&rsquo;ll see how this works soon when we write a translator to CPS. Anyway, in true CPS, everything would be a tail call. This means if you translate your programs to CPS and have tail call optimization, you don&rsquo;t need a runtime stack!</p>\n\n<p>If you&rsquo;ve ever learned about tail recursion, you&rsquo;ve probably seen the accumulator pattern. Here is factorial written this way:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">factorial</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">acc</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._equal~3f%29%29\">equal?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">acc</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">factorial</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._-%29%29\"><span class=\"nobreak\">-</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">acc</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">factorial</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">24</span></p></td></tr></tbody></table></div>\n\n<p>Look familiar? If you squint, these two implementations look very similar. In a sense, continuations are like the mother of all accumulators. Throughout the whole program, we&rsquo;re accumulating the current continuation, which is \"what we want to do with the answer\".</p>\n\n<p>Now let&rsquo;s get into the translation. In our translation, translating an expression into CPS will result in an expression which is a function that takes in a continuation and calls the continuation with the result of evaluating the expression.</p>\n\n<p>Before we dive into implementation, which will involve a lot of potentially confusing features of Racket, let&rsquo;s focus on the rewrite rules symbolically.</p>\n\n<p>For now, an expression <span class=\"RktSym\">e</span> is one of:</p>\n\n<p>A variable reference <span class=\"RktSym\">x</span></p>\n\n<p>A constant <span class=\"RktSym\">c</span> like a number</p>\n\n<p>A single argument lambda <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktSym\">e</span><span class=\"RktPn\">)</span></p>\n\n<p>A function application <span class=\"RktPn\">(</span><span class=\"RktSym\">e1</span><span class=\"stt\"> </span><span class=\"RktSym\">e2</span><span class=\"RktPn\">)</span></p>\n\n<p>The result of translating an expression will be a function expression that takes in a continuation. The translated expression will call that continuation with its value.</p>\n\n<p>For a variable reference or a constant expression, the translation is simple:</p>\n\n<p><span class=\"RktPn\">[</span><span class=\"RktSym\">x</span><span class=\"RktPn\">]</span><span class=\"stt\"> </span><span class=\"RktSym\">~&gt;</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"stt\"> </span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></p>\n\n<p>We denote the translation of an expression <span class=\"RktSym\">e</span> with square brackets <span class=\"RktPn\">[</span><span class=\"RktSym\">e</span><span class=\"RktPn\">]</span>.</p>\n\n<p>We translate the variable reference or constant expression to a lambda that takes in a continuation and immediately calls it on itself. In our toy example, we didn&rsquo;t bother doing this, but we should have been doing it for all variable references and numbers. Luckily, we are writing a translator that will do this tedious task for us.</p>\n\n<p>Lambdas get an extra argument for the continuation, but since the lambda is an expression, we must also wrap it in a continuation function like we did for the constants:</p>\n\n<p><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktSym\">e</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"stt\"> </span><span class=\"RktSym\">~&gt;</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">x</span><span class=\"stt\"> </span><span class=\"RktSym\">cont</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">e</span><span class=\"RktPn\">]</span><span class=\"stt\"> </span><span class=\"RktSym\">cont</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></p>\n\n<p>We compile to a function that takes in a continuation <span class=\"RktSym\">k</span> and calls it on the value of the expression, which is the inner lambda. The inner lambda takes in <span class=\"RktSym\">x</span> as before, but also takes in an additional continuation argument <span class=\"RktSym\">cont</span> representing what the caller wants to do with the result of the body. Then, we recursively translate the body <span class=\"RktSym\">e</span>, which is going to be a lambda that takes in a continuation for what to do with its value. And that&rsquo;s exactly what <span class=\"RktSym\">cont</span> is, so we pass it <span class=\"RktSym\">cont</span>.</p>\n\n<p>Here is the rewrite rule for an application:</p>\n\n<p><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">e1</span><span class=\"stt\"> </span><span class=\"RktSym\">e2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"stt\"> </span><span class=\"RktSym\">~&gt;</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">e1</span><span class=\"RktPn\">]</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">e2</span><span class=\"RktPn\">]</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"stt\"> </span><span class=\"RktSym\">x</span><span class=\"stt\"> </span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></p>\n\n<p>where <span class=\"RktSym\">e1</span> is the function and <span class=\"RktSym\">e2</span> is its argument.</p>\n\n<p>As always, we start with <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span>, but we don&rsquo;t use <span class=\"RktSym\">k</span> immediately. Instead, we want to get the values of <span class=\"RktSym\">e1</span> and <span class=\"RktSym\">e2</span> so we can call the function with the argument. Since we&rsquo;re in CPS, translating <span class=\"RktSym\">e1</span> results in a function that accepts a continuation for what you want to do with the value. So we pass it a continuation that binds the result of <span class=\"RktSym\">e1</span> to <span class=\"RktSym\">f</span> so we can apply it later. Next, we do the same thing for the argument <span class=\"RktSym\">e2</span> and bind it to <span class=\"RktSym\">x</span>. Now, since we have both values, we can actually apply the function <span class=\"RktSym\">f</span> to <span class=\"RktSym\">x</span>. But since we&rsquo;re in CPS, <span class=\"RktSym\">f</span> takes in an additional continuation argument for what to do with the result of the function call. That&rsquo;s exactly what <span class=\"RktSym\">k</span> is for, so we pass <span class=\"RktSym\">k</span> to <span class=\"RktSym\">f</span>.</p>\n\n<p>Let&rsquo;s look at some examples. First, let&rsquo;s translate <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">y</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k2</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p></p>\n\n<div class=\"SIntrapara\">Now, let&rsquo;s see what happens when we apply this to a constant:\n</div>\n\n<div class=\"SIntrapara\">\n <div class=\"SCodeFlow\">\n  <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n   <tbody>\n    <tr>\n     <td><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;</span></td></tr>\n    <tr>\n     <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k1</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktVal\">2</span><span class=\"RktPn\">]</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;</span></td></tr>\n    <tr>\n     <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k1</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k2</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k3</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k4</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div></div>\n\n<p>As you can see, these expressions quickly get pretty complicated. I actually think it&rsquo;s easier to think of the translation in the general sense than by looking at concrete examples. Just remember the invariant that we always take in a continuation and call it with the answer. And to use the result of an expression, we call it with a continuation for what we want to do with it.</p>\n\n<p>Now we&rsquo;re ready for <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span>. This doesn&rsquo;t need any crazy runtime implementation. It just has its own special rewrite rule that doesn&rsquo;t follow the normal behaviors:</p>\n\n<p><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span><span class=\"RktPn\">]</span><span class=\"stt\"> </span><span class=\"RktSym\">~&gt;</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k-cc</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k-cc</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"stt\"> </span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"stt\"> </span><span class=\"RktSym\">cont</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"stt\"> </span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></p>\n\n<p>This is very subtle, so let&rsquo;s go through it slowly. <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> is a function in CPS land, which takes in an argument, <span class=\"RktSym\">f</span>, which is the function that takes in the current continuation, and an extra argument <span class=\"RktSym\">k</span>, the continuation at the point of the application of <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> . <span class=\"RktSym\">k</span> is the continuation for the whole <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> application. In other words, it&rsquo;s the current continuation! The lambda that we pass to <span class=\"RktSym\">f</span> is where the magic happens. Remember, this lambda is meant to give <span class=\"RktSym\">f</span> access to the current continuation, <span class=\"RktSym\">k</span>. Since <span class=\"RktSym\">f</span> is a function in CPS land, we must pass it a function that looks like a CPS&rsquo;ed function, which takes in a value and a continuation for what to do with the answer. So we make a \"fake\" CPS&rsquo;ed function that takes in the value <span class=\"RktSym\">v</span> that gets passed to <span class=\"RktSym\">k</span> to fill in the hole, and the continuation of the application of this lambda, <span class=\"RktSym\">cont</span>. But when <span class=\"RktSym\">f</span> calls the <span class=\"RktSym\">k</span>, we ignore that <span class=\"RktSym\">cont</span> continuation and use <span class=\"RktSym\">k</span> instead. This ignoring of <span class=\"RktSym\">cont</span> is why we get that aborting behavior. <span class=\"RktSym\">cont</span> has the context of what was going on in <span class=\"RktSym\">f</span>, and we throw it away and use <span class=\"RktSym\">k</span> instead. But if <span class=\"RktSym\">f</span> never calls <span class=\"RktSym\">k</span>, we don&rsquo;t get any of this weirdness, which is why usages of <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> that don&rsquo;t use <span class=\"RktSym\">k</span> don&rsquo;t abort. In this case, <span class=\"RktSym\">f</span> will end up calling <span class=\"RktSym\">k</span> with the result of its body since <span class=\"RktSym\">k</span> gets passed as the second argument to <span class=\"RktSym\">f</span>. Remember, <span class=\"RktSym\">f</span> is a CPS&rsquo;ed function, so its second argument is a continuation that it calls with its result. So the first argument to <span class=\"RktSym\">f</span> is our way of providing <span class=\"RktSym\">f</span> with <span class=\"RktSym\">k</span> early and bypassing the normal control flow, and the second argument just causes <span class=\"RktSym\">f</span> to behave as usual, resuming the normal control flow.</p>\n\n<p>That&rsquo;s the essence of CPS and <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> . We rewrite the program to work with these continuations everywhere so we can manipulate them to bypass the typical control flow with <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> .</p>\n\n<p>Here is the rewrite for <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span>:</p>\n\n<p><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span><span class=\"RktPn\">]</span><span class=\"stt\"> </span><span class=\"RktSym\">~&gt;</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k-cc</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k-cc</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"stt\"> </span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"stt\"> </span><span class=\"RktSym\">cont</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">cont</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"stt\"> </span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></p>\n\n<p>The only difference is that instead of ignoring <span class=\"RktSym\">cont</span>, the continuation of applying <span class=\"RktSym\">k</span> in <span class=\"RktSym\">f</span>, we call it with the result of <span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"stt\"> </span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span>. This means calling <span class=\"RktSym\">k</span> actually returns a result that we can use in <span class=\"RktSym\">f</span>. Remember, the abort behavior of <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> was caused by us ignoring <span class=\"RktSym\">cont</span>. This is because <span class=\"RktSym\">cont</span> contains the context of where we called <span class=\"RktSym\">k</span> in <span class=\"RktSym\">f</span>. But now that we use it, we aren&rsquo;t aborting anymore.</p>\n\n<p>But <span class=\"RktPn\">(</span><span class=\"RktSym\">cont</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"stt\"> </span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span> isn&rsquo;t a tail call! Thus, the power we gain with <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span> comes at the cost of space.</p>\n\n<p>Now that we have the essence of the rewrite rules, we can implement them.</p>\n\n<p>In racket, the syntax is very simple. Pretty much everything is either an atomic expression like a number, string, or variable, or a list of expressions surrounded by parentheses. This allows us to easily manipulate programs as data. For our translation, we will be converting regular Racket expressions into CPS Racket expressions. After our tranlation, we will simply invoke the Racket interpreter to evaluate our CPS expression.</p>\n\n<p>Before we get into translation, let&rsquo;s talk about some Racket stuff regarding expressions as data.</p>\n\n<p>In Racket, we have a data type called a symbol, which is kind of like a string. We use symbols to represent variable names. Symbols are written with a quote before a variable name like <span class=\"RktVal\">'</span><span class=\"RktVal\">x</span>. <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span> is a function which generates a unique symbol, and you can optionally pass in a base symbol. For example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'g16143</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">k-const</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'k-const16144</span></p></td></tr></tbody></table></div>\n\n<p>We use <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span> to generate unique variable names. This will make it so we don&rsquo;t have to worry about conflicting variable names for continuations.</p>\n\n<p>The quote character is not only used for creating symbols. If we prefix an expression with a quote, we get the expression itself as data instead of the result of evaluating it. For example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktVal\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(+ 1 2)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(+ 1 2)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._equal~3f%29%29\">equal?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktVal\">'</span><span class=\"RktVal\">1</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr></tbody></table></div>\n\n<p>The expression <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"stt\"> </span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span> is represented by a list containing the symbol <span class=\"RktVal\">'</span><span class=\"RktVal\">+</span> and two numbers 1 and 2. Quoting the expression gives us this list instead of evaluating to 3.</p>\n\n<p>We also see that quoting a number does nothing. This is because number expressions are just numbers.</p>\n\n<p>Quoting is very useful when you&rsquo;re working with expressions as data. But how would we create an expression with a <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span> in it? We could just make a list like</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">var</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">f</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">var</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'f16145</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">var</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">y</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(f16145 x y)</span></p></td></tr></tbody></table></div>\n\n<p>But if we&rsquo;re generating complicated expressions, having to manually use <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span> and quote all your variable names will be tedious and make it harder to see what expression we&rsquo;re generating. We have a tool called quasiquote which is perfect for this. Quasiquote uses the backtick instead of the quote character. It works similarly to quote:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktVal\">`</span><span class=\"RktVal\">x</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'x</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">+</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktVal\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(+ 1 2)</span></p></td></tr></tbody></table></div>\n\n<p>The difference is that you can escape the quotation with the comma character and have an expression evaluated inside of the quasiquote. For example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">var</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">f</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">var</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'f16146</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">var</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">y</span><span class=\"RktVal\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(var x y)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">var</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">y</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(f16146 x y)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">var</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">y</span><span class=\"RktVal\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(f16146 x y)</span></p></td></tr></tbody></table></div>\n\n<p>Instead of putting the symbol <span class=\"RktVal\">'</span><span class=\"RktVal\">var</span> in the list like when we used normal quotation, we evaluate <span class=\"RktSym\">var</span> and put that in the list.</p>\n\n<p>It&rsquo;s like JavaScript&rsquo;s template literals and Python&rsquo;s format strings, but for building expressions instead of strings.</p>\n\n<p>Now that we have that out of the way, let&rsquo;s start with the translation for constant expressions:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Namespaces.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define-namespace-anchor%29%29\">define-namespace-anchor</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">anc</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ns</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Namespaces.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._namespace-anchor-~3enamespace%29%29\">namespace-anchor-&gt;namespace</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">anc</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">k-const</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">expr</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(lambda (k-const16147) (k-const16147 1))</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/eval.html#%28def._%28%28quote._~23~25kernel%29._eval%29%29\">eval</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ns</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr></tbody></table></div>\n\n<p>The namespace stuff isn&rsquo;t important to understand for our purposes, so let&rsquo;s ignore it.</p>\n\n<p>We have our function <span class=\"RktSym\">cps-transform</span>, which takes in an expression and returns a CPS expression. Then, we have <span class=\"RktSym\">eval/cps</span> which calls our translation function and invokes the racket interpreter to evaluate our CPS expression. Then, since a CPS expression is a function which expects a continuation, we pass it the identity function to \"leave CPS land\" and get a value.</p>\n\n<p>The built-in <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/eval.html#%28def._%28%28quote._~23~25kernel%29._eval%29%29\">eval</a></span> function expects an expression as data, like what we&rsquo;re working with, and evaluates it to a value.</p>\n\n<p>For constant expressions like numbers, we wrap them in a function that takes in a continuation and just applies it to the constant. But remember, we&rsquo;re returning an expression that evaluates to a function, we&rsquo;re not returning a function. This is a program-to-program transformation that happens before any evaluation. That&rsquo;s why we have to <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/eval.html#%28def._%28%28quote._~23~25kernel%29._eval%29%29\">eval</a></span> the result of our translation.</p>\n\n<p>Before we tackle more complicated types of expressions, we have to talk about pattern matching. This is a tool for performing case analysis based on the shape and content of data. For example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">fib</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">fib</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._-%29%29\"><span class=\"nobreak\">-</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">fib</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._-%29%29\"><span class=\"nobreak\">-</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">fib</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">fib</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">fib</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">fib</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">3</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">fib</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">5</span></p></td></tr></tbody></table></div>\n\n<p>Here, we are performing a case analysis on <span class=\"RktSym\">n</span>. <span class=\"RktVal\">0</span> is a pattern that matches the value <span class=\"RktVal\">0</span>, <span class=\"RktVal\">1</span> matches <span class=\"RktVal\">1</span>, and the variable pattern <span class=\"RktSym\">n</span> matches any value and binds it to <span class=\"RktSym\">n</span>. This is something you could do with a simple switch statement in popular languages like Java. But pattern matching can also be used to inspect the shape of nested data:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">get-variable-references</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">argument-name</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">get-variable-references</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">function-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">argument-expr</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">get-variable-references</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">function-expr</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">get-variable-references</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">argument-expr</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">variable-name</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">variable-name</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">get-variable-references</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">x</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(x)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">get-variable-references</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">y</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(x)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">get-variable-references</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">y</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(x y)</span></p></td></tr></tbody></table></div>\n\n<p>We have three types of expressions: (single argument) lambda expressions, function applications, and variable references. And we compute a list containing all variable references. The pattern <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktVal\">'</span><span class=\"RktVal\">lambda</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktSym\">argument-name</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span> matches a 3-element list where the first element is the symbol <span class=\"RktVal\">'</span><span class=\"RktVal\">lambda</span>, the second element is a singleton list containing an argument name, which we bind to the variable <span class=\"RktSym\">argument-name</span>, and the third element is the body expression of the lambda. Since the argument name is not a variable reference, we don&rsquo;t include it in the output, and just recur on the body. Function applications are just a list of expressions, so we use a simple 2-element list pattern. The first element is a function expression and the second element is the argument expression. We recur on both and append the lists of variable names from both expressions. Finally, the only other type of expression is a variable reference, so we can just use a variable pattern and return the singleton list containing the variable name.</p>\n\n<p>The order of cases matters. In a <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span>, the first pattern that matches is the only one that gets used. So if we put the variable expression case first, since the pattern is just a variable pattern, it&rsquo;ll match anything. Then we&rsquo;d be treating everything as a variable reference, which would be nonsense. We have to be careful with the order of our patterns. In general, we put more specific patterns first and more general ones last to avoid false matches.</p>\n\n<p>Similar to how we have quasiquote for building expressions as data, we have quasiquote patterns for matching on expressions.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">get-variable-references</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">argument-name</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">get-variable-references</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">function-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">argument-expr</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">get-variable-references</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">function-expr</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">get-variable-references</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">argument-expr</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">variable-name</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">variable-name</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">get-variable-references</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">x</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(x)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">get-variable-references</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">y</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(x)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">get-variable-references</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">y</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(x y)</span></p></td></tr></tbody></table></div>\n\n<p>With quasiquote, patterns escaped by commas are matched as patterns, and things that aren&rsquo;t escaped are matched against their quoted values.</p>\n\n<p>Now, let&rsquo;s translate lamdbas and function applications to CPS.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">args</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">k-lam</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">cont</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">args</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">cont</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">xs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">...</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">k-app</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform-app</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">xs</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">const-expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">k-const</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">const-expr</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform-app</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">exprs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">exprs^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Fmap..rkt%29._map%29%29\">map</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cps-transform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">exprs</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Fmap..rkt%29._map%29%29\">map</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">v-app</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">exprs</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Flist..rkt%29._foldr%29%29\">foldr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">expr^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">expr^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">v</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">exprs^</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">vs</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\">'(lambda (k-lam16517)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(k-lam16517</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(lambda (x cont16518)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">((lambda (k-const16519) (k-const16519 x)) cont16518))))</span></p></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">z</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\">'(lambda (k-app16520)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">((lambda (k-const16521) (k-const16521 f))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(lambda (v-app16525)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">((lambda (k-const16522) (k-const16522 x))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(lambda (v-app16526)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">((lambda (k-const16523) (k-const16523 y))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(lambda (v-app16527)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">((lambda (k-const16524) (k-const16524 z))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(lambda (v-app16528)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(v-app16525</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">v-app16526</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">v-app16527</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">v-app16528</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">k-app16520))))))))))</span></p></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\">'(lambda (k-app16529)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">((lambda (k-lam16530)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(k-lam16530</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(lambda (x cont16531)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">((lambda (k-const16532) (k-const16532 x)) cont16531))))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(lambda (v-app16534)</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">((lambda (k-const16533) (k-const16533 2))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktRes\">(lambda (v-app16535) (v-app16534 v-app16535 k-app16529))))))</span></p></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr></tbody></table></div>\n\n<p>The ellipsis in the pattern for the function application case just binds the rest of the list after <span class=\"RktSym\">f</span> to <span class=\"RktSym\">xs</span>.</p>\n\n<p>One difference between the rewrite rules and this is that functions can take in more than one argument. We just add an argument for the continuation at the end.</p>\n\n<p>For the lambda case, we capture the list of argument names and the body expression with our pattern. Then, we generate random variable names for <span class=\"RktSym\">k</span> and <span class=\"RktSym\">cont</span> from the rewrite rules. Finally, we build our CPS&rsquo;ed lambda using quasiquote. We add an argument for the <span class=\"RktSym\">cont</span> continuation at the end of the argument name list and we call the translated body with that continuation.</p>\n\n<p>The application case looks complicated, especially now that we are dealing with an arbitrary number of arguments. Really, all we&rsquo;re doing is generating a chain of nested applications that give us access to the values of the function and its arguments, and then we put it all together by applying the function to its arguments and the continuation. We also wrap the whole thing with a lambda that takes in a continuation as usual. The <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Flist..rkt%29._foldr%29%29\">foldr</a></span> is used to generate that nested structure from the elements of the list. It&rsquo;s sort of like <span class=\"RktSym\">Array#reduce</span><span class=\"RktMeta\"></span> in JavaScript.</p>\n\n<p>Now, let&rsquo;s add <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> into the mix:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">'</span><span class=\"RktVal\">call-with-current-continuation</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k-cc</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k-cc</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">cont</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">val</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">args</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">k-lam</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">cont</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">args</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">cont</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">xs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">...</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">k-app</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform-app</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">xs</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">const-expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">k-const</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">const-expr</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p><span class=\"RktSym\">k-cc</span> is the continuation for the variable reference to <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> , which isn&rsquo;t very interesting. <span class=\"RktSym\">f</span> is the function that receives the current continuation, <span class=\"RktSym\">k</span>. This is the continuation for the application of the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> . <span class=\"RktSym\">val</span> is the value that gets filled in for the hole. <span class=\"RktSym\">cont</span> is the continuation for the application of <span class=\"RktSym\">k</span>, which gets ignored. We don&rsquo;t have to worry about variable collisions since <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> gets translated to the exact same expression every time, so no need for <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span> or quasiquote.</p>\n\n<p>It&rsquo;ll be hard to test out our <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> with just pure lambdas, so let&rsquo;s add a built-in function for addition:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">'</span><span class=\"RktVal\">call-with-current-continuation</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k-cc</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k-cc</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">cont</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">val</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">'</span><span class=\"RktVal\">add1</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k-add1</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k-add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">cont</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">cont</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">n</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">args</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">k-lam</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">cont</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">args</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">cont</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">xs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">...</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">k-app</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform-app</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">xs</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">const-expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">k-const</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">const-expr</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>We added <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span>, which adds 1 to a number. We wrapped it in a continuation lambda and a lambda which takes in the number and an extra continuation argument. But inside, we just call the continuation with the result of calling the real <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span> function on the number. This isn&rsquo;t how applications usually work and breaks the fact that everything is a tail call, but that&rsquo;s ok.</p>\n\n<p>Now, let&rsquo;s use <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> :</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">call-with-current-continuation</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">0</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">call-with-current-continuation</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">0</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">call-with-current-continuation</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">0</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">call-with-current-continuation</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">call-with-current-continuation</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">3</span></p></td></tr></tbody></table></div>\n\n<p>In the last few examples, we observe the aborting behavior of <span class=\"RktSym\">k</span>. And in the last example, we see that <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> does indeed capture the surrounding context.</p>\n\n<p>Let&rsquo;s also add support for <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">'</span><span class=\"RktVal\">call-with-current-continuation</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k-cc</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k-cc</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">cont</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">val</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">'</span><span class=\"RktVal\">call-with-composable-continuation</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k-cc</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k-cc</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">cont</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">cont</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">val</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">'</span><span class=\"RktVal\">add1</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k-add1</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k-add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">cont</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">cont</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">n</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">args</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">k-lam</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">cont</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">args</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">cont</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">xs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">...</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">k-app</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform-app</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">xs</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">const-expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">k-const</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">const-expr</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">call-with-current-continuation</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">call-with-current-continuation</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">call-with-current-continuation</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">3</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">call-with-composable-continuation</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">call-with-composable-continuation</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">3</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">call-with-composable-continuation</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">7</span></p></td></tr></tbody></table></div>\n\n<h1>4\n <tt>&nbsp;</tt><a name=\"(part._.Delimited_continuations)\"></a>Delimited continuations</h1>\n\n<p>One weird thing about <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> is that it essentially captures the context of the whole program. This can cause strange behavior to leak out farther than may be intended, like with our back tracking example. To limit the scope of these strange effects, we can use delimited continuations. For example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">racket/control</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">3</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">4</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">0</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr></tbody></table></div>\n\n<p><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> is like <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span>, except instead of taking in a function for what to do with the continuation, it binds the continuation at the point of the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> to a variable <span class=\"RktSym\">k</span> and then lets you use it. <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> is the delimiter for the continuations captured by <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>. Instead of capturing the entire rest of the program, <span class=\"RktSym\">k</span> only captures the continuation from the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> to the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>. In the third example, <span class=\"RktSym\">k</span> just captures the inner <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span> since it&rsquo;s in the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>, so it only adds 1. But in the next example, when we move the outer <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span> inside of the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>, so <span class=\"RktSym\">k</span> adds 2.</p>\n\n<p>In the last two examples, we also see that there is some abort behavior with <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>. When we use <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> in a <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>, the entire <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> is replaced with the body of the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>. But inside of the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>, we can use <span class=\"RktSym\">k</span> to fill in the hole at the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>. The continuation doesn&rsquo;t abort like <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> continuations do, but <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> itself does abort.</p>\n\n<p>Of course, you can also save continuations using delimited continuations:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">0</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">saved-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr></tbody></table></div>\n\n<p>Let&rsquo;s implement back tracking using delimited continuations:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">search-branches</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">quit-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-backtracking</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">search-branches</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">result</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">quit-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29\">void</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._when%29%29\">when</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._empty~3f%29%29\">empty?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">search-branches</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"search failed\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">next</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._first%29%29\">first</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">search-branches</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">search-branches</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._rest%29%29\">rest</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">search-branches</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">next</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">search-branches</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">quit-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktSym\">result</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choice</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vals</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._when%29%29\">when</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/booleans.html#%28def._%28%28quote._~23~25kernel%29._not%29%29\">not</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">quit-k</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"cannot branch outside of a search\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">search-branches</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">search-branches</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Flist%29%29\">for/list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vals</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">val</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">quit-k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29\">void</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">assert</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">condition</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">condition</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29\">void</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choice</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">find-pythag</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">with-backtracking</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choice</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">7</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">8</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">9</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">11</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">12</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">13</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choice</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">7</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">8</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">9</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">11</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">12</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">13</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">choice</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">7</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">8</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">9</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">11</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">12</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">13</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">assert</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._equal~3f%29%29\">equal?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">assert</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c~3d%29%29\">&lt;=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">b</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">find-pythag</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(3 4 5)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">choice</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktErr\">cannot branch outside of a search</span></p></td></tr></tbody></table></div>\n\n<p>Now that we&rsquo;re using <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>, we can be confident that the context captured in our continuations doesn&rsquo;t extend outside of the <span class=\"RktSym\">with-backtracking</span>. We also added some cleanup after the body runs. We could&rsquo;ve done that cleanup in our <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> implementation, but the continuations still would&rsquo;ve captured more than we wanted.</p>\n\n<p>Here are the rewrite rules for <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>, taken from <a href=\"https://www.deinprogramm.de/sperber/papers/shift-reset-direct.pdf\">this paper</a>:</p>\n\n<p><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span><span class=\"stt\"> </span><span class=\"RktSym\">e</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"stt\"> </span><span class=\"RktSym\">~&gt;</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">e</span><span class=\"RktPn\">]</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></p>\n\n<p>We pass the identity function to the body as its continuation. Remember, this is how we leave CPS land and get a value directly. Then, we call <span class=\"RktSym\">k</span> on the result of doing that. This is why continuations in the body only capture up to the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>. The body knows nothing about <span class=\"RktSym\">k</span>, which has the context surrounding the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>. It&rsquo;s like we&rsquo;re running the body in a sandbox.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">c</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">e</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">~&gt;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">c</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cont</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">e</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>In racket, <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span> is used to make local variables. For example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">6</span></p></td></tr></tbody></table></div>\n\n<p>For reference, here is the rewrite for <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span> again:</p>\n\n<p><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-composable-continuation%29%29\">call-with-composable-continuation</a></span><span class=\"RktPn\">]</span><span class=\"stt\"> </span><span class=\"RktSym\">~&gt;</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k-cc</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k-cc</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"stt\"> </span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"stt\"> </span><span class=\"RktSym\">cont</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">cont</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"stt\"> </span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></p>\n\n<p>We create that same <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">cont</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">k</span><span class=\"stt\"> </span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span> and supply it to the body, but instead of the body being a function and us calling it with the lambda, we are creating a local variable for the lambda. Since we don&rsquo;t ignore <span class=\"RktSym\">cont</span>, the continuations are non-aborting. However, take a close look at the continuation that we pass to the body. It&rsquo;s the identity function! Supplying the identity function as the continuation is how we leave CPS land and get an immediate value. Since we don&rsquo;t pass <span class=\"RktSym\">k</span> to the body and use the identity function instead, we abort with the value of the body of the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span>. And since we have the sandboxing of <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>, we only abort to the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>. Without the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>, we&rsquo;d abort the whole computation.</p>\n\n<p>Let&rsquo;s add them to our translation:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">'</span><span class=\"RktVal\">call-with-current-continuation</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k-cc</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k-cc</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">cont</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">val</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">'</span><span class=\"RktVal\">call-with-composable-continuation</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k-cc</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k-cc</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">cont</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">cont</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">val</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">reset</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">expr</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">k-reset</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">expr^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">c</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">expr</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">k-shift</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">(</span><span class=\"RktVal\">let</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">[</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">c</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">cont</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">cont</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">val</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">]</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">expr^</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">x</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">'</span><span class=\"RktVal\">add1</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k-add1</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k-add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">cont</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">cont</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">n</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">args</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">k-lam</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">cont</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">args</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cont</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">body^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">cont</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">xs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">...</span><span class=\"RktVal\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">k-app</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cps-transform-app</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">xs</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"RktPn\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">const-expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/symbols.html#%28def._%28%28quote._~23~25kernel%29._gensym%29%29\">gensym</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">k-const</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">`</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">,</span><span class=\"RktSym\">const-expr</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">reset</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">0</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">reset</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">1</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">reset</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">reset</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">3</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">reset</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">4</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">0</span></p></td></tr></tbody></table></div>\n\n<p>In the last example, we see the aborting behavior of shift when there isn&rsquo;t a surrounding reset. It aborts the whole computation.</p>\n\n<p>Interestingly, our sandboxing in <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> also affects our non-delimited continuation operators:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">call-with-composable-continuation</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">3</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval/cps</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">reset</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">add1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">call-with-composable-continuation</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">k</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">4</span></p></td></tr></tbody></table></div>\n\n<p>Only the inner <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span> is captured.</p>\n\n<p>We can use our old operators to create delimited continuations as long as they are used inside of a <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span>. <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> is what delimits the continuations, <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> is just another operator like <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28def._%28%28quote._~23~25kernel%29._call-with-current-continuation%29%29\">call-with-current-continuation</a></span> . We don&rsquo;t really need <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._shift%29%29\">shift</a></span> to do delimited continuations, but it useful to have the option to abort to the <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29\">reset</a></span> and still have non-aborting continuations.</p>\n\n<h1>5\n <tt>&nbsp;</tt><a name=\"(part._.Conclusion)\"></a>Conclusion</h1>\n\n<p>Continuations are a confusing, but very powerful feature for a programming language to have. They allow users of the language to create control flow constructs like generators that most languages need to bake into their implementation. They&rsquo;re hard to reason about, especially in certain weird situations, but we can use them to create useful tools that are simple enough to reason about. They&rsquo;re not something you&rsquo;ll end up using directly very often, but having them in a language allows people to make very powerful tools with them.</p>")) ((? . 14) f post (u . "Parsing Text the Racket Way") (? . 14) 1744126109 (p+ #"/home/runner/work/blog/blog/repo/2024/08/parsing-text-the-racket-way.html" . unix) (u . "/blog/2024/08/parsing-text-the-racket-way.html") (u . "2024-08-24T17:02:21") (? . 5) #f (c (u . "racket") c (u . "macros") c (u . "dsls") c (u . "tutorials")) (u . "\n<p>Have you ever needed to process some raw text and extract only parts of it? Most of the time, you can get by with some nasty regular expressions with groups, but sometimes the pattern that you&rsquo;re trying to process is too complicated for regular expressions. That&rsquo;s what parsers are good for, and they&rsquo;re also the first step in an interpreter/compiler!</p>\n\n<p>In this post, we&rsquo;ll discover parsers and create a domain-specific language for creating parsers in Racket.</p>") #t (u . "\n<p>Have you ever needed to process some raw text and extract only parts of it? Most of the time, you can get by with some nasty regular expressions with groups, but sometimes the pattern that you&rsquo;re trying to process is too complicated for regular expressions. That&rsquo;s what parsers are good for, and they&rsquo;re also the first step in an interpreter/compiler!</p>\n\n<p>In this post, we&rsquo;ll discover parsers and create a domain-specific language for creating parsers in Racket.</p>\n<!--more-->\n\n<p>A parser is conceptually a function from a string to some other data structure. It reads in text and processes it into some data representation. For example, a JSON parser takes in JSON text and processes it into lists and maps of numbers, booleans, strings, and nulls. If you&rsquo;ve ever tried to write something like a parser yourself, you probably used regular expressions. But regular expressions can quickly become unwieldy as the \"language\" of text you&rsquo;re processing becomes more complicated. And they&rsquo;re not re-usable. You can&rsquo;t easily reference one regular expression from another. Let&rsquo;s start by making our own version of regular expressions that are less compact, but easier to read and more re-usable.</p>\n\n<p>Let&rsquo;s start out by thinking how this is going to work. We want a function that takes in a regular expression and a string and tells us whether the string matches the pattern specified by the regular expression. For example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/regexp.html#%28def._%28%28quote._~23~25kernel%29._regexp-match~3f%29%29\">regexp-match?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">repeat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"bar\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"baz\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">\"foobarbazbarbar\"</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>Here is the grammar for our little regular expression language:</p>\n\n<p></p>\n\n<table cellpadding=\"0\" cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td align=\"right\" valign=\"baseline\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktVar\">regexp</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"center\" valign=\"baseline\">=</td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"RktPn\">(</span><span class=\"RktSym\">repeat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVar\">regexp</span><span class=\"RktPn\">)</span></td></tr>\n  <tr>\n   <td align=\"right\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"center\" valign=\"baseline\">|</td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"RktPn\">(</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVar\">regexp</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVar\">regexp</span><span class=\"RktPn\">)</span></td></tr>\n  <tr>\n   <td align=\"right\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"center\" valign=\"baseline\">|</td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVar\">regexp</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVar\">regexp</span><span class=\"RktPn\">)</span></td></tr>\n  <tr>\n   <td align=\"right\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"center\" valign=\"baseline\">|</td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVar\">string-expr</span><span class=\"RktPn\">)</span></td></tr></tbody></table>\n\n<p><span class=\"RktSym\">repeat</span> matches zero or more occurrences of the sub-pattern, <span class=\"RktSym\">alt</span> matches if either sub-pattern matches, <span class=\"RktSym\">seq</span> matches if the first sub-pattern matches and the second sub-pattern matches the text <span class=\"emph\">after</span> the text matched by the first one, and <span class=\"RktSym\">text</span> matches the exact string passed to it.</p>\n\n<p>In order to support <span class=\"RktSym\">seq</span> and <span class=\"RktSym\">repeat</span>, we&rsquo;ll need some way to match a pattern on the beginning of a string and not expect it to match the entire string. Then, if it matched, we&rsquo;re going to need to know where the matched text ends so we can keep going on the rest of the text.</p>\n\n<p>To keep track of where we are in the target string, we&rsquo;ll use an index:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">index</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>The text will be a string, and the index will be a natural number indicating where in the string we should start looking as we match text. As we go through the string, we&rsquo;ll increase the index.</p>\n\n<p>Next, we have to figure out how we&rsquo;re going to represent regular expressions. What does a regular expression do? It should be able to take in a stream and either match text or fail. We&rsquo;ll represent matching the text by returning a new stream advanced to after the match, and failure as returning <span class=\"RktVal\">#f</span>. So a regular expression is a function which takes in a stream and either returns a stream or <span class=\"RktVal\">#f</span>. Let&rsquo;s start implementing!</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expected-str</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">index</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">index^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">index</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string-length%29%29\">string-length</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expected-str</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c~3d%29%29\">&lt;=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">index^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string-length%29%29\">string-length</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">text</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string~3d~3f%29%29\">string=?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expected-str</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._substring%29%29\">substring</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">index</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">index^</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">index^</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(stream \"foo\" 3)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foobar\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(stream \"foobar\" 3)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"fo\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"hello\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"aafooaa\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(stream \"aafooaa\" 5)</span></p></td></tr></tbody></table></div>\n\n<p>We make sure the <span class=\"emph\">next</span> text in the stream (starting at <span class=\"RktSym\">index</span>) is <span class=\"RktSym\">expected-str</span> and if it is, we advance the stream past that text. Otherwise, we return <span class=\"RktVal\">#f</span>. We also make sure there is enough text left in the stream to even match the text to avoid an index out of bounds error.</p>\n\n<p>Let&rsquo;s do <span class=\"RktSym\">seq</span> now:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re2</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">re1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">re2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"bar\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foobar\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(stream \"foobar\" 6)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"bar\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foobarbaz\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(stream \"foobarbaz\" 6)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"bar\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"fooxxx\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"bar\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"xxxbar\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr></tbody></table></div>\n\n<p>We run <span class=\"RktSym\">re1</span> on the initial input stream and if it succeeds, we run <span class=\"RktSym\">re2</span> on the advanced input stream.</p>\n\n<p>Now <span class=\"RktSym\">alt</span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re2</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">re1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">re2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"bar\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(stream \"foo\" 3)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"bar\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"bar\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(stream \"bar\" 3)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"bar\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"hello\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr></tbody></table></div>\n\n<p>Pretty straightforward translation! We try the first pattern and if it fails, we try the second on the same stream, from the same index that we started with (since there is no mutation, it doesn&rsquo;t matter if <span class=\"RktSym\">re1</span> \"advanced\" the stream before failing).</p>\n\n<p>Now, let&rsquo;s wrap it up with <span class=\"RktSym\">repeat</span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">repeat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">re</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">repeat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">in</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">repeat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"ha\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"ha\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(stream \"ha\" 2)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">repeat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"ha\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(stream \"\" 0)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">repeat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"ha\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"hahahahahahaha\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(stream \"hahahahahahaha\" 14)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">repeat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"ha\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"hahahahahahaha very funny\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(stream \"hahahahahahaha very funny\" 14)</span></p></td></tr></tbody></table></div>\n\n<p>If <span class=\"RktSym\">re</span> succeeds, we recur. Otherwise, we succeed anyway with the original input stream. Remember, we succeed on zero or more matches, so if the sub-pattern fails, the <span class=\"RktSym\">repeat</span> still succeeds.</p>\n\n<p>It&rsquo;s important to note that this is a greedy implementation of <span class=\"RktSym\">repeat</span> that will cause some patterns to fail when they shouldn&rsquo;t:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">repeat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"a\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"a\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"aaa\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr></tbody></table></div>\n\n<p>This should theoretically succeed with the <span class=\"RktPn\">(</span><span class=\"RktSym\">repeat</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"stt\"> </span><span class=\"RktVal\">\"a\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span> matching the first two <span class=\"RktVal\">\"a\"</span>s and the second <span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"stt\"> </span><span class=\"RktVal\">\"a\"</span><span class=\"RktPn\">)</span> matching the third, but since the repetition succeeds greedily matching the whole string, the second text pattern fails since the stream ended. We could implement backtracking matching, but to keep things simple, we&rsquo;ll just be mindful of this behavior and continue on.</p>\n\n<p>To provide our desired interface, let&rsquo;s implement <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/regexp.html#%28def._%28%28quote._~23~25kernel%29._regexp-match~3f%29%29\">regexp-match?</a></span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/regexp.html#%28def._%28%28quote._~23~25kernel%29._regexp-match~3f%29%29\">regexp-match?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">re</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3d%29%29\">=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string-length%29%29\">string-length</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">stream-index</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/regexp.html#%28def._%28%28quote._~23~25kernel%29._regexp-match~3f%29%29\">regexp-match?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/regexp.html#%28def._%28%28quote._~23~25kernel%29._regexp-match~3f%29%29\">regexp-match?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foobar\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr></tbody></table></div>\n\n<p>We add that index condition to make sure the pattern matches the entire string, not just a prefix.</p>\n\n<p>What we have right now is less powerful than regular expressions in some ways, like the fact that we can&rsquo;t use groups to extract pieces of text. We&rsquo;ll address that soon. However, what we have is more powerful than regular expressions in other ways. For example, we can create recursive regular expressions to match patterns that are impossible to match with typical regular expressions:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">balanced-parentheses</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"(\"</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">balanced-parentheses</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\")\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">in</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/regexp.html#%28def._%28%28quote._~23~25kernel%29._regexp-match~3f%29%29\">regexp-match?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">balanced-parentheses</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"()\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/regexp.html#%28def._%28%28quote._~23~25kernel%29._regexp-match~3f%29%29\">regexp-match?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">balanced-parentheses</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"(())\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/regexp.html#%28def._%28%28quote._~23~25kernel%29._regexp-match~3f%29%29\">regexp-match?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">balanced-parentheses</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"(((())))\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/regexp.html#%28def._%28%28quote._~23~25kernel%29._regexp-match~3f%29%29\">regexp-match?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">balanced-parentheses</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"(\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/regexp.html#%28def._%28%28quote._~23~25kernel%29._regexp-match~3f%29%29\">regexp-match?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">balanced-parentheses</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"())\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr></tbody></table></div>\n\n<p>That&rsquo;s impossible with typical non-recursive regular expressions. Also, that lambda may seem pointless, but if we don&rsquo;t do that, we won&rsquo;t be able to construct recursive regular expressions without going into an infinite loop. The lambda delays the recursion.</p>\n\n<p>To avoid writing that lambda, we can make a macro:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/regexp.html#%28def._%28%28quote._~23~25kernel%29._regexp%29%29\">regexp</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">re</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">balanced-parentheses</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/regexp.html#%28def._%28%28quote._~23~25kernel%29._regexp%29%29\">regexp</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"(\"</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">balanced-parentheses</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\")\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>We can also re-use regular expressions and create abstractions:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parenthesized</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"(\"</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">re</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\")\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/regexp.html#%28def._%28%28quote._~23~25kernel%29._regexp-match~3f%29%29\">regexp-match?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parenthesized</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"(foo)\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">spaces</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">repeat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\" \"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">sexpr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">atom</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/regexp.html#%28def._%28%28quote._~23~25kernel%29._regexp%29%29\">regexp</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">atom</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parenthesized</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">repeat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">sexpr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">atom</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">spaces</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._number%29%29\">number</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"0\"</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"1\"</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">repeat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"0\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"1\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/regexp.html#%28def._%28%28quote._~23~25kernel%29._regexp-match~3f%29%29\">regexp-match?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">sexpr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._number%29%29\">number</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"(1 (100 10 0) ())\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr></tbody></table></div>\n\n<p>Nice! Using just these simple tools, you could make a JSON recognizer, or even a recognizer for most programming languages. I say recognizer instead of parser because all we get is a boolean, not structured data. For that, we&rsquo;ll need full-blown parsers.</p>\n\n<p>A parser is going to be like a regular expression, except instead of just returning an input stream or <span class=\"RktVal\">#f</span>, it can return a result with the input stream on success. It will still just return <span class=\"RktVal\">#f</span> on failure.</p>\n\n<p>Let&rsquo;s define a grammar for parsers:</p>\n\n<p></p>\n\n<table cellpadding=\"0\" cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td align=\"right\" valign=\"baseline\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktVar\">parser</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"center\" valign=\"baseline\">=</td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"RktVar\">string-literal</span></td></tr>\n  <tr>\n   <td align=\"right\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"center\" valign=\"baseline\">|</td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVar\">string-expr</span><span class=\"RktPn\">)</span></td></tr>\n  <tr>\n   <td align=\"right\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"center\" valign=\"baseline\">|</td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"RktPn\">(</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVar\">parser</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">...+</span><span class=\"RktPn\">)</span></td></tr>\n  <tr>\n   <td align=\"right\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"center\" valign=\"baseline\">|</td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVar\">parser</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">...+</span><span class=\"RktPn\">)</span></td></tr>\n  <tr>\n   <td align=\"right\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"center\" valign=\"baseline\">|</td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"RktPn\">(</span><span class=\"RktSym\">repeat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVar\">parser</span><span class=\"RktPn\">)</span></td></tr>\n  <tr>\n   <td align=\"right\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"center\" valign=\"baseline\">|</td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"RktPn\">(</span><span class=\"RktSym\">bind</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVar\">id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVar\">parser</span><span class=\"RktPn\">)</span></td></tr>\n  <tr>\n   <td align=\"right\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"center\" valign=\"baseline\">|</td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVar\">parser</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVar\">expr</span><span class=\"RktPn\">)</span></td></tr>\n  <tr>\n   <td align=\"right\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"center\" valign=\"baseline\">|</td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"stt\">&nbsp;</span></td>\n   <td align=\"left\" valign=\"baseline\"><span class=\"RktVar\">racket-expr</span></td></tr></tbody></table>\n\n<p><span class=\"RktSym\">text</span> will return the matched text, string literals get converted into <span class=\"RktSym\">text</span> parsers, <span class=\"RktSym\">alt</span> will return the result of whichever parser succeeds, <span class=\"RktSym\">seq</span> will return a <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span> pair containing each sub-parser result, <span class=\"RktSym\">repeat</span> will return a list of parse results from the sub-parser, <span class=\"RktSym\">bind</span> binds the result of the sub-parser to a variable and returns it, and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span> ignores the sub-parser result and returns the value of the sub-expression instead. It&rsquo;s usually used with <span class=\"RktSym\">bind</span> to combine results of sub-parsers. The <span class=\"RktSym\">racket-expr</span> case is for referencing defined parsers like <span class=\"RktSym\">spaces</span> and <span class=\"RktSym\">parenthesized</span>.</p>\n\n<p>Here is an example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">addition</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">multiplication</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._expr%29%29\">expr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parser</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">number-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">addition-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">multiplication-expr</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">number-expr</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parser</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"1\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"0\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">addition-expr</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parser</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"(\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bind</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._expr%29%29\">expr</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"+\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bind</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._expr%29%29\">expr</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\")\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">addition</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">multiplication-expr</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parser</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"(\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bind</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._expr%29%29\">expr</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"*\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bind</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._expr%29%29\">expr</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\")\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">multiplication</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">parse</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._expr%29%29\">expr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"((1+1)*(1+1))\"</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>In this example, we define a parser for a tiny arithmetic language. We define structs for an abstract syntax tree and parse strings into our structs.</p>\n\n<p>Since we have <span class=\"RktSym\">bind</span>, we&rsquo;re going to need macros. And the binding structure is pretty weird here. We&rsquo;re binding a variable deep inside an expression and using it outside. It&rsquo;s sort of like <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span>. We&rsquo;re going to need a full-on macro compiler. In fact, our compiler will look a lot like the compiler for <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span> that we made in <a href=\"/blog/2023/10/understanding-and-implementing-pattern-matching.html\">this post</a>.</p>\n\n<p>Let&rsquo;s start by defining what we can as procedures and then add macros on top. Instead of returning either <span class=\"RktVal\">#f</span> or an input stream, we&rsquo;re going to return a new structure containing both an input stream and a parse result on success:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">parse-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">in^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">value</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>We can define <span class=\"RktSym\">parse</span> and <span class=\"RktSym\">text</span> as procedures:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parse</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">parser</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parser</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">result</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parse-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">idx^</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">value</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">#:when</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3d%29%29\">=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string-length%29%29\">string-length</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">idx^</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">value</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expected-str</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">index</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">index^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">index</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string-length%29%29\">string-length</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expected-str</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c~3d%29%29\">&lt;=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">index^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string-length%29%29\">string-length</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">text</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string~3d~3f%29%29\">string=?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">expected-str</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._substring%29%29\">substring</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">index</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">index^</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parse-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream%29%29\">stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">index^</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">expected-str</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">parse</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">\"foo\"</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">parse</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"fooooooo\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">parse</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"bar\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr></tbody></table></div>\n\n<p><span class=\"RktSym\">parse</span> is like <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/regexp.html#%28def._%28%28quote._~23~25kernel%29._regexp-match~3f%29%29\">regexp-match?</a></span>, but we return the result of the parse instead of a boolean.</p>\n\n<p><span class=\"RktSym\">text</span> is like regexp <span class=\"RktSym\">text</span>, except we return the matched string in a <span class=\"RktSym\">parse-result</span> with the resulting stream on success.</p>\n\n<p>Unfortunately, we can&rsquo;t easily define runtime representations for our other parsers like <span class=\"RktSym\">seq</span>. Due to the nature of how we&rsquo;re going to do binding, we&rsquo;re going to inline them in our compiler.</p>\n\n<p>Let&rsquo;s write our compiler top-down:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for-syntax%29%29\">for-syntax</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">syntax/parse</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parser</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">compile-parse</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parse-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define-syntax%29%29\">define-syntax</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">compile-parse</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Parsing_Syntax.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._syntax-parser%29%29\">syntax-parser</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in:id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Parsing_Syntax.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._syntax-parse%29%29\">syntax-parse</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktSym\">p</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">#:datum-literals</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">repeat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bind</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">s:string</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\">compile-parse</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\">compile-parse-seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\">compile-parse-alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">repeat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\">compile-parse-repeat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">e</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\">compile-parse-=&gt;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">e</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bind</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\">compile-parse-bind</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">e</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\">call-with-parse-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">e</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">call-with-parse-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">result</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parse-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">value</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">value</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>The <span class=\"RktSym\">parser</span> form is like the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/regexp.html#%28def._%28%28quote._~23~25kernel%29._regexp%29%29\">regexp</a></span> form we defined before. It wraps the parser in a <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span>, but it also invokes our compiler macro.</p>\n\n<p>Our compiler takes in a parser&rsquo;s syntax <span class=\"RktSym\">p</span>, an identifier that the input stream is bound to, <span class=\"RktSym\">in</span>, syntax for an <span class=\"RktSym\">on-success</span> procedure that takes in the resulting input stream and the parse result&rsquo;s value, and syntax for an <span class=\"RktSym\">on-fail</span> procedure which takes in zero arguments. Like our <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">match</a></span> compiler we made in <a href=\"/blog/2023/10/understanding-and-implementing-pattern-matching.html\">another post</a>, this compiler uses continuation-passing style with those <span class=\"RktSym\">on-success</span> and <span class=\"RktSym\">on-fail</span> procedures.</p>\n\n<p>For each case, we defer to sub-compilers that we&rsquo;ll write in a moment, except for the parser reference case, which we&rsquo;ve inlined. The parser reference case treats the parser syntax as a Racket expression that produces a parser, like <span class=\"RktSym\">parenthesized</span> or <span class=\"RktSym\">spaces</span>.</p>\n\n<p>Now let&rsquo;s start defining these sub-compilers:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define-syntax%29%29\">define-syntax</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">compile-parse-seq</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._syntax-rules%29%29\">syntax-rules</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">p0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">compile-parse</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">compile-parse</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in^^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vs</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vs</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>To parse an empty <span class=\"RktSym\">seq</span>, we simply succeed with an empty list. Otherwise, we run the first parser and <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span> its result ot the results of the rest of the <span class=\"RktSym\">seq</span>&rsquo;s results. The rest is just threading around the input stream.</p>\n\n<p>Unlike our regular expression <span class=\"RktSym\">seq</span>, this one can take zero or more sub-parsers, not just two.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define-syntax%29%29\">define-syntax</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">compile-parse-alt</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._syntax-rules%29%29\">syntax-rules</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">p0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">compile-parse</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">on-success</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">compile-parse</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>An empty <span class=\"RktSym\">alt</span> fails. Otherwise, we just try each sub-parser.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">compile-parse-=&gt;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">e</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">compile-parse</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">e</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>For <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span>, which is called a semantic action, we ignore the result of the sub-parse and just return <span class=\"RktSym\">e</span> instead.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">compile-parse-bind</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">compile-parse</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>For <span class=\"RktSym\">bind</span>, we bind the result to the variable name on success.</p>\n\n<p>Here is an example expansion of a semantic action and binding so we can see how they fit together:</p>\n\n<p></p>\n\n<div class=\"SIntrapara\">\n <div class=\"SCodeFlow\">\n  <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n   <tbody>\n    <tr>\n     <td><span class=\"RktPn\">(</span><span class=\"RktSym\">parser</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bind</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string-upcase%29%29\">string-upcase</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div></div>\n\n<div class=\"SIntrapara\">becomes something like\n</div>\n\n<div class=\"SIntrapara\">\n <div class=\"SCodeFlow\">\n  <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n   <tbody>\n    <tr>\n     <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">call-with-parse-result</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text-rt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in^^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in^^^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parse-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^^^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">in^^</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string-upcase%29%29\">string-upcase</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">in^</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div></div>\n\n<p>Our compiler creates nested <span class=\"RktSym\">on-success</span> lambdas, which is where binding happens. The resulting syntax is almost inside-out from the original, having the innermost sub-parsers on the outside executing first, as they should, and the outermost parsers on the inside executing last, on the results of the sub-parsers. That&rsquo;s how bindings inside the parser are usable in outer parts of the parser.</p>\n\n<p>Next up is <span class=\"RktSym\">repeat</span>, which is a little tricky because of binding. Consider this example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">number-expr</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parser</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"1\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"0\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">array-expr</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parser</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"[\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">repeat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bind</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">number-expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\",\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"]\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">parse</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">array-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"[1,0,1,]\"</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>The <span class=\"RktSym\">bind</span> is in the <span class=\"RktSym\">repeat</span>, but its variable is used outside of the <span class=\"RktSym\">repeat</span>. What should <span class=\"RktSym\">n</span> be bound to outside of the <span class=\"RktSym\">repeat</span>? This is like the syntax pattern</p>\n\n<div class=\"SCodeFlow\">\n <p><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">rhs</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"RktPn\">)</span></p></div>\n\n<p>In that pattern, <span class=\"RktSym\">x</span> gets bound to the list of all variables bound in the let. We&rsquo;ll do something similar, so outside of the <span class=\"RktSym\">repeat</span>, any variable that got bound inside will end up bound to the list of values it was bound to internally. So the result of that <span class=\"RktSym\">parse</span> should be <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"stt\"> </span><span class=\"RktVal\">0</span><span class=\"stt\"> </span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span>.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for-syntax%29%29\">for-syntax</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">syntax/parse</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/begin.html#%28form._%28%28quote._~23~25kernel%29._begin-for-syntax%29%29\">begin-for-syntax</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parser-bound-vars</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Parsing_Syntax.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._syntax-parse%29%29\">syntax-parse</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">#:datum-literals</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">repeat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bind</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/stxparse-patterns.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._~7eor%29%29\">~or</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">repeat</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._apply%29%29\">apply</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Fmap..rkt%29._map%29%29\">map</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">parser-bound-vars</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/stxparse-specifying.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._attribute%29%29\">attribute</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parser-bound-vars</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bind</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parser-bound-vars</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define-syntax%29%29\">define-syntax</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">compile-parse-repeat</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Parsing_Syntax.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._syntax-parser%29%29\">syntax-parser</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">on-fail</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Parsing_Syntax.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._define%2Fsyntax-parse%29%29\">define/syntax-parse</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parser-bound-vars</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Parsing_Syntax.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._define%2Fsyntax-parse%29%29\">define/syntax-parse</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">iter-v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stxops.html#%28def._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._generate-temporaries%29%29\">generate-temporaries</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/stxparse-specifying.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._attribute%29%29\">attribute</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Parsing_Syntax.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._define%2Fsyntax-parse%29%29\">define/syntax-parse</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/begin.html#%28form._%28%28quote._~23~25kernel%29._begin%29%29\">begin</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">iter-v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">iter-v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktRdr\">#'</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">iter-v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match-define%29%29\">match-define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parse-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">overall-in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">overall-result</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">in^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">compile-parse</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in^^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">value</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">call-with-parse-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^^</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in^^^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/values.html#%28def._%28%28quote._~23~25kernel%29._values%29%29\">values</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parse-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^^^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">value</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/values.html#%28def._%28%28quote._~23~25kernel%29._values%29%29\">values</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/unreachable.html#%28def._%28%28quote._~23~25kernel%29._assert-unreachable%29%29\">assert-unreachable</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parse-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">in^</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">v</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Flist..rkt%29._reverse%29%29\">reverse</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">iter-v</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">on-success</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">overall-in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">overall-result</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>We loop, running <span class=\"RktSym\">p</span> as many times as we can. Each time, we take all of the values bound inside <span class=\"RktSym\">p</span> and <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span> them to a list that contains the values of that variable for each parse of <span class=\"RktSym\">p</span>.</p>\n\n<p>For example:</p>\n\n<p></p>\n\n<div class=\"SIntrapara\">In\n</div>\n\n<div class=\"SIntrapara\">\n <div class=\"SCodeFlow\">\n  <p><span class=\"RktPn\">(</span><span class=\"RktSym\">repeat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bind</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">number-expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\",\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></p></div></div>\n\n<div class=\"SIntrapara\">the sub-parser becomes\n</div>\n\n<div class=\"SIntrapara\">\n <div class=\"SCodeFlow\">\n  <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n   <tbody>\n    <tr>\n     <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bind</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">number-expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\",\"</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/begin.html#%28form._%28%28quote._~23~25kernel%29._begin%29%29\">begin</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">iter-n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">iter-n</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div></div>\n\n<div class=\"SIntrapara\">and we run that parser for each iteration after initializing <span class=\"RktSym\">iter-n</span> to an empty list before we start looping.</div>\n\n<p>In the end, we reverse the lists because we built them up backwards, and then bind each variable to its corresponding list for outer use.</p>\n\n<p>Now let&rsquo;s parse some strings!</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">addition</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">multiplication</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:transparent</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._expr%29%29\">expr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parser</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">number-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">addition-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">multiplication-expr</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">number-expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parser</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"1\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"0\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">addition-expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parser</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"(\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bind</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._expr%29%29\">expr</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"+\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bind</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._expr%29%29\">expr</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\")\"</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">addition</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">multiplication-expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parser</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"(\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bind</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._expr%29%29\">expr</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"*\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bind</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._expr%29%29\">expr</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\")\"</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">multiplication</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">left</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">right</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">parse</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._expr%29%29\">expr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"((0+1)*(1+0))\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">(multiplication (addition 0 1) (addition 1 0))</span></p></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">array-expr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parser</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"[\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">repeat</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bind</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">number-expr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\",\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"]\"</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">parse</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">array-expr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"[1,0,1,]\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(1 0 1)</span></p></td></tr></tbody></table></div>\n\n<p>It is nice that we can define our own parsers and compose them, but there is a limitation with higher order parsers. For example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parenthesized</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parser</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">seq</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"(\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\")\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">parse</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parser</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._~3d~3e%29%29\">=&gt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parenthesized</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">parser</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bind</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"foo\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">\"(foo)\"</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktErr\">x: undefined;</span></p></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktErr\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktErr\">cannot reference an identifier before its definition</span></p></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktErr\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktErr\">in module: top-level</span></p></td></tr></tbody></table></div>\n\n<p>Since <span class=\"RktSym\">parenthesized</span> is just a procedure call, our compiler can&rsquo;t go inside of it and see if variables are bound, so <span class=\"RktSym\">x</span> winds up unbound.</p>\n\n<p>If instead, <span class=\"RktSym\">parenthesized</span> was some kind of parser macro, then it would work. But we&rsquo;d need our own custom DSL expander to support parser macros. There is a tool I&rsquo;m helping develop that will make it easy to do this, but that&rsquo;s a post for another day.</p>\n\n<p>Either way, what we&rsquo;ve just made is very powerful. We can now write parsers for JSON and even most programming languages! And our parsers are composable, declarative, and have the full power of Racket. We created custom syntax for a parsing DSL that inter-operates with normal Racket code, which is something that isn&rsquo;t possible in most programming languages. This is a task where language-oriented programming comes in very handy.</p>")) ((? . 15) f post (u . "Composable Promises: Adding Laziness to a Strict Language and Collapsing Indirection") (? . 15) 1744126109 (p+ #"/home/runner/work/blog/blog/repo/2022/10/composable-promises-adding-laziness-to-a-strict-language-and-collapsing-indirection.html" . unix) (u . "/blog/2022/10/composable-promises-adding-laziness-to-a-strict-language-and-collapsing-indirection.html") (u . "2022-10-02T21:20:34") #f (? . 6) (c (u . "racket") c (u . "tutorials")) (u . "\n<p>Before there is any confusion, I&rsquo;m not talking about JavaScript promises that are used for asynchronous computations.\nIn this case, a promise is just a delayed computation. For example, a simple form of a promise is a function that\ntakes in no arguments and returns a result. In this blog post, we will be focusing on promises that remember their\nresults and promises that may evaluate to other promises. Promises are useful for control flow and implementing\nlazy semantics in a strict language.</p>\n\n<p>In this blog post, we will learn what promises are and how to implement them efficiently. Promises are useful and\ninteresting, but honestly, I mainly wrote this just to talk about the algorithm for forcing composable promises because I\nthink it&rsquo;s very cool!</p>") #t (u . "\n<p>Before there is any confusion, I&rsquo;m not talking about JavaScript promises that are used for asynchronous computations.\nIn this case, a promise is just a delayed computation. For example, a simple form of a promise is a function that\ntakes in no arguments and returns a result. In this blog post, we will be focusing on promises that remember their\nresults and promises that may evaluate to other promises. Promises are useful for control flow and implementing\nlazy semantics in a strict language.</p>\n\n<p>In this blog post, we will learn what promises are and how to implement them efficiently. Promises are useful and\ninteresting, but honestly, I mainly wrote this just to talk about the algorithm for forcing composable promises because I\nthink it&rsquo;s very cool!</p>\n<!--more-->\n\n<h1>1\n <tt>&nbsp;</tt><a name=\"(part._.What_is_a_.Promise_)\"></a>What is a Promise?</h1>\n\n<p>A promise is a delayed computation. The computation executes at most once and remembers its result.\nHere are some examples of using promises:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._println%29%29\">println</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"in the delay\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._println%29%29\">println</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"in top-level\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktOut\">\"in top-level\"</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktOut\">\"in the delay\"</span></p></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr></tbody></table></div>\n\n<p>Notice that the <span class=\"RktVal\">\"in the delay\"</span> is only printed after the promise is <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span>d, not when the promise is created with <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span>.\nAnd the print does not run when we <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span> the promise again. This tells us that the promise remembers its result and\ndoes not re-evaluate its body upon subsequent <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span>s. In general, the body of a promise runs at most once. These simple promises can be\nimplemented by storing the return value of a zero-argument function.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">simple-promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28form._%28%28lib._racket%2Ffunction..rkt%29._thunk%29%29\">thunk</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:mutable</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">forced?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:mutable</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">make-simple-promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28form._%28%28lib._racket%2Ffunction..rkt%29._thunk%29%29\">thunk</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simple-promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28form._%28%28lib._racket%2Ffunction..rkt%29._thunk%29%29\">thunk</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29\">cond</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simple-promise-forced?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simple-promise-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._else%29%29\">else</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">simple-promise-thunk</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">set-simple-promise-result!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">result</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">set-simple-promise-forced?!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#t</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">result</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">make-simple-promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._println%29%29\">println</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"in the delay\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._println%29%29\">println</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"in top-level\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktOut\">\"in top-level\"</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktOut\">\"in the delay\"</span></p></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr></tbody></table></div>\n\n<p>If the promise has already been forced, we return the stored result. Otherwise, we call the thunk, store the result, and return it.</p>\n\n<p>One practical use of promises is for lazy streams.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28def._%28%28lib._racket%2Fstream..rkt%29._empty-stream%29%29\">empty-stream</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream-cons%29%29\">stream-cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">d</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">d</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28def._%28%28lib._racket%2Fstream..rkt%29._stream-take%29%29\">stream-take</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29\">cond</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._null~3f%29%29\">null?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/number-types.html#%28def._%28%28quote._~23~25kernel%29._zero~3f%29%29\">zero?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3d%29%29\">=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._car%29%29\">car</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._else%29%29\">else</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._car%29%29\">car</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28def._%28%28lib._racket%2Fstream..rkt%29._stream-take%29%29\">stream-take</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cdr%29%29\">cdr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._sub1%29%29\">sub1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">n</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream-cons%29%29\">stream-cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/begin.html#%28form._%28%28quote._~23~25kernel%29._begin%29%29\">begin</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._println%29%29\">println</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"in the tail\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28form._%28%28lib._racket%2Fstream..rkt%29._stream-cons%29%29\">stream-cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"boom\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28def._%28%28lib._racket%2Fstream..rkt%29._stream-take%29%29\">stream-take</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktOut\">\"in the tail\"</span></p></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(1 2)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/streams.html#%28def._%28%28lib._racket%2Fstream..rkt%29._stream-take%29%29\">stream-take</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(1 2)</span></p></td></tr></tbody></table></div>\n\n<h1>2\n <tt>&nbsp;</tt><a name=\"(part._.Composable_.Promises)\"></a>Composable Promises</h1>\n\n<p>What if you have a promise in a promise?</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._delay%29%29\">delay</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#&lt;promise:eval:1:0&gt;</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr></tbody></table></div>\n\n<p>If you are using promises in a complicated way, you may end up producing promises inside of other promises like this.\nFor example, let&rsquo;s say you&rsquo;re implementing an interpreter for a language with lazy semantics. If you use promises,\nyou will likely end up producing deeply nested promises. <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._lazy%29%29\">lazy</a></span> allows us to work with these nested promises:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._lazy%29%29\">lazy</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._lazy%29%29\">lazy</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._lazy%29%29\">lazy</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr></tbody></table></div>\n\n<p>With <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._lazy%29%29\">lazy</a></span>, forcing the outer promise forces all the intermediate promises and they all remember the inner result.</p>\n\n<h1>3\n <tt>&nbsp;</tt><a name=\"(part._.How_.Does_it_.Work_)\"></a>How Does it Work?</h1>\n\n<p>Let&rsquo;s use the following chain of promises as a running example:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._lazy%29%29\">lazy</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/begin.html#%28form._%28%28quote._~23~25kernel%29._begin%29%29\">begin</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/threads.html#%28def._%28%28quote._~23~25kernel%29._sleep%29%29\">sleep</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"hello\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._lazy%29%29\">lazy</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p4</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._lazy%29%29\">lazy</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._lazy%29%29\">lazy</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>Here is a diagram of the situation:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktSym\">p1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-?</span>&gt;</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">p2</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-?</span>&gt;</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">p3</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-?</span>&gt;</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">p4</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-?</span>&gt;</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/begin.html#%28form._%28%28quote._~23~25kernel%29._begin%29%29\">begin</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/threads.html#%28def._%28%28quote._~23~25kernel%29._sleep%29%29\">sleep</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">5</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"hello\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>Here is a diagram of what we want after forcing <span class=\"RktSym\">p1</span><span class=\"RktMeta\"></span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktSym\">p1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"hello\"</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktSym\">p2</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"hello\"</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktSym\">p3</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"hello\"</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktSym\">p4</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"hello\"</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>In these diagrams, <span class=\"RktSym\"><span class=\"nobreak\">-?</span>&gt;</span><span class=\"RktMeta\"></span> represents an un<span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span>d promise and <span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span> represents a <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span>d promise.</p>\n\n<p>How can we implement this? Naively, you&rsquo;d write a function that just <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span>s promises until you get a result. Something like this:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">force-deep</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29\">cond</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._promise~3f%29%29\">promise?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">force-deep</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._else%29%29\">else</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>Here is what the chain would look like after we used <span class=\"RktSym\">force-deep</span><span class=\"RktMeta\"></span> on <span class=\"RktSym\">p1</span><span class=\"RktMeta\"></span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktSym\">p1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">p2</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">p3</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">p4</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"hello\"</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>If we apply this function to <span class=\"RktSym\">p1</span><span class=\"RktMeta\"></span>, we will get back <span class=\"RktVal\">\"hello\"</span><span class=\"RktMeta\"></span>. However, if we <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span> <span class=\"RktSym\">p1</span><span class=\"RktMeta\"></span> again,\nwe will get <span class=\"RktSym\">p2</span><span class=\"RktMeta\"></span>, not <span class=\"RktVal\">\"hello\"</span><span class=\"RktMeta\"></span>. If we use <span class=\"RktSym\">force-deep</span><span class=\"RktMeta\"></span> again, we will get <span class=\"RktVal\">\"hello\"</span><span class=\"RktMeta\"></span>\nand it will be faster than the first time since the result is remembered and the <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/threads.html#%28def._%28%28quote._~23~25kernel%29._sleep%29%29\">sleep</a></span> would not run again.\nHowever, each promise stores its child, not the inner result. This means that when we\nuse <span class=\"RktSym\">force-deep</span><span class=\"RktMeta\"></span> on <span class=\"RktSym\">p1</span><span class=\"RktMeta\"></span> again, even though all the promises were already forced, we would still have to traverse\nthe whole \"chain\" again just to access the inner result stored in the innermost promise. We want each promise to remember the inner result,\nnot its child promise.</p>\n\n<p>Here is another attempt, ignoring regular promises for the moment:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">composable-promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28form._%28%28lib._racket%2Ffunction..rkt%29._thunk%29%29\">thunk</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:mutable</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">forced?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:mutable</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">make-composable-promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28form._%28%28lib._racket%2Ffunction..rkt%29._thunk%29%29\">thunk</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">composable-promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28form._%28%28lib._racket%2Ffunction..rkt%29._thunk%29%29\">thunk</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29\">cond</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">composable-promise-forced?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">composable-promise-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._else%29%29\">else</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">initial-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">composable-promise-thunk</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">composable-promise?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">initial-result</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">initial-result</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">set-composable-promise-result!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">result</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">set-composable-promise-forced?!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#t</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">result</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/begin.html#%28form._%28%28quote._~23~25kernel%29._begin%29%29\">begin</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">set-composable-promise-result!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">initial-result</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">set-composable-promise-forced?!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#t</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">initial-result</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._lazy%29%29\">lazy</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">make-composable-promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._lazy%29%29\">lazy</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._lazy%29%29\">lazy</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"hello\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktOut\">hello</span></p></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">composable-promise-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">2</span></p></td></tr></tbody></table></div>\n\n<p>As before, if the promise has already been forced, we return the stored result. Otherwise, we start by calling the thunk to get an initial result.\nIf that is yet another composable promise, we force that one too. Then we store and return that promise&rsquo;s result. If the thunk returned a regular\nvalue, we store and return it. The recursive case will go all the way down the chain, forcing every inner promise and storing the inner value, not\nthe inner promise itself.</p>\n\n<p>This is better. If we have a chain of promises and we force it, each promise will remember its result. Here is the diagram after forcing:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktSym\">p1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"hello\"</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktSym\">p2</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"hello\"</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktSym\">p3</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"hello\"</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktSym\">p4</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"hello\"</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>That&rsquo;s exactly what we want! Forcing <span class=\"RktSym\">p1</span><span class=\"RktMeta\"></span> once more will immediately return the stored result and wouldn&rsquo;t\nhave to traverse the chain again. But there is still one problem: that <span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">initial-result</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span> does not occur in tail position. This means that the forcing algorithm will use stack space\nthat grows linearly with respect to the chain length.</p>\n\n<p>How can we implement this with tail recursion?</p>\n\n<p>Consider this diagram:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktSym\">a</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-?</span>&gt;</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">b</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-?</span>&gt;</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">c</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-?</span>&gt;</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>Let&rsquo;s say we shallowly force <span class=\"RktSym\">a</span><span class=\"RktMeta\"></span>.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktSym\">a</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">b</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-?</span>&gt;</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">c</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-?</span>&gt;</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>We realize that <span class=\"RktSym\">a</span><span class=\"RktMeta\"></span> results in another promise, so we shallowly force that too.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktSym\">a</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">b</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">c</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-?</span>&gt;</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>Next, we swap <span class=\"RktSym\">a</span><span class=\"RktMeta\"></span> and <span class=\"RktSym\">b</span><span class=\"RktMeta\"></span>.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktSym\">b</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">a</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">c</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-?</span>&gt;</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>Then, we repeat from <span class=\"RktSym\">a</span><span class=\"RktMeta\"></span>.</p>\n\n<p>shallowly force it.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktSym\">b</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">a</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">c</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-?</span>&gt;</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>It was already forced, so nothing changed. Next, we realize that the result is another promise, namely <span class=\"RktSym\">c</span><span class=\"RktMeta\"></span>. So we shallowly force that too.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktSym\">b</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">a</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">c</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>Next, swap <span class=\"RktSym\">a</span><span class=\"RktMeta\"></span> and <span class=\"RktSym\">c</span><span class=\"RktMeta\"></span>.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktSym\">b</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">a</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">&#8593;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">c</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>Then, we repeat from <span class=\"RktSym\">a</span><span class=\"RktMeta\"></span> and continue until <span class=\"RktSym\">a</span><span class=\"RktMeta\"></span> points to a non-promise or its child points to a non-promise. In either of those two cases,\nwe store the non-promise.</p>\n\n<p>Here is what we&rsquo;d get if we ran this algorithm on <span class=\"RktSym\">p1</span><span class=\"RktMeta\"></span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktSym\">p2</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">p1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"hello\"</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">&#8593;</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">&#8593;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">p3</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">p4</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>In general, the pattern will be</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktSym\">p2</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">\\\\</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._-%29%29\"><span class=\"nobreak\">-</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29\">*</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">p1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">v</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktSym\">pn-1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">//</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">&#8593;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">pn</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>Intermediate promises will store the outer-most promise, the outer-most promise will store the final value, and the inner-most promise will store the final value.\nEach promise is at most 2 levels of indirection away from the final value. If we forced <span class=\"RktSym\">p2</span><span class=\"RktMeta\"></span> from this example after forcing <span class=\"RktSym\">p1</span><span class=\"RktMeta\"></span>, it would end up pointing directly to the final value.</p>\n\n<p>This is not quite what we wanted. We wanted all promises to store the final value directly. Realistically, however, a single layer of indirection for inner promises doesn&rsquo;t matter. Especially when it would end up being collapsed\nif an intermediate promise was forced afterwards. Asymptotically, we still get linear time with respect to chain length on the first force and constant time on any subsequent force on a promise in the chain. That&rsquo;s the same as our\nnaive algorithm. However, our naive algorithm used linear space, whereas this algorithm uses constant space. This is a tradeoff.</p>\n\n<p>Either way, I think this algorithm is pretty cool! In a single, linear-time, constant-space pass, we collapse the indirection. Here is the code:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">composable-promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28form._%28%28lib._racket%2Ffunction..rkt%29._thunk%29%29\">thunk</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:mutable</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">forced?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:mutable</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">make-composable-promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28form._%28%28lib._racket%2Ffunction..rkt%29._thunk%29%29\">thunk</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">composable-promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/procedures.html#%28form._%28%28lib._racket%2Ffunction..rkt%29._thunk%29%29\">thunk</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">shallow-force</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29\">cond</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">composable-promise-forced?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">composable-promise-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._else%29%29\">else</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">composable-promise-thunk</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">set-composable-promise-result!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">result</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">set-composable-promise-forced?!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#t</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">result</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">shallow-force</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29\">cond</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">composable-promise?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">result</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">inner-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">shallow-force</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">result</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29\">cond</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">composable-promise?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">inner-result</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">set-composable-promise-result!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">set-composable-promise-result!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">inner-result</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._else%29%29\">else</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">set-composable-promise-result!</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">inner-result</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">inner-result</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._else%29%29\">else</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">result</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._lazy%29%29\">lazy</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">make-composable-promise</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29\">lambda</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">body</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._lazy%29%29\">lazy</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"hello\"</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">42</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._lazy%29%29\">lazy</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p4</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._lazy%29%29\">lazy</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28form._%28%28lib._racket%2Fpromise..rkt%29._lazy%29%29\">lazy</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktOut\">hello</span></p></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">42</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">composable-promise-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">42</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">composable-promise-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p2</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#&lt;composable-promise&gt;</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">composable-promise-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p2</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._eq~3f%29%29\">eq?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">composable-promise-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">composable-promise-result</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p4</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">42</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Delayed_Evaluation.html#%28def._%28%28lib._racket%2Fpromise..rkt%29._force%29%29\">force</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">42</span></p></td></tr></tbody></table></div>\n\n<p>We can examine the stored results of the promises directly to see that it does, in fact, produce the graph we predicted.</p>\n\n<p>This implementation is missing a lot of things. There are no regular promises,\nthere is no error handling, there is no support for <span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/values.html#%28def._%28%28quote._~23~25kernel%29._values%29%29\">values</a></span>, and many more subtle things the real promise library handles. Regardless,\nthis provides insights into the inner workings of the library and an interesting algorithm for collapsing indirection.</p>"))))