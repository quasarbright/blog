<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">Mike Delmonaco's Blog: Posts tagged 'macros'</title>
 <link rel="self" href="https://quasarbright.github.io/blog/feeds/macros.atom.xml" />
 <link href="https://quasarbright.github.io/blog/tags/macros.html" />
 <id>urn:https-quasarbright-github-io:-blog-tags-macros-html</id>
 <updated>2024-08-24T17:02:21Z</updated>
 <entry>
  <title type="text">Parsing Text the Racket Way</title>
  <link rel="alternate" href="https://quasarbright.github.io/blog/2024/08/parsing-text-the-racket-way.html?utm_source=macros&amp;utm_medium=Atom" />
  <id>urn:https-quasarbright-github-io:-blog-2024-08-parsing-text-the-racket-way-html</id>
  <published>2024-08-24T17:02:21Z</published>
  <updated>2024-08-24T17:02:21Z</updated>
  <author>
   <name>Mike Delmonaco</name></author>
  <content type="html">
&lt;p&gt;Have you ever needed to process some raw text and extract only parts of it? Most of the time, you can get by with some nasty regular expressions with groups, but sometimes the pattern that you&amp;rsquo;re trying to process is too complicated for regular expressions. That&amp;rsquo;s what parsers are good for, and they&amp;rsquo;re also the first step in an interpreter/compiler!&lt;/p&gt;

&lt;p&gt;In this post, we&amp;rsquo;ll discover parsers and create a domain-specific language for creating parsers in Racket.&lt;/p&gt;&lt;a href="https://quasarbright.github.io/blog/2024/08/parsing-text-the-racket-way.html?utm_source=macros&amp;amp;utm_medium=Atom"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;</content></entry>
 <entry>
  <title type="text">Understanding and Implementing a Macro System</title>
  <link rel="alternate" href="https://quasarbright.github.io/blog/2023/12/understanding-and-implementing-a-macro-system.html?utm_source=macros&amp;utm_medium=Atom" />
  <id>urn:https-quasarbright-github-io:-blog-2023-12-understanding-and-implementing-a-macro-system-html</id>
  <published>2023-12-01T03:11:00Z</published>
  <updated>2023-12-01T03:11:00Z</updated>
  <author>
   <name>Mike Delmonaco</name></author>
  <content type="html">
&lt;p&gt;Macros are a powerful tool that allow programmers to extend the syntax of a language. In a language with macros, features like for-loops, while-loops, and pattern matching can be implemented as a library by users of the langauge! In this post, we&amp;rsquo;ll discover what macros are, how and why to use them, and how to implement a tiny language with a simple macro system.&lt;/p&gt;

&lt;p&gt;For this post, you&amp;rsquo;ll need some familiarity with Racket, but no familiarity with macros is required. If you don&amp;rsquo;t know what something is, click on the variable name in the code and you&amp;rsquo;ll be taken to its documentation.&lt;/p&gt;&lt;a href="https://quasarbright.github.io/blog/2023/12/understanding-and-implementing-a-macro-system.html?utm_source=macros&amp;amp;utm_medium=Atom"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;</content></entry></feed>