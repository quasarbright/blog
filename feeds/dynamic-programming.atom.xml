<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">Mike Delmonaco's Blog: Posts tagged 'dynamic-programming'</title>
 <link rel="self" href="https://quasarbright.github.io/blog/feeds/dynamic-programming.atom.xml" />
 <link href="https://quasarbright.github.io/blog/tags/dynamic-programming.html" />
 <id>urn:https-quasarbright-github-io:-blog-tags-dynamic-programming-html</id>
 <updated>2024-08-09T13:15:59Z</updated>
 <entry>
  <title type="text">Computing Fibonacci Numbers in Logarithmic Time</title>
  <link rel="alternate" href="https://quasarbright.github.io/blog/2024/08/computing-fibonacci-numbers-in-logarithmic-time.html?utm_source=dynamic-programming&amp;utm_medium=Atom" />
  <id>urn:https-quasarbright-github-io:-blog-2024-08-computing-fibonacci-numbers-in-logarithmic-time-html</id>
  <published>2024-08-09T13:15:59Z</published>
  <updated>2024-08-09T13:15:59Z</updated>
  <author>
   <name>Mike Delmonaco</name></author>
  <content type="html">
&lt;p&gt;In this post, we&amp;rsquo;re going to implement an algorithm for computing the \(n\)th fibonacci number. We&amp;rsquo;ll gradually optimize it and eventually end up with an algorithm that takes \(O(\log n)\) steps, which is much better than the \(n\) steps that most implementations take. I&amp;rsquo;ll assume some familiarity with complexity analysis. If you know big O notation, you&amp;rsquo;ll be fine.&lt;/p&gt;&lt;a href="https://quasarbright.github.io/blog/2024/08/computing-fibonacci-numbers-in-logarithmic-time.html?utm_source=dynamic-programming&amp;amp;utm_medium=Atom"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;</content></entry></feed>